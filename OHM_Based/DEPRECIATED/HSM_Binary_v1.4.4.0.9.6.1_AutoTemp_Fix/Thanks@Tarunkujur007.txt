21/3/2025

Fix Temperature value when in automatic connect mode.

Thanks Tarunkujur007



Changed the interval value of 'this.connectionTimer1.Interval = 3000' to 1000. This improved the real time CPU temperature values.
Modified the ConnectToDevice method.
Modified the dataCheck method.
Modified the ConnectionTimer1_Tick method
Modified the SendToArduino method
Modified the CheckDevice method.




Form1.cs
------------------------------------------------------------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.IO.Ports;
using System.Management;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using HardwareSerialMonitor.Properties;
using IniParser;
using IniParser.Model;
using OpenHardwareMonitor.Hardware;

namespace HardwareSerialMonitor
{
	// Token: 0x02000003 RID: 3
	public class Form1 : Form
	{
		// Token: 0x06000011 RID: 17 RVA: 0x00002D38 File Offset: 0x00000F38
		public Form1()
		{
			this.thisComputer = new Computer();
			this.thisComputer.CPUEnabled = true;
			this.thisComputer.GPUEnabled = true;
			this.thisComputer.HDDEnabled = true;
			this.thisComputer.MainboardEnabled = true;
			this.thisComputer.RAMEnabled = true;
			this.thisComputer.Open();
			this.InitializeComponent();
			this.trayIcon = Resources.TrayIcon1;
			this.ApplicationIcon = new NotifyIcon();
			this.ApplicationIcon.Icon = this.trayIcon;
			this.ApplicationIcon.Visible = true;
			this.ApplicationIcon.BalloonTipIcon = ToolTipIcon.Info;
			this.ApplicationIcon.BalloonTipText = "HSM";
			this.ApplicationIcon.BalloonTipTitle = "HSM";
			base.WindowState = FormWindowState.Minimized;
			base.ShowInTaskbar = false;
			base.FormBorderStyle = FormBorderStyle.FixedToolWindow;
			base.ControlBox = false;
			base.Opacity = 0.0;
			base.Hide();
			this.ApplicationIcon.ContextMenuStrip = this.menu;
			this.ApplicationIcon.MouseUp += this.ApplicationIcon_MouseUp;
			this.connectionTimer1.Interval = Form1.dataCheckInterval;
			this.connectionTimer1.Tick += this.connectionTimer1_Tick;
			this.connectionTimer1.Start();
			UsbDeviceNotifier.RegisterUsbDeviceNotification(base.Handle);
			this.checkDevice();
			this.CreateMenuItems();
		}

		// Token: 0x06000012 RID: 18 RVA: 0x00002EF8 File Offset: 0x000010F8
		private void connectionTimer1_Tick(object sender, EventArgs e)
		{
			if (this.AutomaticPortSelect)
			{
				if (this.isAttached && !this.isConnected)
				{
					this.isConnected = this.ConnectToDevice();
				}
				if (this.isConnected)
				{
					if (this.ApplicationIcon.Icon != Resources.TrayIconGreen)
					{
						this.ApplicationIcon.Icon = Resources.TrayIconGreen;
					}
					this.dataCheck();
					return;
				}
				if (this.ApplicationIcon.Icon != Resources.TrayIconRed)
				{
					this.ApplicationIcon.Icon = Resources.TrayIconRed;
					return;
				}
			}
			else if (this.ManualPortSelect)
			{
				this.dataCheck();
				if (!this.trayIcon.Equals(Resources.TrayIcon1) && this.ApplicationIcon.Icon != Resources.TrayIcon1)
				{
					this.ApplicationIcon.Icon = Resources.TrayIcon1;
				}
			}
		}

		// Token: 0x06000013 RID: 19 RVA: 0x000020AF File Offset: 0x000002AF
		private void ApplicationIcon_MouseUp(object sender, MouseEventArgs e)
		{
			this.InvalidateMenu(this.menu);
			if (e.Button == MouseButtons.Left)
			{
				typeof(NotifyIcon).GetMethod("ShowContextMenu", BindingFlags.Instance | BindingFlags.NonPublic).Invoke(this.ApplicationIcon, null);
			}
		}

		// Token: 0x06000014 RID: 20 RVA: 0x00002FC0 File Offset: 0x000011C0
		private void CreateMenuItems()
		{
			string AutoText = string.Empty;
			ToolStripMenuItem item = new ToolStripMenuItem();
			if (this.AutomaticPortSelect && Form1.mySerialPort != null)
			{
				string AutoDeviceName = this.getDeviceName(Form1.mySerialPort.PortName.ToString());
				AutoText = string.Concat(new string[]
				{
					"Automatic | ",
					AutoDeviceName,
					" (",
					Form1.mySerialPort.PortName.ToString(),
					")"
				});
			}
			else
			{
				AutoText = "Automatic Mode";
			}
			item.Text = AutoText;
			if (this.AutomaticPortSelect)
			{
				item.Checked = true;
			}
			else
			{
				item.Checked = false;
			}
			item.Click += this.Item_Click;
			this.menu.Items.Add(item);
			item = new ToolStripMenuItem();
			item.Text = "Serial Ports Available";
			ToolStripSeparator sep = new ToolStripSeparator();
			this.menu.Items.Add(sep);
			this.menu.Items.Add(item);
			string[] portNames = SerialPort.GetPortNames();
			for (int i = 0; i < portNames.Length; i++)
			{
				string port = portNames[i];
				string portName = port;
				string regexPattern = "\\D*(\\d+)\\D*";
				portName = "COM" + Regex.Replace(portName, regexPattern, "$1");
				item = new ToolStripMenuItem();
				string deviceName = this.getDeviceName(portName);
				item.Text = portName + " | " + deviceName;
				if (portName == this.portSelected)
				{
					item.Checked = true;
				}
				else
				{
					item.Checked = false;
				}
				item.Click += delegate(object sender, EventArgs e)
				{
					this.Selected_Serial(sender, e, portName);
				};
				item.Image = Resources.Serial;
				this.menu.Items.Add(item);
			}
			sep = new ToolStripSeparator();
			this.menu.Items.Add(sep);
			item = new ToolStripMenuItem();
			item.Text = "Refresh";
			item.Click += this.refresh_Click;
			this.menu.Items.Add(item);
			sep = new ToolStripSeparator();
			this.menu.Items.Add(sep);
			item = new ToolStripMenuItem();
			item.Text = "About";
			item.Click += this.About_Click;
			item.Image = Resources.info;
			this.menu.Items.Add(item);
			sep = new ToolStripSeparator();
			this.menu.Items.Add(sep);
			item = new ToolStripMenuItem();
			item.Text = "Exit";
			item.Click += this.Exit_Click;
			item.Image = Resources.Exit;
			this.menu.Items.Add(item);
		}

		// Token: 0x06000015 RID: 21 RVA: 0x000020ED File Offset: 0x000002ED
		private void refresh_Click(object sender, EventArgs e)
		{
			this.InvalidateMenu(this.menu);
			typeof(NotifyIcon).GetMethod("ShowContextMenu", BindingFlags.Instance | BindingFlags.NonPublic).Invoke(this.ApplicationIcon, null);
		}

		// Token: 0x06000016 RID: 22 RVA: 0x0000211E File Offset: 0x0000031E
		private void About_Click(object sender, EventArgs e)
		{
			new AboutBox1().Show();
		}

		// Token: 0x06000017 RID: 23 RVA: 0x000032A8 File Offset: 0x000014A8
		private void Item_Click(object sender, EventArgs e)
		{
			this.ManualPortSelect = false;
			this.AutomaticPortSelect = true;
			this.portSelected = string.Empty;
			try
			{
				if (Form1.mySerialPort.IsOpen)
				{
					Form1.mySerialPort.Close();
				}
				if (this.manualIsAttached)
				{
					this.isAttached = true;
					this.manualIsAttached = false;
					this.Vid_Pid = this.SPortVid_Pid;
				}
			}
			catch (Exception)
			{
			}
		}

		// Token: 0x06000018 RID: 24 RVA: 0x0000212A File Offset: 0x0000032A
		private void InvalidateMenu(ContextMenuStrip menu)
		{
			menu.Items.Clear();
			this.CreateMenuItems();
		}

		// Token: 0x06000019 RID: 25 RVA: 0x0000331C File Offset: 0x0000151C
		private void Selected_Serial(object sender, EventArgs e, string selected_port)
		{
			string regexPattern = "\\D*(\\d+)\\D*";
			selected_port = "COM" + Regex.Replace(selected_port, regexPattern, "$1");
			this.manualIsAttached = true;
			this.SPortVid_Pid = this.getVidPid(selected_port);
			Form1.devID = this.getDeviceID(selected_port);
			int indexOfVID = this.SPortVid_Pid.IndexOf("_") + 1;
			int indexOfPID = this.SPortVid_Pid.IndexOf("_", indexOfVID) + 1;
			if (this.SPortVid_Pid.Contains("BTHENUM"))
			{
				Form1.VID = "";
				Form1.PID = "";
			}
			try
			{
				Form1.VID = this.SPortVid_Pid.Substring(indexOfVID, 4);
				Form1.PID = this.SPortVid_Pid.Substring(indexOfPID, 4);
				Form1.ModifyINIData("VendorID", Form1.VID.ToString());
				Form1.ModifyINIData("ProductID", Form1.PID.ToString());
			}
			catch (Exception)
			{
			}
			Form1.ModifyINIData("DeviceID", Form1.devID.ToString());
			try
			{
				if (Form1.mySerialPort.IsOpen)
				{
					Form1.mySerialPort.Close();
				}
			}
			catch
			{
			}
			if (this.AutomaticPortSelect)
			{
				this.AutomaticPortSelect = false;
			}
			if (!this.ManualPortSelect)
			{
				this.ManualPortSelect = true;
			}
			this.portSelected = selected_port;
			Console.WriteLine("Selected port: " + selected_port);
			Form1.mySerialPort = new SerialPort(selected_port, 9600, Parity.None, 8, StopBits.One);
			Form1.mySerialPort.ReadTimeout = 500;
			Form1.mySerialPort.WriteTimeout = 500;
			Form1.mySerialPort.DtrEnable = true;
			Form1.mySerialPort.RtsEnable = true;
			try
			{
				if (!Form1.mySerialPort.IsOpen)
				{
					Form1.mySerialPort.Open();
				}
			}
			catch (Exception)
			{
			}
		}

		// Token: 0x0600001A RID: 26 RVA: 0x000034F4 File Offset: 0x000016F4
		private void Selected_Serial(string selected_port)
		{
			string regexPattern = "\\D*(\\d+)\\D*";
			selected_port = "COM" + Regex.Replace(selected_port, regexPattern, "$1");
			try
			{
				if (Form1.mySerialPort.IsOpen)
				{
					Form1.mySerialPort.Close();
				}
			}
			catch
			{
			}
			if (this.AutomaticPortSelect)
			{
				this.AutomaticPortSelect = false;
			}
			if (!this.ManualPortSelect)
			{
				this.ManualPortSelect = true;
			}
			this.portSelected = selected_port;
			Console.WriteLine("Selected port: " + selected_port);
			Form1.mySerialPort = new SerialPort(selected_port, 9600, Parity.None, 8, StopBits.One);
			Form1.mySerialPort.ReadTimeout = 500;
			Form1.mySerialPort.WriteTimeout = 500;
			Form1.mySerialPort.DtrEnable = true;
			Form1.mySerialPort.RtsEnable = true;
			this.manualIsAttached = true;
			try
			{
				if (!Form1.mySerialPort.IsOpen)
				{
					Form1.mySerialPort.Open();
				}
			}
			catch (Exception)
			{
			}
		}

		// Token: 0x0600001B RID: 27 RVA: 0x000035F4 File Offset: 0x000017F4
		private void dataCheck()
		{
			string text = "CPU";
			string text2 = "C";
			string value = "c";
			string value2 = "RL";
			string value3 = "R";
			string value4 = "RA";
			string text3 = "GPU";
			string value5 = "G";
			string value6 = "c";
			string value7 = "GCC";
			string value8 = "GCM";
			string value9 = "GSC";
			string value10 = "GMT";
			string value11 = "GMU";
			string value12 = "GML";
			string value13 = "GFANL";
			string value14 = "GRPM";
			string value15 = "GPWR";
			string value16 = "";
			int num = 0;
			IHardware[] hardware = this.thisComputer.Hardware;
			for (int i = 0; i < hardware.Length; i++)
			{
				hardware[i].Update();
			}
			foreach (IHardware hardware2 in this.thisComputer.Hardware)
			{
				if (hardware2.HardwareType.ToString().IndexOf("CPU") > -1)
				{
					text = "CPU:";
					text += hardware2.Name;
				}
				else if (hardware2.HardwareType.ToString().IndexOf("Gpu") > -1)
				{
					text3 = "GPU:";
					text3 += hardware2.Name;
				}
				foreach (ISensor sensor in hardware2.Sensors)
				{
					if (sensor.Value != null)
					{
						switch (sensor.SensorType)
						{
						case SensorType.Clock:
						{
							int num2 = (int)sensor.Value.Value;
							if (sensor.Name == "GPU Core")
							{
								value7 = "|GCC" + num2.ToString();
							}
							else if (sensor.Name == "GPU Memory")
							{
								value8 = "|GMC" + num2.ToString();
							}
							else if (sensor.Name == "GPU Shader")
							{
								value9 = "|GSC" + num2.ToString();
							}
							else if (sensor.Name.IndexOf("CPU Core") > -1 && num2 > num)
							{
								num = num2;
								value16 = "|CHC" + num.ToString() + "|";
							}
							break;
						}
						case SensorType.Temperature:
						{
							int num3 = (int)sensor.Value.Value;
							if (sensor.Name == "CPU Package")
							{
								text2 = num3.ToString();
							}
							else if (sensor.Name == "GPU Core")
							{
								value5 = num3.ToString();
							}
							break;
						}
						case SensorType.Load:
						{
							int num4 = (int)sensor.Value.Value;
							if (sensor.Name == "CPU Total")
							{
								value = num4.ToString();
							}
							else if (sensor.Name == "GPU Core")
							{
								value6 = num4.ToString();
							}
							else if (sensor.Name == "Memory")
							{
								value2 = num4.ToString();
							}
							else if (sensor.Name == "GPU Memory")
							{
								value12 = num4.ToString();
							}
							break;
						}
						case SensorType.Fan:
							if (sensor.Name == "GPU")
							{
								value14 = Math.Round((decimal)sensor.Value.Value, 1).ToString();
							}
							break;
						case SensorType.Control:
							if (sensor.Name == "GPU Fan")
							{
								value13 = Math.Round((decimal)sensor.Value.Value, 1).ToString();
							}
							break;
						case SensorType.Power:
							if (sensor.Name == "GPU Power")
							{
								value15 = Math.Round((decimal)sensor.Value.Value, 1).ToString();
							}
							break;
						case SensorType.Data:
							if (sensor.Name == "Available Memory")
							{
								value4 = Math.Round((decimal)sensor.Value.Value, 1).ToString();
							}
							else if (sensor.Name == "Used Memory")
							{
								value3 = Math.Round((decimal)sensor.Value.Value, 1).ToString();
							}
							break;
						case SensorType.SmallData:
							if (sensor.Name == "GPU Memory Total")
							{
								value10 = Math.Round((decimal)sensor.Value.Value, 0).ToString();
							}
							else if (sensor.Name == "GPU Memory Used")
							{
								value11 = Math.Round((decimal)sensor.Value.Value, 0).ToString();
							}
							break;
						}
					}
				}
				if (text2 == "")
				{
					int num5 = 0;
					int num6 = 0;
					foreach (ISensor sensor2 in hardware2.Sensors)
					{
						if (sensor2.SensorType == SensorType.Temperature && sensor2.Name.IndexOf("CPU Core") > -1 && sensor2.Value != null)
						{
							num6 += (int)sensor2.Value.Value;
							num5++;
						}
					}
					if (num5 > 0)
					{
						text2 = (num6 / num5).ToString();
					}
				}
			}
			StringBuilder stringBuilder = new StringBuilder(256);
			stringBuilder.Append("C").Append(text2).Append("c ").Append(value).Append("%|G").Append(value5).Append("c ").Append(value6).Append("%|R").Append(value3).Append("GB|RA").Append(value4).Append("|RL").Append(value2).Append("|GMT").Append(value10).Append("|GMU").Append(value11).Append("|GML").Append(value12).Append("|GFANL").Append(value13).Append("|GRPM").Append(value14).Append("|GPWR").Append(value15).Append("|");
			if (!string.IsNullOrEmpty(stringBuilder.ToString()))
			{
				stringBuilder.Append(text).Append(text3).Append(value7).Append(value8).Append(value9).Append(value16);
				this.sendToArduino(stringBuilder.ToString());
			}
		}

		// Token: 0x0600001C RID: 28 RVA: 0x00003D18 File Offset: 0x00001F18
		private bool ConnectToDevice()
		{
			if (Form1.mySerialPort != null && Form1.mySerialPort.IsOpen)
			{
				return true;
			}
			SerialPort.GetPortNames();
			bool flag = false;
			string queryString = "SELECT PNPDeviceID, Name FROM Win32_PnPEntity WHERE ClassGuid='{4d36e978-e325-11ce-bfc1-08002be10318}'";
			try
			{
				using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("root\\CIMV2", queryString))
				{
					foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
					{
						ManagementObject managementObject = (ManagementObject)managementBaseObject;
						string text = managementObject["PNPDeviceID"].ToString().ToUpper();
						if (Form1.devID != string.Empty)
						{
							if (text.IndexOf(this.Vid_Pid) <= -1)
							{
								continue;
							}
							if (text.IndexOf(Form1.devID) <= -1)
							{
								continue;
							}
						}
						else if (text.IndexOf(this.Vid_Pid) <= -1)
						{
							continue;
						}
						if (!this.isConnected && !flag)
						{
							string text2 = managementObject["Name"].ToString();
							string text3 = string.Empty;
							if (!text2.Contains("COM"))
							{
								continue;
							}
							int num = text2.IndexOf("COM");
							int num2 = text2.IndexOf(")", num);
							if (num2 == -1)
							{
								num2 = text2.Length;
							}
							text3 = text2.Substring(num, num2 - num);
							if (Form1.mySerialPort == null || Form1.mySerialPort.PortName != text3 || !Form1.mySerialPort.IsOpen)
							{
								try
								{
									if (Form1.mySerialPort != null && Form1.mySerialPort.IsOpen)
									{
										Form1.mySerialPort.Close();
									}
									Form1.mySerialPort = new SerialPort(text3, 9600, Parity.None, 8, StopBits.One);
									Form1.mySerialPort.ReadTimeout = 500;
									Form1.mySerialPort.WriteTimeout = 500;
									Form1.mySerialPort.DtrEnable = true;
									Form1.mySerialPort.RtsEnable = true;
									Form1.mySerialPort.Open();
								}
								catch
								{
									continue;
								}
							}
						}
						flag = true;
						break;
					}
				}
			}
			catch (ManagementException)
			{
			}
			return flag;
		}

		// Token: 0x0600001D RID: 29 RVA: 0x00003F7C File Offset: 0x0000217C
		private void sendToArduino(string arduinoData)
		{
			if (Form1.mySerialPort == null)
			{
				return;
			}
			bool flag = false;
			if (this.AutomaticPortSelect)
			{
				flag = this.isConnected;
			}
			else if (this.ManualPortSelect)
			{
				flag = this.manualIsAttached;
			}
			if (!flag)
			{
				return;
			}
			if (!Form1.mySerialPort.IsOpen)
			{
				try
				{
					Form1.mySerialPort.Open();
				}
				catch
				{
					return;
				}
			}
			try
			{
				Form1.mySerialPort.WriteLine(arduinoData);
			}
			catch
			{
			}
		}

		// Token: 0x0600001E RID: 30 RVA: 0x00004000 File Offset: 0x00002200
		private string getDeviceName(string port)
		{
			if (port == "COM1")
			{
				return "System Port";
			}
			string regexPattern = "\\D*(\\d+)\\D*";
			port = "COM" + Regex.Replace(port, regexPattern, "$1");
			string empty = string.Empty;
			string deviceName = string.Empty;
			string empty2 = string.Empty;
			string empty3 = string.Empty;
			ManagementObjectSearcher searcher = new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_PnPEntity WHERE ClassGuid='{4d36e978-e325-11ce-bfc1-08002be10318}'");
			try
			{
				foreach (ManagementBaseObject managementBaseObject in searcher.Get())
				{
					ManagementObject queryObj = (ManagementObject)managementBaseObject;
					if (queryObj["Name"].ToString().Contains(port))
					{
						deviceName = queryObj["Description"].ToString();
					}
				}
				if (deviceName == string.Empty)
				{
					deviceName = "(Name Not Available)";
				}
			}
			catch
			{
				deviceName = "(Name Not Available)";
			}
			return deviceName;
		}

		// Token: 0x0600001F RID: 31 RVA: 0x000040FC File Offset: 0x000022FC
		private string getVidPid(string port)
		{
			if (port == "COM1")
			{
				return "VID_0000&PID_0000";
			}
			string regexPattern = "\\D*(\\d+)\\D*";
			port = "COM" + Regex.Replace(port, regexPattern, "$1");
			string empty = string.Empty;
			string sPortDeviceID = string.Empty;
			foreach (ManagementBaseObject managementBaseObject in new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_PnPEntity WHERE ClassGuid='{4d36e978-e325-11ce-bfc1-08002be10318}'").Get())
			{
				ManagementObject QueryObj = (ManagementObject)managementBaseObject;
				if (QueryObj["Name"].ToString().Contains(port))
				{
					sPortDeviceID = QueryObj["PNPDeviceID"].ToString();
					if (sPortDeviceID.Contains("BTHENUM"))
					{
						int indexOfBT = sPortDeviceID.IndexOf("_");
						sPortDeviceID = sPortDeviceID.Substring(0, indexOfBT);
					}
					else
					{
						int indexOfVIDPID = sPortDeviceID.IndexOf("VID");
						sPortDeviceID = sPortDeviceID.Substring(indexOfVIDPID, 17);
					}
				}
			}
			return sPortDeviceID;
		}

		// Token: 0x06000020 RID: 32 RVA: 0x000041FC File Offset: 0x000023FC
		private string getDeviceID(string port)
		{
			if (port == "COM1")
			{
				return "SystemPort";
			}
			string regexPattern = "\\D*(\\d+)\\D*";
			port = "COM" + Regex.Replace(port, regexPattern, "$1");
			string deviceID = string.Empty;
			string sPortDeviceID = string.Empty;
			string empty = string.Empty;
			string empty2 = string.Empty;
			foreach (ManagementBaseObject managementBaseObject in new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_PnPEntity WHERE ClassGuid='{4d36e978-e325-11ce-bfc1-08002be10318}'").Get())
			{
				ManagementObject QueryObj = (ManagementObject)managementBaseObject;
				if (QueryObj["Name"].ToString().Contains(port))
				{
					deviceID = QueryObj["PNPDeviceID"].ToString();
					if (deviceID.Contains("BTHENUM"))
					{
						int indexOfBT = deviceID.IndexOf("_");
						sPortDeviceID = deviceID.Substring(0, indexOfBT);
					}
					else
					{
						int indexOfVIDPID = deviceID.IndexOf("VID");
						int indexOfDevID = deviceID.IndexOf("\\", indexOfVIDPID);
						deviceID.IndexOf("_", indexOfDevID);
						sPortDeviceID = deviceID.Substring(indexOfDevID + 1);
					}
				}
			}
			return sPortDeviceID;
		}

		// Token: 0x06000021 RID: 33 RVA: 0x0000432C File Offset: 0x0000252C
		public void Usb_DeviceRemoved(string deviceNameID)
		{
			if (deviceNameID.IndexOf(this.Vid_Pid) > -1)
			{
				this.isConnected = false;
				this.isAttached = false;
				if (this.AutomaticPortSelect)
				{
					try
					{
						Form1.mySerialPort.Dispose();
						Form1.mySerialPort.Close();
					}
					catch
					{
					}
				}
			}
			if (deviceNameID.IndexOf(this.SPortVid_Pid) > -1)
			{
				this.manualIsAttached = false;
				if (this.ManualPortSelect)
				{
					try
					{
						Form1.mySerialPort.Dispose();
						Form1.mySerialPort.Close();
					}
					catch
					{
					}
				}
			}
		}

		// Token: 0x06000022 RID: 34 RVA: 0x000043CC File Offset: 0x000025CC
		public void Usb_DeviceAdded(string deviceNameID)
		{
			if (deviceNameID.IndexOf(this.Vid_Pid) > -1)
			{
				Thread.Sleep(1000);
				this.isAttached = true;
			}
			if (deviceNameID.IndexOf(this.SPortVid_Pid) > -1)
			{
				Thread.Sleep(1000);
				if (this.ManualPortSelect)
				{
					this.Selected_Serial(this.portSelected);
				}
			}
		}

		// Token: 0x06000023 RID: 35 RVA: 0x00004428 File Offset: 0x00002628
		protected override void WndProc(ref Message m)
		{
			base.WndProc(ref m);
			if (m.Msg == 537)
			{
				int num = (int)m.WParam;
				if (num != 32768)
				{
					if (num == 32772)
					{
						Form1.DEV_BROADCAST_DEVICEINTERFACE hdrOut = (Form1.DEV_BROADCAST_DEVICEINTERFACE)m.GetLParam(typeof(Form1.DEV_BROADCAST_DEVICEINTERFACE));
						this.Usb_DeviceRemoved(hdrOut.dbcc_name);
						return;
					}
				}
				else
				{
					Form1.DEV_BROADCAST_DEVICEINTERFACE hdrIn = (Form1.DEV_BROADCAST_DEVICEINTERFACE)m.GetLParam(typeof(Form1.DEV_BROADCAST_DEVICEINTERFACE));
					this.Usb_DeviceAdded(hdrIn.dbcc_name);
				}
			}
		}

		// Token: 0x06000024 RID: 36 RVA: 0x000044AC File Offset: 0x000026AC
		public void checkDevice()
		{
			string queryString = "SELECT PNPDeviceID FROM Win32_PnPEntity WHERE ClassGuid='{4d36e978-e325-11ce-bfc1-08002be10318}'";
			try
			{
				using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("root\\CIMV2", queryString))
				{
					foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
					{
						string text = ((ManagementObject)managementBaseObject)["PNPDeviceID"].ToString().ToUpper();
						if (text.IndexOf(this.Vid_Pid) > -1)
						{
							if (!(Form1.devID != string.Empty))
							{
								this.isAttached = true;
								break;
							}
							if (text.IndexOf(Form1.devID) > -1)
							{
								this.isAttached = true;
								break;
							}
						}
					}
				}
			}
			catch (ManagementException)
			{
			}
		}

		// Token: 0x06000025 RID: 37 RVA: 0x00004588 File Offset: 0x00002788
		private void Exit_Click(object sender, EventArgs e)
		{
			try
			{
				if (Form1.mySerialPort.IsOpen)
				{
					Form1.mySerialPort.Close();
				}
			}
			catch
			{
			}
			base.Dispose();
			Application.Exit();
		}

		// Token: 0x06000026 RID: 38 RVA: 0x000045CC File Offset: 0x000027CC
		public static void CreateINIData()
		{
			new IniData();
			IniData createData = new IniData();
			FileIniDataParser fileIniDataParser = new FileIniDataParser();
			createData.Sections.AddSection("DeviceConfig");
			createData.Sections.GetSectionData("DeviceConfig").LeadingComments.Add("This is the configuration file for the Application");
			createData.Sections.GetSectionData("DeviceConfig").Keys.AddKey("VendorID", "0000");
			createData.Sections.GetSectionData("DeviceConfig").Keys.AddKey("ProductID", "0000");
			createData.Sections.GetSectionData("DeviceConfig").Keys.AddKey("DeviceID", "0");
			createData.Sections.GetSectionData("DeviceConfig").Keys.AddKey("isBT", "false");
			createData.Sections.GetSectionData("DeviceConfig").Keys.AddKey("BTDevice", "");
			fileIniDataParser.WriteFile("Config.ini", createData, null);
		}

		// Token: 0x06000027 RID: 39 RVA: 0x000046E0 File Offset: 0x000028E0
		public static void ModifyINIData(string name, string value)
		{
			int RetryTimes = 0;
			while (!File.Exists("Config.ini"))
			{
				if (RetryTimes != 0)
				{
					return;
				}
				Form1.CreateINIData();
				RetryTimes = 1;
			}
			FileIniDataParser fileIniDataParser = new FileIniDataParser();
			IniData modifiedData = fileIniDataParser.ReadFile("Config.ini");
			modifiedData["DeviceConfig"][name] = value;
			fileIniDataParser.WriteFile("Config.ini", modifiedData, null);
		}

		// Token: 0x06000028 RID: 40 RVA: 0x00004738 File Offset: 0x00002938
		public static string ReadINIData(string name)
		{
			string readIniData = null;
			int RetryTimes = 0;
			while (!File.Exists("Config.ini"))
			{
				if (RetryTimes != 0)
				{
					return readIniData;
				}
				Form1.CreateINIData();
				RetryTimes = 1;
			}
			return new FileIniDataParser().ReadFile("Config.ini")["DeviceConfig"][name];
		}

		// Token: 0x06000029 RID: 41 RVA: 0x0000213D File Offset: 0x0000033D
		protected override void Dispose(bool disposing)
		{
			if (disposing && this.components != null)
			{
				this.components.Dispose();
			}
			base.Dispose(disposing);
		}

		// Token: 0x0600002A RID: 42 RVA: 0x00004784 File Offset: 0x00002984
		private void InitializeComponent()
		{
			base.SuspendLayout();
			base.AutoScaleDimensions = new SizeF(8f, 16f);
			base.AutoScaleMode = AutoScaleMode.Font;
			this.BackgroundImageLayout = ImageLayout.None;
			base.ClientSize = new Size(289, 154);
			this.DoubleBuffered = true;
			base.Name = "Form1";
			this.Text = "Form1";
			base.ResumeLayout(false);
		}

		// Token: 0x0400000B RID: 11
		private static bool isBT = Convert.ToBoolean(Form1.ReadINIData("isBT"));

		// Token: 0x0400000C RID: 12
		private static string BTDevice = Convert.ToString(Form1.ReadINIData("BTDevice"));

		// Token: 0x0400000D RID: 13
		private static int dataCheckInterval = 1000;

		// Token: 0x0400000E RID: 14
		private static string VID = Convert.ToString(Form1.ReadINIData("VendorID"));

		// Token: 0x0400000F RID: 15
		private static string PID = Convert.ToString(Form1.ReadINIData("ProductID"));

		// Token: 0x04000010 RID: 16
		private static string devID = Convert.ToString(Form1.ReadINIData("DeviceID"));

		// Token: 0x04000011 RID: 17
		private Computer thisComputer;

		// Token: 0x04000012 RID: 18
		private string Vid_Pid = "VID_" + Form1.VID + "&PID_" + Form1.PID;

		// Token: 0x04000013 RID: 19
		private string SPortVid_Pid = string.Empty;

		// Token: 0x04000014 RID: 20
		private bool isConnected;

		// Token: 0x04000015 RID: 21
		private bool isAttached;

		// Token: 0x04000016 RID: 22
		private bool manualIsAttached;

		// Token: 0x04000017 RID: 23
		private string portSelected = string.Empty;

		// Token: 0x04000018 RID: 24
		private bool AutomaticPortSelect = true;

		// Token: 0x04000019 RID: 25
		private bool ManualPortSelect;

		// Token: 0x0400001A RID: 26
		private static SerialPort mySerialPort;

		// Token: 0x0400001B RID: 27
		private NotifyIcon ApplicationIcon;

		// Token: 0x0400001C RID: 28
		private Icon trayIcon;

		// Token: 0x0400001D RID: 29
		private System.Windows.Forms.Timer connectionTimer1 = new System.Windows.Forms.Timer();

		// Token: 0x0400001E RID: 30
		private ContextMenuStrip menu = new ContextMenuStrip();

		// Token: 0x0400001F RID: 31
		private IContainer components;

		// Token: 0x02000004 RID: 4
		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
		internal struct DEV_BROADCAST_DEVICEINTERFACE
		{
			// Token: 0x04000020 RID: 32
			public int dbcc_size;

			// Token: 0x04000021 RID: 33
			public int dbcc_devicetype;

			// Token: 0x04000022 RID: 34
			public int dbcc_reserved;

			// Token: 0x04000023 RID: 35
			public Guid dbcc_classguid;

			// Token: 0x04000024 RID: 36
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 255)]
			public string dbcc_name;
		}
	}
}
