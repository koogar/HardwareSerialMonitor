<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NvAPIWrapper</name>
    </assembly>
    <members>
        <member name="T:NvAPIWrapper.Display.ColorData">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.Display.IColorData" />
        </member>
        <member name="M:NvAPIWrapper.Display.ColorData.#ctor(NvAPIWrapper.Native.Display.ColorDataFormat,NvAPIWrapper.Native.Display.ColorDataColorimetry,System.Nullable{NvAPIWrapper.Native.Display.ColorDataDynamicRange},System.Nullable{NvAPIWrapper.Native.Display.ColorDataDepth},System.Nullable{NvAPIWrapper.Native.Display.ColorDataSelectionPolicy},System.Nullable{NvAPIWrapper.Native.Display.ColorDataDesktopDepth})">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Display.ColorData" /> to modify the color data
            </summary>
            <param name="colorFormat">The color data color format.</param>
            <param name="colorimetry">The color data color space.</param>
            <param name="dynamicRange">The color data dynamic range.</param>
            <param name="colorDepth">The color data color depth.</param>
            <param name="colorSelectionPolicy">The color data selection policy.</param>
            <param name="desktopColorDepth">The color data desktop color depth.</param>
        </member>
        <member name="P:NvAPIWrapper.Display.ColorData.ColorDepth">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Display.ColorData.ColorFormat">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Display.ColorData.Colorimetry">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Display.ColorData.DesktopColorDepth">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Display.ColorData.DynamicRange">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Display.ColorData.SelectionPolicy">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.ColorData.Equals(NvAPIWrapper.Display.ColorData)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.ColorData.op_Equality(NvAPIWrapper.Display.ColorData,NvAPIWrapper.Display.ColorData)">
            <summary>
                Compares two instances of <see cref="T:NvAPIWrapper.Display.ColorData" /> for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>true if two instances are equal; otherwise false.</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.ColorData.op_Inequality(NvAPIWrapper.Display.ColorData,NvAPIWrapper.Display.ColorData)">
            <summary>
                Compares two instances of <see cref="T:NvAPIWrapper.Display.ColorData" /> for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>true if two instances are not equal; otherwise false.</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.ColorData.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.ColorData.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Display.CustomResolution">
            <summary>
                Hold information about a custom display resolution
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.CustomResolution.#ctor(System.UInt32,System.UInt32,NvAPIWrapper.Native.Display.ColorFormat,NvAPIWrapper.Native.Display.Structures.Timing,System.Single,System.Single)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Display.CustomResolution" />.
            </summary>
            <param name="width">The screen width.</param>
            <param name="height">The screen height.</param>
            <param name="colorFormat">The color format.</param>
            <param name="timing">The resolution timing.</param>
            <param name="xRatio">The horizontal scaling ratio.</param>
            <param name="yRatio">The vertical scaling ratio.</param>
        </member>
        <member name="M:NvAPIWrapper.Display.CustomResolution.#ctor(System.UInt32,System.UInt32,System.UInt32,NvAPIWrapper.Native.Display.Structures.Timing,System.Single,System.Single)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Display.CustomResolution" />.
            </summary>
            <param name="width">The screen width.</param>
            <param name="height">The screen height.</param>
            <param name="colorDepth">The color depth.</param>
            <param name="timing">The resolution timing.</param>
            <param name="xRatio">The horizontal scaling ratio.</param>
            <param name="yRatio">The vertical scaling ratio.</param>
        </member>
        <member name="P:NvAPIWrapper.Display.CustomResolution.ColorDepth">
            <summary>
                Gets the source surface color depth. "0" means all 8/16/32bpp.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.CustomResolution.ColorFormat">
            <summary>
                Gets the color format (optional)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.CustomResolution.Height">
            <summary>
                Gets the source surface (source mode) height.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.CustomResolution.Timing">
            <summary>
                Gets the timing used to program TMDS/DAC/LVDS/HDMI/TVEncoder, etc.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.CustomResolution.Width">
            <summary>
                Gets the source surface (source mode) width.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.CustomResolution.XRatio">
            <summary>
                Gets the horizontal scaling ratio.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.CustomResolution.YRatio">
            <summary>
                Gets the vertical scaling ratio.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.CustomResolution.Equals(NvAPIWrapper.Display.CustomResolution)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.CustomResolution.op_Equality(NvAPIWrapper.Display.CustomResolution,NvAPIWrapper.Display.CustomResolution)">
            <summary>
                Compares two instance of <see cref="T:NvAPIWrapper.Display.CustomResolution" /> for equality.
            </summary>
            <param name="left">An first instance of <see cref="T:NvAPIWrapper.Display.CustomResolution" /> to compare.</param>
            <param name="right">An Second instance of <see cref="T:NvAPIWrapper.Display.CustomResolution" /> to compare.</param>
            <returns>True if both instances are equal, otherwise false.</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.CustomResolution.op_Inequality(NvAPIWrapper.Display.CustomResolution,NvAPIWrapper.Display.CustomResolution)">
            <summary>
                Compares two instance of <see cref="T:NvAPIWrapper.Display.CustomResolution" /> for inequality.
            </summary>
            <param name="left">An first instance of <see cref="T:NvAPIWrapper.Display.CustomResolution" /> to compare.</param>
            <param name="right">An Second instance of <see cref="T:NvAPIWrapper.Display.CustomResolution" /> to compare.</param>
            <returns>True if both instances are not equal, otherwise false.</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.CustomResolution.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.CustomResolution.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Display.Display">
            <summary>
                Represents an attached display
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.Display.#ctor(NvAPIWrapper.Native.Display.Structures.DisplayHandle)">
            <summary>
                Creates a new Display
            </summary>
            <param name="handle">Handle of the display device</param>
        </member>
        <member name="M:NvAPIWrapper.Display.Display.#ctor(System.String)">
            <summary>
                Creates a new Display
            </summary>
            <param name="displayName">Name of the display device</param>
        </member>
        <member name="P:NvAPIWrapper.Display.Display.DigitalVibranceControl">
            <summary>
                Gets the corresponding Digital Vibrance Control information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.Display.DisplayDevice">
            <summary>
                Gets corresponding DisplayDevice based on display name
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.Display.DriverBuildTitle">
            <summary>
                Gets display driver build title
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.Display.Handle">
            <summary>
                Gets display handle
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.Display.HDMISupportInfo">
            <summary>
                Gets the display HDMI support information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.Display.HUEControl">
            <summary>
                Gets the corresponding HUE information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.Display.LogicalGPU">
            <summary>
                Gets the driving logical GPU
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.Display.Name">
            <summary>
                Gets display name
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.Display.Output">
            <summary>
                Gets the connected GPU output
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.Display.PhysicalGPUs">
            <summary>
                Gets the list of all physical GPUs responsible for this display, with the first GPU returned as the one with the
                attached active output.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.Display.Equals(NvAPIWrapper.Display.Display)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.Display.GetDisplays">
            <summary>
                This function returns all NVIDIA displays
                Note: Display handles can get invalidated on a modeset.
            </summary>
            <returns>An array of Display objects</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.Display.op_Equality(NvAPIWrapper.Display.Display,NvAPIWrapper.Display.Display)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.Display.op_Inequality(NvAPIWrapper.Display.Display,NvAPIWrapper.Display.Display)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.Display.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.Display.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.Display.ToString">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.Display.GetSupportedViews">
            <summary>
                Gets all the supported NVIDIA display views (nView and Dualview modes) for this display.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NvAPIWrapper.Display.Display.OverrideRefreshRate(System.Single,System.Boolean)">
            <summary>
                Overrides the refresh rate on this display.
                The new refresh rate can be applied right away or deferred to be applied with the next OS
                mode-set.
                The override is good for only one mode-set (regardless whether it's deferred or immediate).
            </summary>
            <param name="refreshRate">The refresh rate to be applied.</param>
            <param name="isDeferred">
                A boolean value indicating if the refresh rate override should be deferred to the next OS
                mode-set.
            </param>
        </member>
        <member name="T:NvAPIWrapper.Display.DisplayDevice">
            <summary>
                Represents an NVIDIA display device
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.#ctor(System.UInt32)">
            <summary>
                Creates a new DisplayDevice
            </summary>
            <param name="displayId">Display identification of the device</param>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.#ctor(NvAPIWrapper.Native.Interfaces.GPU.IDisplayIds)">
            <summary>
                Creates a new DisplayDevice
            </summary>
            <param name="displayIds">Display identification and attributes of the display device</param>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.#ctor(System.String)">
            <summary>
                Creates a new DisplayDevice
            </summary>
            <param name="displayName">Display name of the display device</param>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.ConnectionType">
            <summary>
                Gets the display device connection type
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.CurrentColorData">
            <summary>
                Gets the current display color data
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.CurrentTiming">
            <summary>
                Gets the current display device timing
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.DefaultColorData">
            <summary>
                Gets the default display color data
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.DisplayId">
            <summary>
                Gets the NVIDIA display identification
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.DisplayPortColorCapabilities">
            <summary>
                Gets the monitor Display port capabilities
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.DriverHDRCapabilities">
            <summary>
                Gets the display driver EDID specified HDR capabilities
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.EffectiveHDRCapabilities">
            <summary>
                Gets the display currently effective HDR capabilities
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.HDMIAudioFrameCurrentInformation">
            <summary>
                Gets the HDMI audio info-frame current information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.HDMIAudioFrameDefaultInformation">
            <summary>
                Gets the HDMI audio info-frame default information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.HDMIAudioFrameOverrideInformation">
            <summary>
                Gets the HDMI audio info-frame override information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.HDMIAudioFramePropertyInformation">
            <summary>
                Gets the HDMI audio info-frame property information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.HDMISupportInfo">
            <summary>
                Gets the device HDMI support information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.HDMIVideoFrameCurrentInformation">
            <summary>
                Gets the HDMI auxiliary video info-frame current information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.HDMIVideoFrameDefaultInformation">
            <summary>
                Gets the HDMI auxiliary video info-frame default information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.HDMIVideoFrameOverrideInformation">
            <summary>
                Gets the HDMI auxiliary video info-frame override information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.HDMIVideoFramePropertyInformation">
            <summary>
                Gets the HDMI auxiliary video info-frame property information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.HDRColorData">
            <summary>
                Gets the HDR color data, or null if the HDR is disabled or unavailable
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.IsActive">
            <summary>
                Indicates if the display is being actively driven
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.IsAvailable">
            <summary>
                Indicates if the display device is currently available
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.IsCluster">
            <summary>
                Indicates if the display is the representative display
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.IsConnected">
            <summary>
                Indicates if the display is connected
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.IsDynamic">
            <summary>
                Indicates if the display is part of MST topology and it's a dynamic
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.IsMultiStreamRootNode">
            <summary>
                Indicates if the display identification belongs to a multi stream enabled connector (root node). Note that when
                multi stream is enabled and a single multi stream capable monitor is connected to it, the monitor will share the
                display id with the RootNode.
                When there is more than one monitor connected in a multi stream topology, then the root node will have a separate
                displayId.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.IsOSVisible">
            <summary>
                Indicates if the display is reported to the OS
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.IsPhysicallyConnected">
            <summary>
                Indicates if the display is a physically connected display; Valid only when IsConnected is true
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.IsWFD">
            <summary>
                Indicates if the display is wireless
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.Output">
            <summary>
                Gets the connected GPU output
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.PhysicalGPU">
            <summary>
                Gets the connected physical GPU
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.ScanOutInformation">
            <summary>
                Gets information regarding the scan-out settings of this display device
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.VCDBMonitorCapabilities">
            <summary>
                Gets monitor capabilities from the Video Capability Data Block if available, otherwise null
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DisplayDevice.VSDBMonitorCapabilities">
            <summary>
                Gets monitor capabilities from the Vendor Specific Data Block if available, otherwise null
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.Equals(NvAPIWrapper.Display.DisplayDevice)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.DeleteCustomResolution(NvAPIWrapper.Display.CustomResolution,System.UInt32[])">
            <summary>
                Deletes a custom resolution.
            </summary>
            <param name="customResolution">The custom resolution to delete.</param>
            <param name="displayIds">A list of display ids to remove the custom resolution from.</param>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.GetGDIPrimaryDisplayDevice">
            <summary>
                Returns an instance of <see cref="T:NvAPIWrapper.Display.DisplayDevice" /> representing the primary GDI display device.
            </summary>
            <returns>An instance of <see cref="T:NvAPIWrapper.Display.DisplayDevice" />.</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.op_Equality(NvAPIWrapper.Display.DisplayDevice,NvAPIWrapper.Display.DisplayDevice)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.op_Inequality(NvAPIWrapper.Display.DisplayDevice,NvAPIWrapper.Display.DisplayDevice)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.RevertCustomResolution(System.UInt32[])">
            <summary>
                Reverts the custom resolution currently on trial.
            </summary>
            <param name="displayIds">A list of display ids to revert the custom resolution from.</param>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.SaveCustomResolution(System.UInt32[],System.Boolean,System.Boolean)">
            <summary>
                Saves the custom resolution currently on trial.
            </summary>
            <param name="displayIds">A list of display ids to save the custom resolution for.</param>
            <param name="isThisOutputIdOnly">
                If set, the saved custom display will only be applied on the monitor with the same
                outputId.
            </param>
            <param name="isThisMonitorOnly">
                If set, the saved custom display will only be applied on the monitor with the same EDID
                ID or the same TV connector in case of analog TV.
            </param>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.TrialCustomResolution(NvAPIWrapper.Display.CustomResolution,System.UInt32[],System.Boolean)">
            <summary>
                Applies a custom resolution into trial
            </summary>
            <param name="customResolution">The custom resolution to apply.</param>
            <param name="displayIds">A list of display ids to apply the custom resolution on.</param>
            <param name="hardwareModeSetOnly">
                A boolean value indicating that a hardware mode-set without OS update should be
                performed.
            </param>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.ToString">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.CalculateTiming(System.UInt32,System.UInt32,System.Single,System.Boolean)">
            <summary>
                Calculates a valid timing based on the argument passed
            </summary>
            <param name="width">The preferred width.</param>
            <param name="height">The preferred height.</param>
            <param name="refreshRate">The preferred refresh rate.</param>
            <param name="isInterlaced">The boolean value indicating if the preferred resolution is an interlaced resolution.</param>
            <returns>Returns a valid instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.Timing" />.</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.DeleteCustomResolution(NvAPIWrapper.Display.CustomResolution)">
            <summary>
                Deletes a custom resolution.
            </summary>
            <param name="customResolution">The custom resolution to delete.</param>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.GetCustomResolutions">
            <summary>
                Retrieves the list of custom resolutions saved for this display device
            </summary>
            <returns>A list of <see cref="T:NvAPIWrapper.Display.CustomResolution" /> instances.</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.IsColorDataSupported(NvAPIWrapper.Display.ColorData)">
            <summary>
                Checks if a color data is supported on this display
            </summary>
            <param name="colorData">The color data to be checked.</param>
            <returns>true if the color data passed is supported; otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.ResetHDMIAudioFrameInformation">
            <summary>
                Resets the HDMI audio info-frame information to default
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.ResetHDMIVideoFrameInformation">
            <summary>
                Resets the HDMI auxiliary video info-frame information to default
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.RevertCustomResolution">
            <summary>
                Reverts the custom resolution currently on trial.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.SaveCustomResolution(System.Boolean,System.Boolean)">
            <summary>
                Saves the custom resolution currently on trial.
            </summary>
            <param name="isThisOutputIdOnly">
                If set, the saved custom display will only be applied on the monitor with the same
                outputId.
            </param>
            <param name="isThisMonitorOnly">
                If set, the saved custom display will only be applied on the monitor with the same EDID
                ID or the same TV connector in case of analog TV.
            </param>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.SetColorData(NvAPIWrapper.Display.ColorData)">
            <summary>
                Changes the display current color data configuration
            </summary>
            <param name="colorData">The color data to be set.</param>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.SetHDMIAudioFrameInformation(NvAPIWrapper.Native.Display.Structures.InfoFrameAudio,System.Boolean)">
            <summary>
                Sets the HDMI video info-frame current or override information
            </summary>
            <param name="audio">The new information.</param>
            <param name="isOverride">A boolean value indicating if the changes should persist mode-set and OS restart.</param>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.SetHDMIAudioFramePropertyInformation(NvAPIWrapper.Native.Display.Structures.InfoFrameProperty)">
            <summary>
                Sets the HDMI audio info-frame property information
            </summary>
            <param name="property">The new property information.</param>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.SetHDMIVideoFrameInformation(NvAPIWrapper.Native.Display.Structures.InfoFrameVideo,System.Boolean)">
            <summary>
                Sets the HDMI auxiliary video info-frame current or override information
            </summary>
            <param name="video">The new information.</param>
            <param name="isOverride">A boolean value indicating if the changes should persist mode-set and OS restart.</param>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.SetHDMIVideoFramePropertyInformation(NvAPIWrapper.Native.Display.Structures.InfoFrameProperty)">
            <summary>
                Sets the HDMI auxiliary video info-frame property information
            </summary>
            <param name="property">The new property information.</param>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.SetHDRColorData(NvAPIWrapper.Display.HDRColorData)">
            <summary>
                Changes the display HDR color data configuration
            </summary>
            <param name="colorData">The color data to be set.</param>
        </member>
        <member name="M:NvAPIWrapper.Display.DisplayDevice.TrialCustomResolution(NvAPIWrapper.Display.CustomResolution,System.Boolean)">
            <summary>
                Applies a custom resolution into trial.
            </summary>
            <param name="customResolution">The custom resolution to apply.</param>
            <param name="hardwareModeSetOnly">
                A boolean value indicating that a hardware mode-set without OS update should be
                performed.
            </param>
        </member>
        <member name="T:NvAPIWrapper.Display.DVCInformation">
            <summary>
                This class contains and provides a way to modify the Digital Vibrance Control information regarding the
                saturation level of the display or the output
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.DVCInformation.#ctor(NvAPIWrapper.Native.Display.Structures.DisplayHandle)">
            <summary>
                Creates a new instance of the class using a DisplayHandle
            </summary>
            <param name="displayHandle">The handle of the display.</param>
        </member>
        <member name="M:NvAPIWrapper.Display.DVCInformation.#ctor(NvAPIWrapper.Native.GPU.OutputId)">
            <summary>
                Creates a new instance of this class using a OutputId
            </summary>
            <param name="outputId">The output identification of a display or an output</param>
        </member>
        <member name="P:NvAPIWrapper.Display.DVCInformation.NormalizedLevel">
            <summary>
                Gets and sets the normalized saturation level in the [-1,1] inclusive range.
                a -1 value corresponds to the minimum saturation level and maximum under-saturation and the
                a 1 value corresponds to the maximum saturation level and maximum over-saturation.
                The value of 0 indicates the default saturation level.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DVCInformation.CurrentLevel">
            <summary>
                Gets and sets the current saturation level
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.DVCInformation.DefaultLevel">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Display.DVCInformation.MaximumLevel">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Display.DVCInformation.MinimumLevel">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.DVCInformation.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Display.FloatTexture">
            <summary>
                Represents a texture of float values
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Display.FloatTexture.UnderlyingArray">
            <summary>
                Underlying float array containing the values of all channels in all pixels
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.FloatTexture.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Display.FloatTexture" />.
            </summary>
            <param name="width">The texture width.</param>
            <param name="height">The texture height.</param>
            <param name="channels">The number of texture channels.</param>
        </member>
        <member name="M:NvAPIWrapper.Display.FloatTexture.#ctor(System.Int32,System.Int32,System.Int32,System.Single[])">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Display.FloatTexture" />.
            </summary>
            <param name="width">The texture width.</param>
            <param name="height">The texture height.</param>
            <param name="channels">The number of texture channels.</param>
            <param name="array">The underlying array containing all float values.</param>
        </member>
        <member name="P:NvAPIWrapper.Display.FloatTexture.Channels">
            <summary>
                Gets the number of texture channels
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.FloatTexture.Height">
            <summary>
                Gets the texture height in pixel
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.FloatTexture.Width">
            <summary>
                Gets the texture width in pixels
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.FloatTexture.Equals(NvAPIWrapper.Display.FloatTexture)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.FloatTexture.FromFloatArray(System.Int32,System.Int32,System.Int32,System.Single[])">
            <summary>
                Returns a new instance of FloatTexture from the passed array of float values.
            </summary>
            <param name="width">The texture width.</param>
            <param name="height">The texture height.</param>
            <param name="channels">The texture channels.</param>
            <param name="floats">The array of float values.</param>
            <returns>A new instance of <see cref="T:NvAPIWrapper.Display.FloatTexture" />.</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.FloatTexture.op_Equality(NvAPIWrapper.Display.FloatTexture,NvAPIWrapper.Display.FloatTexture)">
            <summary>
                Compares two instance of <see cref="T:NvAPIWrapper.Display.FloatTexture" /> for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns><see langword="true" /> if both instances are equal, otherwise <see langword="false" /></returns>
        </member>
        <member name="M:NvAPIWrapper.Display.FloatTexture.op_Inequality(NvAPIWrapper.Display.FloatTexture,NvAPIWrapper.Display.FloatTexture)">
            <summary>
                Compares two instance of <see cref="T:NvAPIWrapper.Display.FloatTexture" /> for in-equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns><see langword="true" /> if both instances are not equal, otherwise <see langword="false" /></returns>
        </member>
        <member name="M:NvAPIWrapper.Display.FloatTexture.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.FloatTexture.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.FloatTexture.GetValues(System.Int32,System.Int32)">
            <summary>
                Gets the values of each channel at a specific location
            </summary>
            <param name="x">The horizontal location.</param>
            <param name="y">The vertical location.</param>
            <returns>An array of float values each representing a channel value.</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.FloatTexture.SetValues(System.Int32,System.Int32,System.Single[])">
            <summary>
                Sets the value of each channel at a specific location
            </summary>
            <param name="x">The horizontal location.</param>
            <param name="y">The vertical location.</param>
            <param name="floats">An array of float values each representing a channel value.</param>
        </member>
        <member name="M:NvAPIWrapper.Display.FloatTexture.ToFloatArray">
            <summary>
                Returns this instance of <see cref="T:NvAPIWrapper.Display.FloatTexture" /> as an array of float values.
            </summary>
            <returns>An array of float values representing this instance of <see cref="T:NvAPIWrapper.Display.FloatTexture" />.</returns>
        </member>
        <member name="T:NvAPIWrapper.Display.HDRColorData">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.Display.IHDRColorData" />
        </member>
        <member name="M:NvAPIWrapper.Display.HDRColorData.#ctor(NvAPIWrapper.Native.Display.ColorDataHDRMode,NvAPIWrapper.Native.Display.Structures.MasteringDisplayColorData,System.Nullable{NvAPIWrapper.Native.Display.ColorDataFormat},System.Nullable{NvAPIWrapper.Native.Display.ColorDataDynamicRange},System.Nullable{NvAPIWrapper.Native.Display.ColorDataDepth})">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Display.HDRColorData" />.
            </summary>
            <param name="hdrMode">The hdr mode.</param>
            <param name="masteringDisplayData">The display color space configurations.</param>
            <param name="colorFormat">The color data color format.</param>
            <param name="dynamicRange">The color data dynamic range.</param>
            <param name="colorDepth">The color data color depth.</param>
        </member>
        <member name="M:NvAPIWrapper.Display.HDRColorData.Equals(NvAPIWrapper.Display.HDRColorData)">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Display.HDRColorData.ColorDepth">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Display.HDRColorData.ColorFormat">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Display.HDRColorData.DynamicRange">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Display.HDRColorData.HDRMode">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Display.HDRColorData.MasteringDisplayData">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.HDRColorData.op_Equality(NvAPIWrapper.Display.HDRColorData,NvAPIWrapper.Display.HDRColorData)">
            <summary>
                Compares two instances of <see cref="T:NvAPIWrapper.Display.HDRColorData" /> for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>true if two instances are equal; otherwise false.</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.HDRColorData.op_Inequality(NvAPIWrapper.Display.HDRColorData,NvAPIWrapper.Display.HDRColorData)">
            <summary>
                Compares two instances of <see cref="T:NvAPIWrapper.Display.HDRColorData" /> for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>true if two instances are not equal; otherwise false.</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.HDRColorData.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.HDRColorData.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Display.HUEInformation">
            <summary>
                This class contains and provides a way to modify the HUE angle
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.HUEInformation.#ctor(NvAPIWrapper.Native.Display.Structures.DisplayHandle)">
            <summary>
                Creates a new instance of the class using a DisplayHandle
            </summary>
            <param name="displayHandle">The handle of the display.</param>
        </member>
        <member name="M:NvAPIWrapper.Display.HUEInformation.#ctor(NvAPIWrapper.Native.GPU.OutputId)">
            <summary>
                Creates a new instance of this class using a OutputId
            </summary>
            <param name="outputId">The output identification of a display or an output</param>
        </member>
        <member name="P:NvAPIWrapper.Display.HUEInformation.CurrentAngle">
            <summary>
                Gets or sets the current HUE offset angle [0-359]
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.HUEInformation.DefaultAngle">
            <summary>
                Gets the default HUE offset angle [0-359]
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.HUEInformation.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Display.IntensityTexture">
            <summary>
                Represents a texture of intensity values
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.IntensityTexture.#ctor(System.Int32,System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Display.IntensityTexture" />.
            </summary>
            <param name="width">The texture width.</param>
            <param name="height">The texture height.</param>
        </member>
        <member name="M:NvAPIWrapper.Display.IntensityTexture.FromFloatArray(System.Int32,System.Int32,System.Single[])">
            <summary>
                Returns a new instance of FloatTexture from the passed array of float values.
            </summary>
            <param name="width">The texture width.</param>
            <param name="height">The texture height.</param>
            <param name="floats">The array of float values.</param>
            <returns>A new instance of <see cref="T:NvAPIWrapper.Display.FloatTexture" />.</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.IntensityTexture.GetPixel(System.Int32,System.Int32)">
            <summary>
                Gets the value of intensity pixel at a specific location.
            </summary>
            <param name="x">The horizontal location.</param>
            <param name="y">The vertical location.</param>
            <returns>An instance of <see cref="T:NvAPIWrapper.Display.IntensityTexturePixel" />.</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.IntensityTexture.SetPixel(System.Int32,System.Int32,NvAPIWrapper.Display.IntensityTexturePixel)">
            <summary>
                Sets the value of intensity pixel at a specific location
            </summary>
            <param name="x">The horizontal location.</param>
            <param name="y">The vertical location.</param>
            <param name="pixel">An instance of <see cref="T:NvAPIWrapper.Display.IntensityTexturePixel" />.</param>
        </member>
        <member name="T:NvAPIWrapper.Display.IntensityTexturePixel">
            <summary>
                Represents a RGB intensity texture pixel
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.IntensityTexturePixel.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Display.IntensityTexturePixel" />.
            </summary>
            <param name="redIntensity">The intensity of the red light (0-1)</param>
            <param name="greenIntensity">The intensity of the green light (0-1)</param>
            <param name="blueIntensity">The intensity of the blue light (0-1)</param>
        </member>
        <member name="P:NvAPIWrapper.Display.IntensityTexturePixel.BlueIntensity">
            <summary>
                Gets the intensity of the blue light (0-1)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.IntensityTexturePixel.GreenIntensity">
            <summary>
                Gets the intensity of the green light (0-1)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.IntensityTexturePixel.RedIntensity">
            <summary>
                Gets the intensity of the red light (0-1)
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.IntensityTexturePixel.Equals(NvAPIWrapper.Display.IntensityTexturePixel)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.IntensityTexturePixel.op_Equality(NvAPIWrapper.Display.IntensityTexturePixel,NvAPIWrapper.Display.IntensityTexturePixel)">
            <summary>
                Compares two instance of <see cref="T:NvAPIWrapper.Display.IntensityTexturePixel" /> for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns><see langword="true" /> if both instances are equal, otherwise <see langword="false" /></returns>
        </member>
        <member name="M:NvAPIWrapper.Display.IntensityTexturePixel.op_Inequality(NvAPIWrapper.Display.IntensityTexturePixel,NvAPIWrapper.Display.IntensityTexturePixel)">
            <summary>
                Compares two instance of <see cref="T:NvAPIWrapper.Display.IntensityTexturePixel" /> for in-equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns><see langword="true" /> if both instances are not equal, otherwise <see langword="false" /></returns>
        </member>
        <member name="M:NvAPIWrapper.Display.IntensityTexturePixel.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.IntensityTexturePixel.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Display.PathInfo">
            <summary>
                Represents a configuration path
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.PathInfo.#ctor(NvAPIWrapper.Native.Display.Structures.Resolution,NvAPIWrapper.Native.Display.ColorFormat,NvAPIWrapper.Display.PathTargetInfo[])">
            <summary>
                Creates a new PathInfo
            </summary>
            <param name="resolution">Display resolution</param>
            <param name="colorFormat">Display color format</param>
            <param name="targetInfos">Target configuration informations</param>
        </member>
        <member name="M:NvAPIWrapper.Display.PathInfo.#ctor(NvAPIWrapper.Native.Interfaces.Display.IPathInfo)">
            <summary>
                Creates a new PathInfo
            </summary>
            <param name="info">IPathInfo implamented object</param>
        </member>
        <member name="P:NvAPIWrapper.Display.PathInfo.ColorFormat">
            <summary>
                Gets or sets the display color format
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.PathInfo.IsGDIPrimary">
            <summary>
                Gets or sets a boolean value indicating if the this is the primary GDI display
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.PathInfo.IsSLIFocus">
            <summary>
                Gets or sets a boolean value indicating if the this is the SLI focus display
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.PathInfo.OSAdapterLUID">
            <summary>
                Gets OS Adapter of LUID for Non-NVIDIA adapters
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.PathInfo.Position">
            <summary>
                Gets or sets the display position
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.PathInfo.Resolution">
            <summary>
                Gets or sets the display resolution
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.PathInfo.SourceId">
            <summary>
                Gets or sets the Windows CCD display source identification. This can be optionally set.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.PathInfo.SpanningOrientation">
            <summary>
                Gets or sets the display spanning orientation, valid for XP only
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.PathInfo.TargetsInfo">
            <summary>
                Gets information about path targets
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.PathInfo.Equals(NvAPIWrapper.Display.PathInfo)">
            <summary>
                Checks for equality with a PathInfo instance
            </summary>
            <param name="other">The PathInfo object to check with</param>
            <returns>true if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.PathInfo.GetDisplaysConfig">
            <summary>
                Creates and fills a PathInfo object
            </summary>
            <returns>The newly created PathInfo object</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.PathInfo.op_Equality(NvAPIWrapper.Display.PathInfo,NvAPIWrapper.Display.PathInfo)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.PathInfo.op_Inequality(NvAPIWrapper.Display.PathInfo,NvAPIWrapper.Display.PathInfo)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.PathInfo.SetDisplaysConfig(NvAPIWrapper.Display.PathInfo[],NvAPIWrapper.Native.Display.DisplayConfigFlags)">
            <summary>
                Applies one or more path information configurations
            </summary>
            <param name="pathInfos">An array of path information configuration</param>
            <param name="flags">DisplayConfigFlags flags</param>
        </member>
        <member name="M:NvAPIWrapper.Display.PathInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.PathInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.PathInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.PathInfo.GetPathInfoV1">
            <summary>
                Creates and fills a GetPathInfoV1 object
            </summary>
            <returns>The newly created GetPathInfoV1 object</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.PathInfo.GetPathInfoV2">
            <summary>
                Creates and fills a GetPathInfoV2 object
            </summary>
            <returns>The newly created GetPathInfoV2 object</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.PathInfo.GetPathTargetInfoV1Array">
            <summary>
                Creates and fills an array of GetPathTargetInfoV1 object
            </summary>
            <returns>The newly created array of GetPathTargetInfoV1 objects</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.PathInfo.GetPathTargetInfoV2Array">
            <summary>
                Creates and fills an array of GetPathTargetInfoV2 object
            </summary>
            <returns>The newly created array of GetPathTargetInfoV2 objects</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.PathInfo.GetSourceModeInfo">
            <summary>
                Creates and fills a SourceModeInfo object
            </summary>
            <returns>The newly created SourceModeInfo object</returns>
        </member>
        <member name="T:NvAPIWrapper.Display.PathTargetInfo">
            <summary>
                Represents a display configuration on a path
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.PathTargetInfo.#ctor(NvAPIWrapper.Native.Interfaces.Display.IPathTargetInfo)">
            <summary>
                Creates a new PathTargetInfo
            </summary>
            <param name="info">IPathTargetInfo implamented object</param>
        </member>
        <member name="M:NvAPIWrapper.Display.PathTargetInfo.#ctor(NvAPIWrapper.Display.DisplayDevice)">
            <summary>
                Creates a new PathTargetInfo
            </summary>
            <param name="device">DisplayDevice object</param>
        </member>
        <member name="P:NvAPIWrapper.Display.PathTargetInfo.DisableVirtualModeSupport">
            <summary>
                Gets or sets the virtual mode support
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.PathTargetInfo.DisplayDevice">
            <summary>
                Gets corresponding DisplayDevice
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.PathTargetInfo.IsClonePanAndScanTarget">
            <summary>
                Gets or sets the pan and scan is availability. Valid only when the target is part of clone
                topology.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.PathTargetInfo.IsClonePrimary">
            <summary>
                Gets or sets the primary display in clone configuration. This is *NOT* GDI Primary.
                Only one target can be primary per source. If no primary is specified, the first target will automatically be
                primary.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.PathTargetInfo.IsInterlaced">
            <summary>
                Gets or sets the interlaced mode flag, ignored if refreshRate == 0
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.PathTargetInfo.IsPreferredUnscaledTarget">
            <summary>
                Gets or sets the preferred unscaled mode of target
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.PathTargetInfo.RefreshRateInMillihertz">
            <summary>
                Gets and sets the non-interlaced Refresh Rate of the mode, multiplied by 1000, 0 = ignored
                This is the value which driver reports to the OS.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.PathTargetInfo.Rotation">
            <summary>
                Gets and sets the rotation setting
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.PathTargetInfo.Scaling">
            <summary>
                Gets and sets the scaling setting
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.PathTargetInfo.TimingOverride">
            <summary>
                Gets and sets the custom timing of display
                Ignored if TimingOverride == TimingOverride.Current
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.PathTargetInfo.TVConnectorType">
            <summary>
                Gets and sets the connector type. For TV only, ignored if TVFormat == TVFormat.None.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.PathTargetInfo.TVFormat">
            <summary>
                Gets and sets the TV format. For TV only, otherwise set to TVFormat.None
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.PathTargetInfo.WindowsCCDTargetId">
            <summary>
                Gets the Windows CCD target ID. Must be present only for non-NVIDIA adapter, for NVIDIA adapter this parameter is
                ignored.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.PathTargetInfo.Equals(NvAPIWrapper.Display.PathTargetInfo)">
            <summary>
                Checks for equality with a PathTargetInfo instance
            </summary>
            <param name="other">The PathTargetInfo object to check with</param>
            <returns>true if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.PathTargetInfo.op_Equality(NvAPIWrapper.Display.PathTargetInfo,NvAPIWrapper.Display.PathTargetInfo)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.PathTargetInfo.op_Inequality(NvAPIWrapper.Display.PathTargetInfo,NvAPIWrapper.Display.PathTargetInfo)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.PathTargetInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.PathTargetInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.PathTargetInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.PathTargetInfo.GetPathAdvancedTargetInfo">
            <summary>
                Creates and fills a PathAdvancedTargetInfo object
            </summary>
            <returns>The newly created PathAdvancedTargetInfo object</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.PathTargetInfo.GetPathTargetInfoV1">
            <summary>
                Creates and fills a PathTargetInfoV1 object
            </summary>
            <returns>The newly created PathTargetInfoV1 object</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.PathTargetInfo.GetPathTargetInfoV2">
            <summary>
                Creates and fills a PathTargetInfoV2 object
            </summary>
            <returns>The newly created PathTargetInfoV2 object</returns>
        </member>
        <member name="T:NvAPIWrapper.Display.ScanOutInformation">
            <summary>
                Contains information regarding the scan-out buffer settings of a display device
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.ScanOutInformation.CloneImportance">
            <summary>
                Gets the clone importance assigned to the target if the target is a cloned view of the SourceDesktopRectangle
                (0:primary,1 secondary,...).
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.ScanOutInformation.DisplayDevice">
            <summary>
                Gets the display device that this instance describes
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.ScanOutInformation.IsDisplayWarped">
            <summary>
                Gets a boolean value indicating if the display device scan out output is warped
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.ScanOutInformation.IsIntensityModified">
            <summary>
                Gets a boolean value indicating if the display device intensity is modified
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.ScanOutInformation.SourceDesktopRectangle">
            <summary>
                Gets the operating system display device rectangle in desktop coordinates displayId is scanning out from.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.ScanOutInformation.SourceToTargetRotation">
            <summary>
                Gets the rotation performed between the SourceViewPortRectangle and the TargetViewPortRectangle.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.ScanOutInformation.SourceViewPortRectangle">
            <summary>
                Gets the area inside the SourceDesktopRectangle which is scanned out to the display.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.ScanOutInformation.TargetDisplayHeight">
            <summary>
                Gets the vertical size of the active resolution scanned out to the display.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.ScanOutInformation.TargetDisplayWidth">
            <summary>
                Gets the horizontal size of the active resolution scanned out to the display.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.ScanOutInformation.TargetViewPortRectangle">
            <summary>
                Gets the area inside the rectangle described by targetDisplayWidth/Height SourceViewPortRectangle is scanned out
                to.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.ScanOutInformation.DisableIntensityModifications(System.Boolean@)">
            <summary>
                Disables the intensity modification on the display device scan-out buffer.
            </summary>
            <param name="isSticky">A boolean value that indicates whether the settings will be kept over a reboot.</param>
        </member>
        <member name="M:NvAPIWrapper.Display.ScanOutInformation.DisableWarping(System.Boolean@)">
            <summary>
                Disables the warping of display device scan-out buffer.
            </summary>
            <param name="isSticky">A boolean value that indicates whether the settings will be kept over a reboot.</param>
        </member>
        <member name="M:NvAPIWrapper.Display.ScanOutInformation.EnableIntensityModifications(NvAPIWrapper.Display.IntensityTexture,System.Boolean@)">
            <summary>
                Enables the intensity modification on the display device scan-out buffer.
            </summary>
            <param name="intensityTexture">The intensity texture to apply to the scan-out buffer.</param>
            <param name="isSticky">A boolean value that indicates whether the settings will be kept over a reboot.</param>
        </member>
        <member name="M:NvAPIWrapper.Display.ScanOutInformation.EnableIntensityModifications(NvAPIWrapper.Display.IntensityTexture,NvAPIWrapper.Display.FloatTexture,System.Boolean@)">
            <summary>
                Enables the intensity modification on the display device scan-out buffer.
            </summary>
            <param name="intensityTexture">The intensity texture to apply to the scan-out buffer.</param>
            <param name="offsetTexture">The offset texture to apply to the scan-out buffer.</param>
            <param name="isSticky">A boolean value that indicates whether the settings will be kept over a reboot.</param>
        </member>
        <member name="M:NvAPIWrapper.Display.ScanOutInformation.EnableWarping(NvAPIWrapper.Native.Display.WarpingVerticeFormat,NvAPIWrapper.Display.XYUVRQVortex[],NvAPIWrapper.Native.General.Structures.Rectangle,System.Boolean@)">
            <summary>
                Enables the warping of display device scan-out buffer
            </summary>
            <param name="warpingVerticeFormat">The type of warping vortexes.</param>
            <param name="vortices">An array of warping vortexes.</param>
            <param name="textureRectangle">The rectangle in desktop coordinates describing the source area for the warping.</param>
            <param name="isSticky">A boolean value that indicates whether the settings will be kept over a reboot.</param>
        </member>
        <member name="M:NvAPIWrapper.Display.ScanOutInformation.GetCompositionParameterValue(NvAPIWrapper.Native.Display.ScanOutCompositionParameter,System.Single@)">
            <summary>
                Queries the current state of one of the various scan-out composition parameters.
            </summary>
            <param name="parameter">The scan-out composition parameter.</param>
            <param name="additionalValue">The additional value included with the parameter value.</param>
            <returns>The scan-out composition parameter value.</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.ScanOutInformation.SetCompositionParameterValue(NvAPIWrapper.Native.Display.ScanOutCompositionParameter,NvAPIWrapper.Native.Display.ScanOutCompositionParameterValue,System.Single)">
            <summary>
                Sets the current state of one of the various scan-out composition parameters.
            </summary>
            <param name="parameter">The scan-out composition parameter.</param>
            <param name="parameterValue">The scan-out composition parameter value.</param>
            <param name="additionalValue">The additional value included with the parameter value.</param>
        </member>
        <member name="T:NvAPIWrapper.Display.UnAttachedDisplay">
            <summary>
                Represents an unattached display
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.UnAttachedDisplay.#ctor(NvAPIWrapper.Native.Display.Structures.UnAttachedDisplayHandle)">
            <summary>
                Creates a new UnAttachedDisplay
            </summary>
            <param name="handle">Handle of the unattached display device</param>
        </member>
        <member name="M:NvAPIWrapper.Display.UnAttachedDisplay.#ctor(System.String)">
            <summary>
                Creates a new UnAttachedDisplay
            </summary>
            <param name="displayName">Name of the unattached display device</param>
        </member>
        <member name="P:NvAPIWrapper.Display.UnAttachedDisplay.Handle">
            <summary>
                Gets display handle
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.UnAttachedDisplay.Name">
            <summary>
                Gets display name
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.UnAttachedDisplay.PhysicalGPU">
            <summary>
                Gets corresponding physical GPU
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.UnAttachedDisplay.Equals(NvAPIWrapper.Display.UnAttachedDisplay)">
            <summary>
                Checks for equality with a UnAttachedDisplay instance
            </summary>
            <param name="other">The Display object to check with</param>
            <returns>true if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.UnAttachedDisplay.GetUnAttachedDisplays">
            <summary>
                This function returns all unattached NVIDIA displays
                Note: Display handles can get invalidated on a modeset.
            </summary>
            <returns>An array of Display objects</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.UnAttachedDisplay.op_Equality(NvAPIWrapper.Display.UnAttachedDisplay,NvAPIWrapper.Display.UnAttachedDisplay)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.UnAttachedDisplay.op_Inequality(NvAPIWrapper.Display.UnAttachedDisplay,NvAPIWrapper.Display.UnAttachedDisplay)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.UnAttachedDisplay.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.UnAttachedDisplay.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.UnAttachedDisplay.ToString">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.UnAttachedDisplay.CreateDisplay">
            <summary>
                Creates a new active attached display from this unattached display
                At least one GPU must be present in the system and running an NVIDIA display driver.
            </summary>
            <returns>An active attached display</returns>
        </member>
        <member name="T:NvAPIWrapper.Display.XYUVRQVortex">
            <summary>
                Represents a XYUVRQ scan-out warping vortex
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.XYUVRQVortex.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Display.XYUVRQVortex" />.
            </summary>
            <param name="x">The target view port mesh horizontal coordinate</param>
            <param name="y">The target view port mesh vertical coordinate</param>
            <param name="u">The desktop view port texture horizontal coordinate</param>
            <param name="v">The desktop view port texture vertical coordinate</param>
            <param name="r">The 3D warp perspective R factor</param>
            <param name="q">The 3D warp perspective Q factor</param>
        </member>
        <member name="P:NvAPIWrapper.Display.XYUVRQVortex.Q">
            <summary>
                3D warp perspective Q factor
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.XYUVRQVortex.R">
            <summary>
                3D warp perspective R factor
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.XYUVRQVortex.U">
            <summary>
                Desktop view port texture horizontal coordinate
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.XYUVRQVortex.V">
            <summary>
                Desktop view port texture vertical coordinate
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.XYUVRQVortex.X">
            <summary>
                Target view port mesh horizontal coordinate
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Display.XYUVRQVortex.Y">
            <summary>
                Target view port mesh vertical coordinate
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Display.XYUVRQVortex.Equals(NvAPIWrapper.Display.XYUVRQVortex)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.XYUVRQVortex.FromFloatArray(System.Single[])">
            <summary>
                Parses an array of floats and returns the corresponding <see cref="T:NvAPIWrapper.Display.XYUVRQVortex" />s.
            </summary>
            <param name="floats">The array of float representing one or more <see cref="T:NvAPIWrapper.Display.XYUVRQVortex" />s.</param>
            <returns>Instances of <see cref="T:NvAPIWrapper.Display.XYUVRQVortex" />.</returns>
        </member>
        <member name="M:NvAPIWrapper.Display.XYUVRQVortex.op_Equality(NvAPIWrapper.Display.XYUVRQVortex,NvAPIWrapper.Display.XYUVRQVortex)">
            <summary>
                Compares two instance of <see cref="T:NvAPIWrapper.Display.XYUVRQVortex" /> for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns><see langword="true" /> if both instances are equal, otherwise <see langword="false" /></returns>
        </member>
        <member name="M:NvAPIWrapper.Display.XYUVRQVortex.op_Inequality(NvAPIWrapper.Display.XYUVRQVortex,NvAPIWrapper.Display.XYUVRQVortex)">
            <summary>
                Compares two instance of <see cref="T:NvAPIWrapper.Display.XYUVRQVortex" /> for in-equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns><see langword="true" /> if both instances are not equal, otherwise <see langword="false" /></returns>
        </member>
        <member name="M:NvAPIWrapper.Display.XYUVRQVortex.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.XYUVRQVortex.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Display.XYUVRQVortex.AsFloatArray">
            <summary>
            Returns this instance of <see cref="T:NvAPIWrapper.Display.XYUVRQVortex"/> as a float array.
            </summary>
            <returns>An array of float values representing this instance of <see cref="T:NvAPIWrapper.Display.XYUVRQVortex"/>.</returns>
        </member>
        <member name="T:NvAPIWrapper.DRS.DriverSettingsProfile">
            <summary>
                Represents a NVIDIA driver settings profile
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.DriverSettingsProfile.Applications">
            <summary>
                Gets a list of applications under this profile
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.DriverSettingsProfile.GPUSupport">
            <summary>
                Gets or sets the profile support value for GPU series
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.DriverSettingsProfile.Handle">
            <summary>
                Gets the profile handle
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.DriverSettingsProfile.IsPredefined">
            <summary>
                Gets a boolean value indicating if this profile is predefined
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.DriverSettingsProfile.IsValid">
            <summary>
                Gets a boolean value indicating if this profile is valid and contains a non-zero handle
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.DriverSettingsProfile.Name">
            <summary>
                Gets the name of the profile
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.DriverSettingsProfile.NumberOfApplications">
            <summary>
                Gets the number of application registered under this profile
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.DriverSettingsProfile.NumberOfSettings">
            <summary>
                Gets the number of settings under this profile
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.DriverSettingsProfile.Session">
            <summary>
                Gets the session that had queried this profile
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.DriverSettingsProfile.Settings">
            <summary>
                Gets a list of settings under this profile
            </summary>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsProfile.CreateProfile(NvAPIWrapper.DRS.DriverSettingsSession,System.String,System.Nullable{NvAPIWrapper.Native.DRS.Structures.DRSGPUSupport})">
            <summary>
                Creates a new profile
            </summary>
            <param name="session">The session to create this profile in.</param>
            <param name="profileName">The name of the profile.</param>
            <param name="gpuSupport">The supported GPU series for this profile.</param>
            <returns>An instance of <see cref="T:NvAPIWrapper.DRS.DriverSettingsProfile" /> representing this newly created profile.</returns>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsProfile.ToString">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsProfile.Delete">
            <summary>
                Deletes this profile and makes this instance invalid.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsProfile.DeleteApplicationByName(System.String)">
            <summary>
                Deletes an application by its name.
            </summary>
            <param name="applicationName">The name of the application to be deleted.</param>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsProfile.DeleteSetting(System.UInt32)">
            <summary>
                Deletes a setting by its identification number
            </summary>
            <param name="settingId">The identification number of the setting to be deleted.</param>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsProfile.DeleteSetting(NvAPIWrapper.DRS.KnownSettingId)">
            <summary>
                Deletes a setting by its known identification number.
            </summary>
            <param name="settingId">The known identification number of the setting to be deleted.</param>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsProfile.GetApplicationByName(System.String)">
            <summary>
                Finds an application by its name.
            </summary>
            <param name="applicationName">The name of the application to search for.</param>
            <returns>
                An instance of <see cref="T:NvAPIWrapper.DRS.ProfileApplication" /> if an application is found; otherwise <see langword="null" />
                .
            </returns>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsProfile.GetSetting(System.UInt32)">
            <summary>
                Searches for a setting using its identification number.
            </summary>
            <param name="settingId">The identification number of the setting to search for.</param>
            <returns>An instance of <see cref="T:NvAPIWrapper.DRS.ProfileSetting" /> if a setting is found; otherwise <see langword="null" />.</returns>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsProfile.GetSetting(NvAPIWrapper.DRS.KnownSettingId)">
            <summary>
                Searches for a setting using its known identification number.
            </summary>
            <param name="settingId">The known identification number of the setting to search for.</param>
            <returns>An instance of <see cref="T:NvAPIWrapper.DRS.ProfileSetting" /> if a setting is found; otherwise <see langword="null" />.</returns>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsProfile.RestoreDefaults">
            <summary>
                Restores applications and settings of this profile to their default. This also deletes custom profiles resulting in
                their handles becoming invalid.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsProfile.RestoreSettingToDefault(System.UInt32)">
            <summary>
                Restores a setting to its default value.
            </summary>
            <param name="settingId">The identification number of the setting.</param>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsProfile.RestoreSettingToDefault(NvAPIWrapper.DRS.KnownSettingId)">
            <summary>
                Restores a setting to its default value.
            </summary>
            <param name="settingId">The known identification number of the setting.</param>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsProfile.SetSetting(NvAPIWrapper.DRS.KnownSettingId,NvAPIWrapper.Native.DRS.DRSSettingType,System.Object)">
            <summary>
                Sets a new value for a setting or creates a new setting and sets its value
            </summary>
            <param name="settingId">The known identification number of the setting to change its value.</param>
            <param name="settingType">The type of the setting value.</param>
            <param name="value">The new value for the setting.</param>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsProfile.SetSetting(NvAPIWrapper.DRS.KnownSettingId,System.String)">
            <summary>
                Sets a new value for a setting or creates a new setting and sets its value
            </summary>
            <param name="settingId">The known identification number of the setting to change its value.</param>
            <param name="value">The new value for the setting.</param>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsProfile.SetSetting(NvAPIWrapper.DRS.KnownSettingId,System.Byte[])">
            <summary>
                Sets a new value for a setting or creates a new setting and sets its value
            </summary>
            <param name="settingId">The known identification number of the setting to change its value.</param>
            <param name="value">The new value for the setting.</param>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsProfile.SetSetting(NvAPIWrapper.DRS.KnownSettingId,System.UInt32)">
            <summary>
                Sets a new value for a setting or creates a new setting and sets its value
            </summary>
            <param name="settingId">The known identification number of the setting to change its value.</param>
            <param name="value">The new value for the setting.</param>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsProfile.SetSetting(System.UInt32,NvAPIWrapper.Native.DRS.DRSSettingType,System.Object)">
            <summary>
                Sets a new value for a setting or creates a new setting and sets its value
            </summary>
            <param name="settingId">The identification number of the setting to change its value.</param>
            <param name="settingType">The type of the setting value.</param>
            <param name="value">The new value for the setting.</param>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsProfile.SetSetting(System.UInt32,System.String)">
            <summary>
                Sets a new value for a setting or creates a new setting and sets its value
            </summary>
            <param name="settingId">The identification number of the setting to change its value.</param>
            <param name="value">The new value for the setting.</param>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsProfile.SetSetting(System.UInt32,System.Byte[])">
            <summary>
                Sets a new value for a setting or creates a new setting and sets its value
            </summary>
            <param name="settingId">The identification number of the setting to change its value.</param>
            <param name="value">The new value for the setting.</param>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsProfile.SetSetting(System.UInt32,System.UInt32)">
            <summary>
                Sets a new value for a setting or creates a new setting and sets its value
            </summary>
            <param name="settingId">The identification number of the setting to change its value.</param>
            <param name="value">The new value for the setting.</param>
        </member>
        <member name="T:NvAPIWrapper.DRS.DriverSettingsSession">
            <summary>
                Represents a driver settings session. This is the starting point for using DRS set of functionalities.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.DriverSettingsSession.BaseProfile">
            <summary>
                Gets the base settings profile
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.DriverSettingsSession.CurrentGlobalProfile">
            <summary>
                Gets the global settings profile
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.DriverSettingsSession.Handle">
            <summary>
                Gets the session handle
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.DriverSettingsSession.NumberOfProfiles">
            <summary>
                Gets the number of registered profiles
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.DriverSettingsSession.Profiles">
            <summary>
                Gets the list of all registered profiles
            </summary>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsSession.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsSession.CreateAndLoad">
            <summary>
                Creates a new session and load the settings
            </summary>
            <returns>A new instance of <see cref="T:NvAPIWrapper.DRS.DriverSettingsSession" /> representing a session.</returns>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsSession.CreateAndLoad(System.String)">
            <summary>
                Creates a new session and load the settings from a file
            </summary>
            <param name="fileName">The full path of file to load settings from.</param>
            <returns>A new instance of <see cref="T:NvAPIWrapper.DRS.DriverSettingsSession" /> representing a session.</returns>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsSession.ToString">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsSession.FindApplication(System.String)">
            <summary>
                Finds an application by name. This method is useful when passed a full path of a file as it does return an
                application almost always describing the NVIDIA driver behavior regarding the passed executable file.
            </summary>
            <param name="applicationName">The name of the application (with extension) or the full path of an executable file.</param>
            <returns>An instance of <see cref="T:NvAPIWrapper.DRS.ProfileApplication" /> class.</returns>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsSession.FindApplicationProfile(System.String)">
            <summary>
                Finds a profile based on the application named passed. This method is useful when passed a full path of a file as
                it does return a profile almost always describing the NVIDIA driver behavior regarding the passed executable file.
            </summary>
            <param name="applicationName">The name of the application (with extension) or the full path of an executable file.</param>
            <returns>
                An instance of <see cref="T:NvAPIWrapper.DRS.DriverSettingsProfile" /> class describing the NVIDIA driver behavior regarding the
                passed executable file.
            </returns>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsSession.FindProfileByName(System.String)">
            <summary>
                Finds a profile based on its name.
            </summary>
            <param name="profileName">The profile name to search for.</param>
            <returns>An instance of <see cref="T:NvAPIWrapper.DRS.DriverSettingsProfile" /> class.</returns>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsSession.RestoreDefaults">
            <summary>
                Resets all settings to default.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsSession.Save">
            <summary>
                Saves the current session settings
            </summary>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsSession.Save(System.String)">
            <summary>
                Saves the current session settings to a file
            </summary>
            <param name="fileName">The full path of file to save settings to.</param>
        </member>
        <member name="M:NvAPIWrapper.DRS.DriverSettingsSession.Finalize">
            <inheritdoc />
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.OpenGLAntiAliasingLineGamma">
            <summary>
                Antialiasing - Line gamma
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.OpenGLDeepColorScanOut">
            <summary>
                Deep color for 3D applications
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.OpenGLDefaultSwapInterval">
            <summary>
                OpenGL default swap interval
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.OpenGLDefaultSwapIntervalFractional">
            <summary>
                OpenGL default swap interval fraction
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.OpenGLDefaultSwapIntervalSign">
            <summary>
                OpenGL default swap interval sign
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.OpenGLEventLogSeverityThreshold">
            <summary>
                Event Log Severity Threshold
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.OpenGLExtensionStringVersion">
            <summary>
                Extension String version
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.OpenGLForceBlit">
            <summary>
                Buffer-flipping mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.OpenGLForceStereo">
            <summary>
                Force Stereo shuttering
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.OpenGLImplicitGPUAffinity">
            <summary>
                Preferred OpenGL GPU
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.OpenGLMaximumFramesAllowed">
            <summary>
                Maximum frames allowed
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.OpenGLOverlayPixelType">
            <summary>
                Exported Overlay pixel types
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.OpenGLOverlaySupport">
            <summary>
                Enable overlay
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.OpenGLQualityEnhancements">
            <summary>
                High level control of the rendering quality on OpenGL
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.OpenGLSingleBackDepthBuffer">
            <summary>
                Unified back/depth buffer
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.OpenGLSLIMulticast">
            <summary>
                Enable NV_gpu_multicast extension
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.OpenGLThreadControl">
            <summary>
                Threaded optimization
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.OpenGLTMONLevel">
            <summary>
                Event Log Tmon Severity Threshold
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.OpenGLTripleBuffer">
            <summary>
                Triple buffering
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.AntiAliasingBehaviorFlags">
            <summary>
                Antialiasing - Behavior Flags
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.AntiAliasingModeAlphaToCoverage">
            <summary>
                Antialiasing - Transparency Multisampling
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.AntiAliasingModeGammaCorrection">
            <summary>
                Antialiasing - Gamma correction
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.AntiAliasingModeMethod">
            <summary>
                Antialiasing - Setting
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.AntiAliasingModeReplay">
            <summary>
                Antialiasing - Transparency Supersampling
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.AntiAliasingModeSelector">
            <summary>
                Antialiasing - Mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.AntiAliasingModeSelectorSLIAntiAliasing">
            <summary>
                Antialiasing - SLI AA
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.AnisotropicModeLevel">
            <summary>
                Anisotropic filtering setting
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.AnisotropicModeSelector">
            <summary>
                Anisotropic filtering mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.AnselAllow">
            <summary>
                NVIDIA Predefined Ansel Usage
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.AnselEnable">
            <summary>
                Enable Ansel
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.AnselWhiteListed">
            <summary>
                Ansel flags for enabled applications
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.ApplicationProfileNotificationTimeOut">
            <summary>
                Application Profile Notification Popup Timeout
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.ApplicationSteamId">
            <summary>
                Steam Application ID
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.BatteryBoost">
            <summary>
                Battery Boost
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.ControlPanelHiddenProfile">
            <summary>
                Do not display this profile in the Control Panel
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.CUDAExcludedGPUs">
            <summary>
                List of Universal GPU ids
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.D3DOpenGLGPUMaximumPower">
            <summary>
                Maximum GPU Power
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.ExportPerformanceCounters">
            <summary>
                Export Performance Counters
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.FXAAAllow">
            <summary>
                NVIDIA Predefined FXAA Usage
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.FXAAEnable">
            <summary>
                Enable FXAA
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.FXAAIndicatorEnable">
            <summary>
                Enable FXAA Indicator
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.MCSFRShowSplit">
            <summary>
                SLI indicator
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.NvidiaQualityUpScaling">
            <summary>
                NVIDIA Quality upscaling
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.OptimusMaximumAntiAliasing">
            <summary>
                Maximum AA samples allowed for a given application
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.PhysxIndicator">
            <summary>
                Display the PhysX indicator
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.PreferredPerformanceState">
            <summary>
                Power management mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.PreventUiAnisotropicOverride">
            <summary>
                No override of Anisotropic filtering
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.PerformanceStateFrameRateLimiter">
            <summary>
                Frame Rate Limiter
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.PerformanceStateFrameRateLimiter2Control">
            <summary>
                Frame Rate Limiter 2 Control
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.PerformanceStateFrameRateLimiterGpsControl">
            <summary>
                Frame Rate Monitor
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.PerformanceStateFrameRateMonitorControl">
            <summary>
                Frame Rate Monitor Control
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.ShimMaxResolution">
            <summary>
                Maximum resolution allowed for a given application
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.ShimMCCOMPAT">
            <summary>
                Optimus flags for enabled applications
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.ShimRenderingMode">
            <summary>
                Enable application for Optimus
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.ShimRenderingOptions">
            <summary>
                Shim Rendering Mode Options per application for Optimus
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.SLIGPUCount">
            <summary>
                Number of GPUs to use on SLI rendering mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.SLIPredefinedGPUCount">
            <summary>
                NVIDIA predefined number of GPUs to use on SLI rendering mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.SLIPredefinedGPUCountDX10">
            <summary>
                NVIDIA predefined number of GPUs to use on SLI rendering mode on DirectX 10
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.SLIPredefinedMode">
            <summary>
                NVIDIA predefined SLI mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.SLIPredefinedModeDX10">
            <summary>
                NVIDIA predefined SLI mode on DirectX 10
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.SLIRenderingMode">
            <summary>
                SLI rendering mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.VRPreRenderLimit">
            <summary>
                Virtual Reality pre-rendered frames
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.VRRFeatureIndicator">
            <summary>
                Toggle the VRR global feature
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.VRROverlayIndicator">
            <summary>
                Display the VRR Overlay Indicator
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.VRRRequestState">
            <summary>
                VRR requested state
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.VRRApplicationOverride">
            <summary>
                G-SYNC
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.VRRApplicationOverrideRequestState">
            <summary>
                G-SYNC
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.VRRMode">
            <summary>
                Enable G-SYNC globally
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.VSyncSmoothAFR">
            <summary>
                Flag to control smooth AFR behavior
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.VSyncVRRControl">
            <summary>
                Variable refresh Rate
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.VSyncBehaviorFlags">
            <summary>
                Vsync - Behavior Flags
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.WKSAPIStereoEyesExchange">
            <summary>
                Stereo - Swap eyes
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.WKSAPIStereoMode">
            <summary>
                Stereo - Display mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.WKSMemoryAllocationPolicy">
            <summary>
                Memory Allocation Policy
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.WKSStereoDongleSupport">
            <summary>
                Stereo - Dongle Support
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.WKSStereoSupport">
            <summary>
                Stereo - Enable
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.WKSStereoSwapMode">
            <summary>
                Stereo � swap mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.AmbientOcclusionMode">
            <summary>
                Ambient Occlusion
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.AmbientOcclusionModeActive">
            <summary>
                NVIDIA Predefined Ambient Occlusion Usage
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.AutoLODBiasAdjust">
            <summary>
                Texture filtering - Driver Controlled LOD Bias
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.ExportPerformanceCountersDX9Only">
            <summary>
                Export Performance Counters for DX9 only
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.ICafeLogoConfig">
            <summary>
                ICafe Settings
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.LODBiasAdjust">
            <summary>
                Texture filtering - LOD Bias
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.MaxwellBSampleInterleave">
            <summary>
                Enable sample interleaving (MFAA)
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.PreRenderLimit">
            <summary>
                Maximum pre-rendered frames
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.PerformanceStateShaderDiskCache">
            <summary>
                Shader Cache
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.PerformanceStateTextureFilteringAnisotropicOptimization">
            <summary>
                Texture filtering - Anisotropic sample optimization
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.PerformanceStateTextureFilteringBiLinearInAnisotropic">
            <summary>
                Texture filtering - Anisotropic filter optimization
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.PerformanceStateTextureFilteringDisableTrilinearSlope">
            <summary>
                Texture filtering - Trilinear optimization
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.PerformanceStateTextureFilteringNoNegativeLODBias">
            <summary>
                Texture filtering - Negative LOD bias
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.QualityEnhancements">
            <summary>
                Texture filtering - Quality
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.RefreshRateOverride">
            <summary>
                Preferred refresh rate
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.SetPowerThrottleForPCIeCompliance">
            <summary>
                PowerThrottle
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.SetVABData">
            <summary>
                VAB Default Data
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.VSyncMode">
            <summary>
                Vertical Sync
            </summary>
        </member>
        <member name="F:NvAPIWrapper.DRS.KnownSettingId.VSyncTearControl">
            <summary>
                Vertical Sync Tear Control
            </summary>
        </member>
        <member name="T:NvAPIWrapper.DRS.ProfileApplication">
            <summary>
                Represents an application rule registered in a profile
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.ProfileApplication.ApplicationName">
            <summary>
                Gets the application name
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.ProfileApplication.CommandLine">
            <summary>
                Gets the application command line
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.ProfileApplication.FilesInFolder">
            <summary>
                Gets a list of files that are necessary to be present inside the application parent directory
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.ProfileApplication.FriendlyName">
            <summary>
                Gets the application friendly name
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.ProfileApplication.HasCommandLine">
            <summary>
                Gets a boolean value indicating if this application rule needs a specific command line; or <see langword="null" />
                if this information is not available.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.ProfileApplication.IsMetroApplication">
            <summary>
                Gets a boolean value indicating if this application is a metro application; or <see langword="null" /> if this
                information is not available.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.ProfileApplication.IsPredefined">
            <summary>
                Gets a boolean value indicating if this application is predefined by the NVIDIA driver
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.ProfileApplication.IsValid">
            <summary>
                Gets a boolean value indicating if this instance of <see cref="T:NvAPIWrapper.DRS.ProfileApplication" /> is a valid instance
                representing an application in a profile
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.ProfileApplication.LauncherName">
            <summary>
                Gets the application launcher name
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.ProfileApplication.Profile">
            <summary>
                Gets the parent profile instance
            </summary>
        </member>
        <member name="M:NvAPIWrapper.DRS.ProfileApplication.CreateApplication(NvAPIWrapper.DRS.DriverSettingsProfile,System.String,System.String,System.String,System.String[],System.Boolean,System.String)">
            <summary>
                Creates a new application
            </summary>
            <param name="profile">The profile to create the new application in.</param>
            <param name="applicationName">The application name (with extension).</param>
            <param name="friendlyName">The application friendly name.</param>
            <param name="launcherName">The application launcher name.</param>
            <param name="fileInFolders">An array of files necessary to be present inside the application parent directory.</param>
            <param name="isMetro">A boolean value indicating if this application is a metro application.</param>
            <param name="commandLine">The application command line string.</param>
            <returns>A new instance of <see cref="T:NvAPIWrapper.DRS.ProfileApplication" /> representing the newly created application.</returns>
        </member>
        <member name="M:NvAPIWrapper.DRS.ProfileApplication.ToString">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.DRS.ProfileApplication.Delete">
            <summary>
                Deletes this application and makes this instance invalid
            </summary>
        </member>
        <member name="T:NvAPIWrapper.DRS.ProfileSetting">
            <summary>
                Represents a profile setting and its value
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.ProfileSetting.CurrentValue">
            <summary>
                Gets the current value of the setting
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.ProfileSetting.IsCurrentValuePredefined">
            <summary>
                Gets a boolean value indicating if the current value is the predefined value.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.ProfileSetting.IsPredefinedValueValid">
            <summary>
                Gets a boolean value indicating if this setting had a predefined valid value.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.ProfileSetting.PredefinedValue">
            <summary>
                Gets the predefined value of this setting.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.ProfileSetting.SettingId">
            <summary>
                Gets the setting identification number
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.ProfileSetting.SettingInfo">
            <summary>
                Gets additional information regarding this setting including possible valid values
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.ProfileSetting.SettingLocation">
            <summary>
                Gets the profile location of this setting
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.ProfileSetting.SettingType">
            <summary>
                Gets the value type of this setting
            </summary>
        </member>
        <member name="M:NvAPIWrapper.DRS.ProfileSetting.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.DRS.SettingInfo">
            <summary>
                Contains information about a setting
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.SettingInfo.AvailableValues">
            <summary>
                Gets an array of available possible valid values.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.SettingInfo.DefaultValue">
            <summary>
                Gets the default value of this setting
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.SettingInfo.IsAvailable">
            <summary>
                Gets a boolean value indicating if this setting is available on this machine and with the current version of NVIDIA
                driver
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.SettingInfo.IsKnown">
            <summary>
                Gets a boolean value indicating if this setting is know by this library
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.SettingInfo.KnownDescription">
            <summary>
                Gets the description of this setting from the library or <see langword="null" /> if this setting is not known by
                the library.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.SettingInfo.KnownSettingId">
            <summary>
                Gets the known identification number of this setting from the library or <see langword="null" /> if this setting is
                not known by the library.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.SettingInfo.KnownValueType">
            <summary>
                Gets the type of a static class or an enum containing possible known values for this setting from the library or
                <see langword="null" /> if this setting is not known by the library
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.SettingInfo.Name">
            <summary>
                Gets the name of the setting from NVIDIA driver or <see langword="null" /> if the setting is not available on this
                machine.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.SettingInfo.SettingId">
            <summary>
                Gets the setting identification number
            </summary>
        </member>
        <member name="P:NvAPIWrapper.DRS.SettingInfo.SettingType">
            <summary>
                Gets the value type of the setting from NVIDIA driver or <see langword="null" /> if the setting is not available on
                this machine.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.DRS.SettingInfo.FromId(System.UInt32)">
            <summary>
                Gets information regarding a setting from its identification number.
            </summary>
            <param name="settingId">The identification number of the setting to get information about.</param>
            <returns>An instance of <see cref="T:NvAPIWrapper.DRS.SettingInfo" /> containing information about the setting.</returns>
        </member>
        <member name="M:NvAPIWrapper.DRS.SettingInfo.FromKnownSettingId(NvAPIWrapper.DRS.KnownSettingId)">
            <summary>
                Gets information regarding a setting from its known identification number.
            </summary>
            <param name="settingId">The known identification number of the setting to get information about.</param>
            <returns>An instance of <see cref="T:NvAPIWrapper.DRS.SettingInfo" /> containing information about the setting.</returns>
        </member>
        <member name="M:NvAPIWrapper.DRS.SettingInfo.FromName(System.String)">
            <summary>
                Gets information regarding a setting from its name.
            </summary>
            <param name="settingName">The name of the setting to get information about.</param>
            <returns>An instance of <see cref="T:NvAPIWrapper.DRS.SettingInfo" /> containing information about the setting.</returns>
        </member>
        <member name="M:NvAPIWrapper.DRS.SettingInfo.GetAvailableSetting">
            <summary>
                Gets a list of all available setting on this machine
            </summary>
            <returns>Instances of <see cref="T:NvAPIWrapper.DRS.SettingInfo" /> each representing a available setting on this machine.</returns>
        </member>
        <member name="M:NvAPIWrapper.DRS.SettingInfo.GetKnownSettingId(System.UInt32)">
            <summary>
                Gets the known identification number of a setting from its identification number
            </summary>
            <param name="settingId">The setting identification number.</param>
            <returns>The known setting identification number if the setting is known; otherwise <see langword="null" />.</returns>
        </member>
        <member name="M:NvAPIWrapper.DRS.SettingInfo.GetSettingDescription(NvAPIWrapper.DRS.KnownSettingId)">
            <summary>
                Gets the known setting description from its identification number
            </summary>
            <param name="knownSettingId">The known setting identification number.</param>
            <returns>The known setting description if available; otherwise <see langword="null" />.</returns>
        </member>
        <member name="M:NvAPIWrapper.DRS.SettingInfo.GetSettingId(NvAPIWrapper.DRS.KnownSettingId)">
            <summary>
                Gets the identification number of a setting from its known identification number
            </summary>
            <param name="knownSettingId">The known setting identification number.</param>
            <returns>The setting identification number.</returns>
        </member>
        <member name="M:NvAPIWrapper.DRS.SettingInfo.IsSettingKnown(System.UInt32)">
            <summary>
                Checks if a setting is known by this library.
            </summary>
            <param name="settingId">The setting identification number.</param>
            <returns>true if setting is known by this library; otherwise false.</returns>
        </member>
        <member name="M:NvAPIWrapper.DRS.SettingInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.DRS.SettingInfo.ResolveKnownValueName(System.Object)">
            <summary>
                Tries to resolve the name of a known value using its actual value
            </summary>
            <param name="value">The actual value</param>
            <returns>The name of the known value member.</returns>
        </member>
        <member name="T:NvAPIWrapper.GPU.AGPInformation">
            <summary>
                Contains information about the accelerated graphics connection
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.AGPInformation.ApertureInMB">
            <summary>
                Gets AGP aperture in megabytes
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.AGPInformation.CurrentRate">
            <summary>
                Gets current AGP Rate (0 = AGP not present, 1 = 1x, 2 = 2x, etc.)
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.AGPInformation.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.GPU.ECCMemoryInformation">
            <summary>
                Contains information about the ECC memory
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.ECCMemoryInformation.AggregatedDoubleBitErrors">
            <summary>
                Gets the number of aggregated ECC memory double bit errors
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.ECCMemoryInformation.AggregatedSingleBitErrors">
            <summary>
                Gets the number of aggregated ECC memory single bit errors
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.ECCMemoryInformation.Configuration">
            <summary>
                Gets the ECC memory configuration in regard to how changes are applied
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.ECCMemoryInformation.CurrentDoubleBitErrors">
            <summary>
                Gets the number of current ECC memory double bit errors
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.ECCMemoryInformation.CurrentSingleBitErrors">
            <summary>
                Gets the number of current ECC memory single bit errors
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.ECCMemoryInformation.IsEnabled">
            <summary>
                Gets a boolean value indicating if ECC memory error correction is enabled
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.ECCMemoryInformation.IsEnabledByDefault">
            <summary>
                Gets a boolean value indicating if ECC memory is enabled by default
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.ECCMemoryInformation.IsSupported">
            <summary>
                Gets a boolean value indicating if ECC memory is supported and available
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.ECCMemoryInformation.PhysicalGPU">
            <summary>
                Gets the physical GPU that this instance describes
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.ECCMemoryInformation.ToString">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.GPU.ECCMemoryInformation.ClearAggregatedErrors">
            <summary>
                Clears aggregated error counters.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.ECCMemoryInformation.ClearCurrentErrors">
            <summary>
                Clears current error counters.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.ECCMemoryInformation.ClearErrors">
            <summary>
                Clears all error counters.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.ECCMemoryInformation.Disable(System.Boolean)">
            <summary>
                Disables ECC memory error correction.
            </summary>
            <param name="immediate">A boolean value to indicate if this change should get applied immediately</param>
        </member>
        <member name="M:NvAPIWrapper.GPU.ECCMemoryInformation.Enable(System.Boolean)">
            <summary>
                Enables ECC memory error correction.
            </summary>
            <param name="immediate">A boolean value to indicate if this change should get applied immediately</param>
        </member>
        <member name="T:NvAPIWrapper.GPU.GPUArchitectInformation">
            <summary>
                Contains physical GPU architect information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUArchitectInformation.NumberOfCores">
            <summary>
                Gets total number of cores defined for this GPU, or zero for older architectures
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUArchitectInformation.NumberOfGPC">
            <summary>
                Gets the number of graphics processing clusters (aka GPU Partitions)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUArchitectInformation.NumberOfROPs">
            <summary>
                Gets the number of render output units
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUArchitectInformation.NumberOfShaderPipelines">
            <summary>
                Gets the number of shader pipelines
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUArchitectInformation.NumberOfShaderSubPipelines">
            <summary>
                Gets the number of shader sub pipelines
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUArchitectInformation.NumberOfVPEs">
            <summary>
                Gets the number of video processing engines
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUArchitectInformation.PhysicalGPU">
            <summary>
                Gets the physical GPU that this instance describes
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUArchitectInformation.Revision">
            <summary>
                Gets the GPU revision number (should be displayed as a hex string)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUArchitectInformation.ShortName">
            <summary>
                Gets the GPU short name (aka Codename)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUArchitectInformation.TotalNumberOfSMs">
            <summary>
                Gets the total number of streaming multiprocessors
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUArchitectInformation.TotalNumberOfSPs">
            <summary>
                Gets the total number of streaming processors
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUArchitectInformation.TotalNumberOfTPCs">
            <summary>
                Gets the total number of texture processing clusters
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUArchitectInformation.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.GPU.GPUBusInformation">
            <summary>
                Contains information about the GPU bus
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUBusInformation.AGPInformation">
            <summary>
                Gets accelerated graphics port information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUBusInformation.BusId">
            <summary>
                Gets the bus identification
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUBusInformation.BusSlot">
            <summary>
                Gets the bus slot identification
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUBusInformation.BusType">
            <summary>
                Gets the the bus type
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUBusInformation.CurrentPCIeLanes">
            <summary>
                Gets number of PCIe lanes being used for the PCIe interface downstream
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUBusInformation.IRQ">
            <summary>
                Gets GPU interrupt number
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUBusInformation.PCIIdentifiers">
            <summary>
                Gets the PCI identifiers
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUBusInformation.PhysicalGPU">
            <summary>
                Gets the physical GPU that this instance describes
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUBusInformation.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.GPU.GPUCooler">
            <summary>
                Holds information regarding a GPU cooler entry
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUCooler.ControlMode">
            <summary>
                Gets the cooler control mode
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUCooler.CoolerController">
            <summary>
                Gets the cooler controller
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUCooler.CoolerId">
            <summary>
                Gets the cooler identification number or index
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUCooler.CoolerType">
            <summary>
                Gets the cooler type
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUCooler.CurrentFanSpeedInRPM">
            <summary>
                Gets the GPU fan speed in revolutions per minute
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUCooler.CurrentLevel">
            <summary>
                Gets the cooler current level in percentage
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUCooler.CurrentMaximumLevel">
            <summary>
                Gets the cooler current maximum level in percentage
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUCooler.CurrentMinimumLevel">
            <summary>
                Gets the cooler current minimum level in percentage
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUCooler.CurrentPolicy">
            <summary>
                Gets the cooler current policy
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUCooler.DefaultMaximumLevel">
            <summary>
                Gets the cooler default maximum level in percentage
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUCooler.DefaultMinimumLevel">
            <summary>
                Gets the cooler default minimum level in percentage
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUCooler.DefaultPolicy">
            <summary>
                Gets the cooler default policy
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUCooler.Target">
            <summary>
                Gets the cooler target
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUCooler.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.GPU.GPUCoolerInformation">
            <summary>
                Contains information about the GPU coolers and current fan speed
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUCoolerInformation.Coolers">
            <summary>
                Gets a list of all available coolers along with their current settings and status
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUCoolerInformation.CurrentFanSpeedInRPM">
            <summary>
                Gets the GPU fan speed in revolutions per minute
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUCoolerInformation.CurrentFanSpeedLevel">
            <summary>
                Gets the current fan speed in percentage if available
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUCoolerInformation.PhysicalGPU">
            <summary>
                Gets the physical GPU that this instance describes
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUCoolerInformation.ToString">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUCoolerInformation.RestoreCoolerSettingsToDefault">
            <summary>
                Resets all cooler settings to default.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUCoolerInformation.RestoreCoolerSettingsToDefault(System.Int32[])">
            <summary>
                Resets one or more cooler settings to default.
            </summary>
            <param name="coolerIds">The cooler identification numbers (indexes) to reset their settings to default.</param>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUCoolerInformation.SetCoolerSettings(System.Int32,NvAPIWrapper.Native.GPU.CoolerPolicy,System.Int32)">
            <summary>
                Changes a cooler settings by modifying the policy and the current level
            </summary>
            <param name="coolerId">The cooler identification number (index) to change the settings.</param>
            <param name="policy">The new cooler policy.</param>
            <param name="newLevel">The new cooler level. Valid only if policy is set to manual.</param>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUCoolerInformation.SetCoolerSettings(System.Int32,NvAPIWrapper.Native.GPU.CoolerPolicy)">
            <summary>
                Changes a cooler setting by modifying the policy
            </summary>
            <param name="coolerId">The cooler identification number (index) to change the settings.</param>
            <param name="policy">The new cooler policy.</param>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUCoolerInformation.SetCoolerSettings(System.Int32,System.Int32)">
            <summary>
                Changes a cooler settings by modifying the policy to manual and sets a new level
            </summary>
            <param name="coolerId">The cooler identification number (index) to change the settings.</param>
            <param name="newLevel">The new cooler level.</param>
        </member>
        <member name="T:NvAPIWrapper.GPU.GPUMemoryInformation">
            <summary>
                Contains information regarding the available and total memory as well as the type of memory and other information
                regarding the GPU RAM and frame buffer
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUMemoryInformation.FrameBufferBandwidth">
            <summary>
                Gets the frame buffer bandwidth
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUMemoryInformation.FrameBufferLocation">
            <summary>
                Gets the frame buffer location index
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUMemoryInformation.InternalClockToBusClockFactor">
            <summary>
                Gets the internal clock to bus clock factor based on the type of RAM
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUMemoryInformation.InternalClockToTransferRateFactor">
            <summary>
                Gets the internal clock to transfer rate factor based on the type of RAM
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUMemoryInformation.PhysicalFrameBufferSizeInkB">
            <summary>
                Gets GPU physical frame buffer size in KB. This does NOT include any system RAM that may be dedicated for use by
                the GPU.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUMemoryInformation.PhysicalGPU">
            <summary>
                Gets the physical GPU that this instance describes
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUMemoryInformation.RAMBanks">
            <summary>
                Gets the number of memory banks
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUMemoryInformation.RAMBusWidth">
            <summary>
                Gets the memory bus width
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUMemoryInformation.RAMMaker">
            <summary>
                Gets the memory maker (brand)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUMemoryInformation.RAMType">
            <summary>
                Gets the memory type
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUMemoryInformation.VirtualFrameBufferSizeInkB">
            <summary>
                Gets virtual size of frame-buffer in KB for this GPU. This includes the physical RAM plus any system RAM that has
                been dedicated for use by the GPU.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUMemoryInformation.AvailableDedicatedVideoMemoryInkB">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUMemoryInformation.CurrentAvailableDedicatedVideoMemoryInkB">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUMemoryInformation.DedicatedVideoMemoryInkB">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUMemoryInformation.SharedSystemMemoryInkB">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUMemoryInformation.SystemVideoMemoryInkB">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUMemoryInformation.GetMemoryBusClockFactor(NvAPIWrapper.Native.GPU.GPUMemoryType)">
            <summary>
                Gets the memory bus clock to internal memory clock factor
            </summary>
            <param name="memoryType"></param>
            <returns>The value of X in X(InternalMemoryClock)=(BusMemoryClock)</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUMemoryInformation.GetMemoryTransferRateFactor(NvAPIWrapper.Native.GPU.GPUMemoryType)">
            <summary>
                Gets the number of transfers per internal memory clock factor
            </summary>
            <param name="memoryType"></param>
            <returns>The value of X in X(InternalMemoryClock)=(OperationsPerSecond)</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUMemoryInformation.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.GPU.GPUOutput">
            <summary>
                Represents a single GPU output
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUOutput.DigitalVibranceControl">
            <summary>
                Gets the corresponding Digital Vibrance Control information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUOutput.HUEControl">
            <summary>
                Gets the corresponding HUE information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUOutput.OutputId">
            <summary>
                Gets the output identification as a single bit unsigned integer
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUOutput.OutputType">
            <summary>
                Gets the output type
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUOutput.PhysicalGPU">
            <summary>
                Gets the corresponding physical GPU
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUOutput.Equals(NvAPIWrapper.GPU.GPUOutput)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUOutput.op_Equality(NvAPIWrapper.GPU.GPUOutput,NvAPIWrapper.GPU.GPUOutput)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUOutput.op_Inequality(NvAPIWrapper.GPU.GPUOutput,NvAPIWrapper.GPU.GPUOutput)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUOutput.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUOutput.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUOutput.ToString">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUOutput.OverrideRefreshRate(System.Single,System.Boolean)">
            <summary>
                Overrides the refresh rate on this output.
                The new refresh rate can be applied right away or deferred to be applied with the next OS
                mode-set.
                The override is good for only one mode-set (regardless whether it's deferred or immediate).
            </summary>
            <param name="refreshRate">The refresh rate to be applied.</param>
            <param name="isDeferred">
                A boolean value indicating if the refresh rate override should be deferred to the next OS
                mode-set.
            </param>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUOutput.ReadI2C(System.Nullable{System.Byte},System.Boolean,System.Byte,System.Byte[],System.UInt32,NvAPIWrapper.Native.GPU.I2CSpeed)">
            <summary>
                Reads data from the I2C bus
            </summary>
            <param name="portId">The port id on which device is connected</param>
            <param name="useDDCPort">A boolean value indicating that the DDC port should be used instead of the communication port</param>
            <param name="deviceAddress">The device I2C slave address</param>
            <param name="registerAddress">The target I2C register address</param>
            <param name="readDataLength">The length of the buffer to allocate for the read operation.</param>
            <param name="speed">The target speed of the transaction in kHz</param>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUOutput.WriteI2C(System.Nullable{System.Byte},System.Boolean,System.Byte,System.Byte[],System.Byte[],NvAPIWrapper.Native.GPU.I2CSpeed)">
            <summary>
                Writes data to the I2C bus
            </summary>
            <param name="portId">The port id on which device is connected</param>
            <param name="useDDCPort">A boolean value indicating that the DDC port should be used instead of the communication port</param>
            <param name="deviceAddress">The device I2C slave address</param>
            <param name="registerAddress">The target I2C register address</param>
            <param name="data">The payload data</param>
            <param name="speed">The target speed of the transaction in kHz</param>
        </member>
        <member name="T:NvAPIWrapper.GPU.GPUPerformanceControl">
            <summary>
                Contains information regarding the GPU performance control and limitations
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceControl.CurrentActiveLimit">
            <summary>
                Gets the current active performance limitation
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceControl.CurrentPerformanceDecreaseReason">
            <summary>
                Gets the current performance decrease reason
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceControl.IsNoLoadLimitSupported">
            <summary>
                Gets a boolean value indicating if no load limit is supported with this GPU
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceControl.IsPowerLimitSupported">
            <summary>
                Gets a boolean value indicating if power limit is supported with this GPU
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceControl.IsTemperatureLimitSupported">
            <summary>
                Gets a boolean value indicating if temperature limit is supported with this GPU
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceControl.IsVoltageLimitSupported">
            <summary>
                Gets a boolean value indicating if voltage limit is supported with this GPU
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceControl.PhysicalGPU">
            <summary>
                Gets the physical GPU that this instance describes
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceControl.PowerLimitInformation">
            <summary>
                Gets information regarding possible power limit policies and their acceptable range
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceControl.PowerLimitPolicies">
            <summary>
                Gets the current active power limit policies
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceControl.ThermalLimitInformation">
            <summary>
                Gets information regarding possible thermal limit policies and their acceptable range
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceControl.ThermalLimitPolicies">
            <summary>
                Gets the current active thermal limit policies
            </summary>
        </member>
        <member name="T:NvAPIWrapper.GPU.GPUPerformanceState">
            <summary>
                Represents a performance state
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceState.Clocks">
            <summary>
                Gets a list of clocks associated with this performance state
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceState.IsReadOnly">
            <summary>
                Gets a boolean value indicating if this performance state is readonly
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceState.PCIeInformation">
            <summary>
                Gets the PCI-e information regarding this performance state.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceState.StateId">
            <summary>
                Gets the performance state identification
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceState.StateIndex">
            <summary>
                Gets the state index
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceState.Voltages">
            <summary>
                Gets a list of voltages associated with this performance state
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUPerformanceState.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.GPU.GPUPerformanceStateClock">
            <summary>
                Represents a performance state clock settings
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceStateClock.BaseClockInkHz">
            <summary>
                Gets the base clock frequency in kHz
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceStateClock.ClockDeltaInkHz">
            <summary>
                Gets the clock frequency delta in kHz
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceStateClock.ClockDeltaRangeInkHz">
            <summary>
                Gets the clock frequency delta range in kHz
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceStateClock.ClockDomain">
            <summary>
                Gets the clock domain
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceStateClock.CurrentClockInkHz">
            <summary>
                Gets the current clock frequency in kHz
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceStateClock.DependentVoltageDomain">
            <summary>
                Gets the dependent voltage domain
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceStateClock.DependentVoltageRangeInMicroVolt">
            <summary>
                Gets the dependent voltage range in uV
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceStateClock.IsReadOnly">
            <summary>
                Gets a boolean value indicating if this clock setting is readonly
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUPerformanceStateClock.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.GPU.GPUPerformanceStatesInformation">
            <summary>
                Holds the retrieved performance states information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceStatesInformation.CurrentPerformanceState">
            <summary>
                Gets the currently active performance state
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceStatesInformation.GlobalVoltages">
            <summary>
                Gets a list of global voltage settings
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceStatesInformation.IsReadOnly">
            <summary>
                Gets a boolean value indicating if performance states are readonly
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceStatesInformation.PerformanceStates">
            <summary>
                Gets a list of all available performance states
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUPerformanceStatesInformation.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.GPU.GPUPerformanceStateValueRange">
            <summary>
                Represents an integer value range
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUPerformanceStateValueRange.#ctor(System.Int64,System.Int64)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.GPU.GPUPerformanceStateValueRange" />.
            </summary>
            <param name="min">The lower bound of the range.</param>
            <param name="max">The upper bound of the range.</param>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUPerformanceStateValueRange.#ctor(System.Int64)">
            <summary>
                Creates a new single value instance of <see cref="T:NvAPIWrapper.GPU.GPUPerformanceStateValueRange" />.
            </summary>
            <param name="value">The only value in the range</param>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceStateValueRange.Maximum">
            <summary>
                Gets the upper bound of the inclusive range
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceStateValueRange.Minimum">
            <summary>
                Gets the lower bound of the inclusive range
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUPerformanceStateValueRange.Equals(NvAPIWrapper.GPU.GPUPerformanceStateValueRange)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUPerformanceStateValueRange.op_Equality(NvAPIWrapper.GPU.GPUPerformanceStateValueRange,NvAPIWrapper.GPU.GPUPerformanceStateValueRange)">
            <summary>
                Checks two instances of <see cref="T:NvAPIWrapper.GPU.GPUPerformanceStateValueRange" /> for equality.
            </summary>
            <param name="left">The left side of the comparison.</param>
            <param name="right">The right side of the comparison.</param>
            <returns>true if instances are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUPerformanceStateValueRange.op_Inequality(NvAPIWrapper.GPU.GPUPerformanceStateValueRange,NvAPIWrapper.GPU.GPUPerformanceStateValueRange)">
            <summary>
                Checks two instances of <see cref="T:NvAPIWrapper.GPU.GPUPerformanceStateValueRange" /> for inequality.
            </summary>
            <param name="left">The left side of the comparison.</param>
            <param name="right">The right side of the comparison.</param>
            <returns>true if instances are in-equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUPerformanceStateValueRange.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUPerformanceStateValueRange.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUPerformanceStateValueRange.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.GPU.GPUPerformanceStateVoltage">
            <summary>
                Represents a performance state voltage settings
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceStateVoltage.BaseVoltageInMicroVolt">
            <summary>
                Gets the base voltage in uV
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceStateVoltage.CurrentVoltageInMicroVolt">
            <summary>
                Gets the current voltage in uV
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceStateVoltage.IsReadOnly">
            <summary>
                Gets a boolean value indicating if this voltage is readonly
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceStateVoltage.VoltageDeltaInMicroVolt">
            <summary>
                Gets the voltage delta in uV
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceStateVoltage.VoltageDeltaRangeInMicroVolt">
            <summary>
                Gets the voltage delta range in uV
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPerformanceStateVoltage.VoltageDomain">
            <summary>
                Gets the voltage domain
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUPerformanceStateVoltage.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.GPU.GPUPowerLimitInfo">
            <summary>
                Holds information regarding a possible power limit policy and its acceptable range
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPowerLimitInfo.DefaultPowerInPCM">
            <summary>
                Gets the default policy target power in per cent mille (PCM)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPowerLimitInfo.DefaultPowerInPercent">
            <summary>
                Gets the default policy target power in percentage
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPowerLimitInfo.MaximumPowerInPCM">
            <summary>
                Gets the maximum possible policy target power in per cent mille (PCM)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPowerLimitInfo.MaximumPowerInPercent">
            <summary>
                Gets the maximum possible policy target power in percentage
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPowerLimitInfo.MinimumPowerInPCM">
            <summary>
                Gets the minimum possible policy target power in per cent mille (PCM)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPowerLimitInfo.MinimumPowerInPercent">
            <summary>
                Gets the minimum possible policy target power in percentage
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPowerLimitInfo.PerformanceStateId">
            <summary>
                Gets the corresponding performance state identification
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUPowerLimitInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.GPU.GPUPowerLimitPolicy">
            <summary>
                Holds information regarding a currently active power limit policy
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPowerLimitPolicy.PerformanceStateId">
            <summary>
                Gets the corresponding performance state identification
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPowerLimitPolicy.PowerTargetInPCM">
            <summary>
                Gets the current policy target power in per cent mille (PCM)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPowerLimitPolicy.PowerTargetInPercent">
            <summary>
                Gets the current policy target power in percentage
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUPowerLimitPolicy.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.GPU.GPUPowerTopologyInformation">
            <summary>
                Holds information regarding current power topology and their current power usage
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPowerTopologyInformation.PhysicalGPU">
            <summary>
                Gets the physical GPU that this instance describes
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPowerTopologyInformation.PowerTopologyEntries">
            <summary>
                Gets the current power topology entries
            </summary>
        </member>
        <member name="T:NvAPIWrapper.GPU.GPUPowerTopologyStatus">
            <summary>
                Contains information about a power domain usage
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPowerTopologyStatus.Domain">
            <summary>
                Gets the power usage domain
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPowerTopologyStatus.PowerUsageInPCM">
            <summary>
                Gets the current power usage in per cent mille (PCM)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUPowerTopologyStatus.PowerUsageInPercent">
            <summary>
                Gets the current power usage in percentage
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUPowerTopologyStatus.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.GPU.GPUThermalInformation">
            <summary>
                Holds information regarding the available thermal sensors and current thermal level of a GPU
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUThermalInformation.CurrentThermalLevel">
            <summary>
                Gets the current thermal level of the GPU
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUThermalInformation.PhysicalGPU">
            <summary>
                Gets the physical GPU that this instance describes
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUThermalInformation.ThermalSensors">
            <summary>
                Gets the list of available thermal sensors
            </summary>
        </member>
        <member name="T:NvAPIWrapper.GPU.GPUThermalLimitInfo">
            <summary>
                Holds information regarding a possible thermal limit policy and its acceptable range
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUThermalLimitInfo.Controller">
            <summary>
                Gets the policy's thermal controller
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUThermalLimitInfo.DefaultTemperature">
            <summary>
                Gets the default policy target temperature in degree Celsius
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUThermalLimitInfo.MaximumTemperature">
            <summary>
                Gets the maximum possible policy target temperature in degree Celsius
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUThermalLimitInfo.MinimumTemperature">
            <summary>
                Gets the minimum possible policy target temperature in degree Celsius
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUThermalLimitInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.GPU.GPUThermalLimitPolicy">
            <summary>
                Holds information regarding a currently active temperature limit policy
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUThermalLimitPolicy.Controller">
            <summary>
                Gets the policy's thermal controller
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUThermalLimitPolicy.PerformanceStateId">
            <summary>
                Gets the corresponding performance state identification
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUThermalLimitPolicy.TargetTemperature">
            <summary>
                Gets the current policy target temperature in degree Celsius
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUThermalLimitPolicy.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.GPU.GPUThermalSensor">
            <summary>
                Represents a thermal sensor
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUThermalSensor.SensorId">
            <summary>
                Gets the sensor identification number or index
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUThermalSensor.Controller">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUThermalSensor.CurrentTemperature">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUThermalSensor.DefaultMaximumTemperature">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUThermalSensor.DefaultMinimumTemperature">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUThermalSensor.Target">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUThermalSensor.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.GPU.GPUUsageDomainStatus">
            <summary>
                Holds information about a utilization domain
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUUsageDomainStatus.Domain">
            <summary>
                Gets the utilization domain that this instance describes
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUUsageDomainStatus.Percentage">
            <summary>
                Gets the percentage of time where the domain is considered busy in the last 1 second interval.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUUsageDomainStatus.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.GPU.GPUUsageInformation">
            <summary>
                Holds information about the GPU utilization domains
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUUsageInformation.BusInterface">
            <summary>
                Gets the Bus interface (BUS) utilization
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUUsageInformation.FrameBuffer">
            <summary>
                Gets the frame buffer (FB) utilization
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUUsageInformation.GPU">
            <summary>
                Gets the graphic engine (GPU) utilization
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUUsageInformation.IsDynamicPerformanceStatesEnabled">
            <summary>
                Gets a boolean value indicating if the dynamic performance states is enabled
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUUsageInformation.PhysicalGPU">
            <summary>
                Gets the physical GPU that this instance describes
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUUsageInformation.UtilizationDomainsStatus">
            <summary>
                Gets all valid utilization domains and information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.GPUUsageInformation.VideoEngine">
            <summary>
                Gets the Video engine (VID) utilization
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.GPUUsageInformation.EnableDynamicPerformanceStates">
            <summary>
                Enables dynamic performance states
            </summary>
        </member>
        <member name="T:NvAPIWrapper.GPU.LogicalGPU">
            <summary>
                Represents a logical NVIDIA GPU
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.LogicalGPU.#ctor(NvAPIWrapper.Native.GPU.Structures.LogicalGPUHandle)">
            <summary>
                Creates a new LogicalGPU
            </summary>
            <param name="handle">Logical GPU handle</param>
        </member>
        <member name="P:NvAPIWrapper.GPU.LogicalGPU.CorrespondingPhysicalGPUs">
            <summary>
                Gets a list of all corresponding physical GPUs
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.LogicalGPU.Handle">
            <summary>
                Gets the logical GPU handle
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.LogicalGPU.Equals(NvAPIWrapper.GPU.LogicalGPU)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.GPU.LogicalGPU.GetLogicalGPUs">
            <summary>
                Gets all logical GPUs
            </summary>
            <returns>An array of logical GPUs</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.LogicalGPU.op_Equality(NvAPIWrapper.GPU.LogicalGPU,NvAPIWrapper.GPU.LogicalGPU)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.LogicalGPU.op_Inequality(NvAPIWrapper.GPU.LogicalGPU,NvAPIWrapper.GPU.LogicalGPU)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.LogicalGPU.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.GPU.LogicalGPU.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.GPU.LogicalGPU.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.GPU.PCIeInformation">
            <summary>
                Contains information about the PCI-e connection
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PCIeInformation.Generation">
            <summary>
                Gets the PCI-e generation
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PCIeInformation.Lanes">
            <summary>
                Gets the PCI-e down stream lanes
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PCIeInformation.TransferRateInMTps">
            <summary>
                Gets the PCIe transfer rate in Mega Transfers per Second
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PCIeInformation.Version">
            <summary>
                Gets the PCI-e version
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.PCIeInformation.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.GPU.PCIIdentifiers">
            <summary>
                Contains information about the PCI connection
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PCIIdentifiers.DeviceId">
            <summary>
                Gets the internal PCI device identifier
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PCIIdentifiers.ExternalDeviceId">
            <summary>
                Gets the external PCI device identifier
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PCIIdentifiers.RevisionId">
            <summary>
                Gets the internal PCI device-specific revision identifier
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PCIIdentifiers.SubSystemId">
            <summary>
                Gets the internal PCI subsystem identifier
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PCIIdentifiers.VendorId">
            <summary>
                Gets the vendor identification calculated from internal device identification
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.PCIIdentifiers.Equals(NvAPIWrapper.GPU.PCIIdentifiers)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.GPU.PCIIdentifiers.op_Equality(NvAPIWrapper.GPU.PCIIdentifiers,NvAPIWrapper.GPU.PCIIdentifiers)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.PCIIdentifiers.op_Inequality(NvAPIWrapper.GPU.PCIIdentifiers,NvAPIWrapper.GPU.PCIIdentifiers)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.PCIIdentifiers.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.GPU.PCIIdentifiers.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.GPU.PCIIdentifiers.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.GPU.PhysicalGPU">
            <summary>
                Represents a physical NVIDIA GPU
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.PhysicalGPU.#ctor(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                Creates a new PhysicalGPU
            </summary>
            <param name="handle">Physical GPU handle</param>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.ActiveOutputs">
            <summary>
                Gets all active outputs of this GPU
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.ArchitectInformation">
            <summary>
                Gets GPU architect information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.BaseClockFrequencies">
            <summary>
                Gets GPU base clock frequencies
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.Bios">
            <summary>
                Gets GPU video BIOS information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.Board">
            <summary>
                Gets the board information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.BoostClockFrequencies">
            <summary>
                Gets GPU boost clock frequencies
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.BusInformation">
            <summary>
                Gets GPU bus information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.CoolerInformation">
            <summary>
                Gets GPU coolers information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.CorrespondingLogicalGPU">
            <summary>
                Gets corresponding logical GPU
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.CurrentClockFrequencies">
            <summary>
                Gets GPU current clock frequencies
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.DriverModel">
            <summary>
                Gets the driver model number for this GPU
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.ECCMemoryInformation">
            <summary>
                Gets GPU ECC memory information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.Foundry">
            <summary>
                Gets the chipset foundry
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.FullName">
            <summary>
                Gets GPU full name
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.GPUId">
            <summary>
                Gets the GPU identification number
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.GPUType">
            <summary>
                Gets GPU type
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.Handle">
            <summary>
                Gets the physical GPU handle
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.IsQuadro">
            <summary>
                Gets a boolean value indicating the Quadro line of products
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.MemoryInformation">
            <summary>
                Gets GPU memory and RAM information as well as frame-buffer information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.PerformanceControl">
            <summary>
                Gets GPU performance control status and configurations
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.PerformanceStatesInfo">
            <summary>
                Gets the GPU performance states information and configurations
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.PowerTopologyInformation">
            <summary>
                Gets GPU coolers information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.SystemType">
            <summary>
                Gets GPU system type
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.ThermalInformation">
            <summary>
                Gets GPU thermal sensors information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.PhysicalGPU.UsageInformation">
            <summary>
                Gets the GPU utilization domains and usages
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.PhysicalGPU.Equals(NvAPIWrapper.GPU.PhysicalGPU)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.GPU.PhysicalGPU.FromGPUId(System.UInt32)">
            <summary>
                Gets the corresponding <see cref="T:NvAPIWrapper.GPU.PhysicalGPU" /> instance from a GPU identification number.
            </summary>
            <param name="gpuId">The GPU identification number.</param>
            <returns>An instance of <see cref="T:NvAPIWrapper.GPU.PhysicalGPU" /> or <see langword="null" /> if operation failed.</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.PhysicalGPU.GetPhysicalGPUs">
            <summary>
                Gets all physical GPUs
            </summary>
            <returns>An array of physical GPUs</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.PhysicalGPU.GetTCCPhysicalGPUs">
            <summary>
                Gets all physical GPUs in TCC state
            </summary>
            <returns>An array of physical GPUs</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.PhysicalGPU.op_Equality(NvAPIWrapper.GPU.PhysicalGPU,NvAPIWrapper.GPU.PhysicalGPU)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.PhysicalGPU.op_Inequality(NvAPIWrapper.GPU.PhysicalGPU,NvAPIWrapper.GPU.PhysicalGPU)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.PhysicalGPU.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.GPU.PhysicalGPU.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.GPU.PhysicalGPU.ToString">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.GPU.PhysicalGPU.GetActiveApplications">
            <summary>
                Get a list of all active applications for this GPU
            </summary>
            <returns>An array of processes</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.PhysicalGPU.GetConnectedDisplayDevices(NvAPIWrapper.Native.GPU.ConnectedIdsFlag)">
            <summary>
                Get a list of all connected display devices on this GPU
            </summary>
            <param name="flags">ConnectedIdsFlag flag</param>
            <returns>An array of display devices</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.PhysicalGPU.GetDisplayDeviceByOutput(NvAPIWrapper.GPU.GPUOutput)">
            <summary>
                Get the display device connected to a specific GPU output
            </summary>
            <param name="output">The GPU output to get connected display device for</param>
            <returns>DisplayDevice connected to the specified GPU output</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.PhysicalGPU.GetDisplayDevices">
            <summary>
                Get a list of all display devices on any possible output
            </summary>
            <returns>An array of display devices</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.PhysicalGPU.ReadEDIDData(NvAPIWrapper.GPU.GPUOutput)">
            <summary>
                Reads EDID data of an output
            </summary>
            <param name="output">The GPU output to read EDID information for</param>
            <returns>A byte array containing EDID data</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.PhysicalGPU.ReadI2C(NvAPIWrapper.Native.Interfaces.GPU.II2CInfo)">
            <summary>
                Reads data from the I2C bus
            </summary>
            <param name="i2cInfo">Information required to read from the I2C bus.</param>
            <returns>The returned payload.</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.PhysicalGPU.ValidateOutputCombination(NvAPIWrapper.GPU.GPUOutput[])">
            <summary>
                Validates a set of GPU outputs to check if they can be active simultaneously
            </summary>
            <param name="outputs">GPU outputs to check</param>
            <returns>true if all specified outputs can be active simultaneously, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.GPU.PhysicalGPU.WriteEDIDData(NvAPIWrapper.GPU.GPUOutput,System.Byte[])">
            <summary>
                Writes EDID data of an output
            </summary>
            <param name="output">The GPU output to write EDID information for</param>
            <param name="edidData">A byte array containing EDID data</param>
        </member>
        <member name="M:NvAPIWrapper.GPU.PhysicalGPU.WriteEDIDData(NvAPIWrapper.Display.DisplayDevice,System.Byte[])">
            <summary>
                Writes EDID data of an display
            </summary>
            <param name="display">The display device to write EDID information for</param>
            <param name="edidData">A byte array containing EDID data</param>
        </member>
        <member name="M:NvAPIWrapper.GPU.PhysicalGPU.WriteI2C(NvAPIWrapper.Native.Interfaces.GPU.II2CInfo)">
            <summary>
                Writes data to the I2C bus
            </summary>
            <param name="i2cInfo">Information required to write to the I2C bus including data payload.</param>
        </member>
        <member name="T:NvAPIWrapper.GPU.VideoBIOS">
            <summary>
                Contains information about the GPU Video BIOS
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.VideoBIOS.OEMRevision">
            <summary>
                Gets the the OEM revision of the video BIOS
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.VideoBIOS.Revision">
            <summary>
                Gets the revision of the video BIOS
            </summary>
        </member>
        <member name="P:NvAPIWrapper.GPU.VideoBIOS.VersionString">
            <summary>
                Gets the full video BIOS version string
            </summary>
        </member>
        <member name="M:NvAPIWrapper.GPU.VideoBIOS.ToString">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.GPU.VideoBIOS.AsVersion">
            <summary>
                Returns the video BIOS version as a .Net Version object
            </summary>
            <returns>A Version object representing the video BIOS version</returns>
        </member>
        <member name="T:NvAPIWrapper.Mosaic.GridTopology">
            <summary>
                Represents a mosaic grid topology
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopology.#ctor(System.Int32,System.Int32,NvAPIWrapper.Mosaic.GridTopologyDisplay[])">
            <summary>
                Creates a new GridTopology
            </summary>
            <param name="rows">Mosaic rows</param>
            <param name="columns">Mosaic columns</param>
            <param name="displays">Topology displays</param>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopology.#ctor(NvAPIWrapper.Native.Interfaces.Mosaic.IGridTopology)">
            <summary>
                Creates a new GridTopology
            </summary>
            <param name="gridTopology">A IGridTopology implamented object</param>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.GridTopology.AcceleratePrimaryDisplay">
            <summary>
                Gets or sets a boolean value enabling SLI acceleration on the primary display while in single-wide mode (For
                Immersive Gaming only).
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.GridTopology.ApplyWithBezelCorrectedResolution">
            <summary>
                Gets or sets a boolean value forcing to the bezel-corrected resolution when enabling and doing the modeset
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.GridTopology.BaseMosaicPanoramic">
            <summary>
                Gets or sets a boolean value enabling the Base Mosaic (Panoramic) instead of Mosaic SLI (for NVS and Quadro-boards
                only)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.GridTopology.Columns">
            <summary>
                Gets the mosaic columns
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.GridTopology.Displays">
            <summary>
                Gets topology displays
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.GridTopology.DriverReloadAllowed">
            <summary>
                Gets or sets a boolean value allowing the API to, if necessary, realod the driver (for Vista and above only). Will
                not be persisted. Value undefined on get.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.GridTopology.Frequency">
            <summary>
                Gets the topology Frequency
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.GridTopology.ImmersiveGaming">
            <summary>
                Gets or sets a boolean value enabling as immersive gaming instead of Mosaic SLI (for Quadro-boards only)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.GridTopology.Resolution">
            <summary>
                Gets the topology resolution
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.GridTopology.Rows">
            <summary>
                Gets the mosaic rows
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopology.Equals(NvAPIWrapper.Mosaic.GridTopology)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopology.GetGridTopologies">
            <summary>
                Retrieves a list of currently active mosaic grid topologies
            </summary>
            <returns>An array of GridTopology objects</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopology.op_Equality(NvAPIWrapper.Mosaic.GridTopology,NvAPIWrapper.Mosaic.GridTopology)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopology.op_Inequality(NvAPIWrapper.Mosaic.GridTopology,NvAPIWrapper.Mosaic.GridTopology)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopology.SetGridTopologies(NvAPIWrapper.Mosaic.GridTopology[],NvAPIWrapper.Native.Mosaic.SetDisplayTopologyFlag)">
            <summary>
                Applies the requested grid topologies
            </summary>
            <param name="grids">An array of grid topologies to apply</param>
            <param name="flags">SetDisplayTopologyFlag flag</param>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopology.ValidateGridTopologies(NvAPIWrapper.Mosaic.GridTopology[],NvAPIWrapper.Native.Mosaic.SetDisplayTopologyFlag)">
            <summary>
                Validates a list of grid topologies
            </summary>
            <param name="grids">An array of grid topologies to validate</param>
            <param name="flags">SetDisplayTopologyFlag flag</param>
            <returns>An array of DisplayTopologyStatus object containing the result of the validation</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopology.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopology.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopology.GetDisplaySettingsV1">
            <summary>
                Creates and fills a DisplaySettingsV1 object
            </summary>
            <returns>The newly created DisplaySettingsV1 object</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopology.GetGridTopologyV1">
            <summary>
                Creates and fills a GridTopologyV1 object
            </summary>
            <returns>The newly created GridTopologyV1 object</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopology.GetGridTopologyV2">
            <summary>
                Creates and fills a GridTopologyV2 object
            </summary>
            <returns>The newly created GridTopologyV2 object</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopology.GetPossibleDisplaySettings">
            <summary>
                Retrieves a list of possible display settings for this topology
            </summary>
            <returns>An array of IDisplaySettings implamented objects</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopology.SetDisplays(System.Int32,System.Int32,NvAPIWrapper.Mosaic.GridTopologyDisplay[])">
            <summary>
                Changes topology arrangement and displays
            </summary>
            <param name="rows">Mosaic rows</param>
            <param name="columns">Mosaic columns</param>
            <param name="displays">Topology displays</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid display arrangement.</exception>
            <exception cref="T:System.ArgumentException">Number of displays should match the arrangement.</exception>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopology.SetDisplaySettings(NvAPIWrapper.Native.Interfaces.Mosaic.IDisplaySettings)">
            <summary>
                Changes display settings for the topology
            </summary>
            <param name="displaySettings">Display settings to use</param>
        </member>
        <member name="T:NvAPIWrapper.Mosaic.GridTopologyDisplay">
            <summary>
                Represents a display in a mosaic grid topology
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopologyDisplay.#ctor(System.UInt32,NvAPIWrapper.Mosaic.Overlap,NvAPIWrapper.Native.Display.Rotate,System.UInt32,NvAPIWrapper.Native.Mosaic.PixelShiftType)">
            <summary>
                Creates a mew GridTopologyDisplay
            </summary>
            <param name="displayId">Corresponding display identification</param>
            <param name="overlap">The overlap values</param>
            <param name="rotation">The display rotation</param>
            <param name="cloneGroup">The display clone group</param>
            <param name="pixelShiftType">The display pixel shift type</param>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopologyDisplay.#ctor(NvAPIWrapper.Display.DisplayDevice,NvAPIWrapper.Mosaic.Overlap,NvAPIWrapper.Native.Display.Rotate,System.UInt32,NvAPIWrapper.Native.Mosaic.PixelShiftType)">
            <summary>
                Creates a mew GridTopologyDisplay
            </summary>
            <param name="display">Corresponding display device</param>
            <param name="overlap">The overlap values</param>
            <param name="rotation">The display rotation</param>
            <param name="cloneGroup">The display clone group</param>
            <param name="pixelShiftType">The display pixel shift type</param>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopologyDisplay.#ctor(NvAPIWrapper.Native.Interfaces.Mosaic.IGridTopologyDisplay)">
            <summary>
                Creates a mew GridTopologyDisplay
            </summary>
            <param name="gridTopologyDisplay">IGridTopologyDisplay implamented object</param>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.GridTopologyDisplay.CloneGroup">
            <summary>
                Gets the clone group identification; Reserved, must be 0
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.GridTopologyDisplay.DisplayDevice">
            <summary>
                Gets the corresponding DisplayDevice
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.GridTopologyDisplay.Overlap">
            <summary>
                Gets the overlap values
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.GridTopologyDisplay.PixelShiftType">
            <summary>
                Gets the type of display pixel shift
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.GridTopologyDisplay.Rotation">
            <summary>
                Gets the rotation of the display
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopologyDisplay.Equals(NvAPIWrapper.Mosaic.GridTopologyDisplay)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopologyDisplay.op_Equality(NvAPIWrapper.Mosaic.GridTopologyDisplay,NvAPIWrapper.Mosaic.GridTopologyDisplay)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopologyDisplay.op_Inequality(NvAPIWrapper.Mosaic.GridTopologyDisplay,NvAPIWrapper.Mosaic.GridTopologyDisplay)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopologyDisplay.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopologyDisplay.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopologyDisplay.GetGridTopologyDisplayV1">
            <summary>
                Creates and fills a GridTopologyDisplayV1 object
            </summary>
            <returns>The newly created GridTopologyDisplayV1 object</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.GridTopologyDisplay.GetGridTopologyDisplayV2">
            <summary>
                Creates and fills a GridTopologyDisplayV2 object
            </summary>
            <returns>The newly created GridTopologyDisplayV2 object</returns>
        </member>
        <member name="T:NvAPIWrapper.Mosaic.Overlap">
            <summary>
                Holds mosaic overlap values
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Overlap.#ctor(System.Int32,System.Int32)">
            <summary>
                Creates a new Overlap
            </summary>
            <param name="overlapX">Horizontal overlap</param>
            <param name="overlapY">Vertical overlap</param>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.Overlap.HorizontalOverlap">
            <summary>
                Gets or sets horizontal overlap (OverlapX)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.Overlap.VerticalOverlap">
            <summary>
                Gets or sets vertical overlap (OverlapY)
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Overlap.Equals(NvAPIWrapper.Mosaic.Overlap)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Overlap.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Overlap.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Overlap.op_Equality(NvAPIWrapper.Mosaic.Overlap,NvAPIWrapper.Mosaic.Overlap)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Overlap.op_Inequality(NvAPIWrapper.Mosaic.Overlap,NvAPIWrapper.Mosaic.Overlap)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Overlap.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Mosaic.OverlapLimit">
            <summary>
                Holds maximum and minimum possible values for overlaps
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.OverlapLimit.MinimumHorizontalOverlap">
            <summary>
                Minimum value for horizontal overlap (OverlapX) or maximum value of horizontal gap
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.OverlapLimit.MaximumHorizontalOverlap">
            <summary>
                Maximum value for horizontal overlap (OverlapX)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.OverlapLimit.MinimumVerticalOverlap">
            <summary>
                Minimum value for vertical overlap (OverlapY) or maximum value of vertical gap
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.OverlapLimit.MaximumVerticalOverlap">
            <summary>
                Maximum value for vertical overlap (OverlapY)
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.OverlapLimit.Equals(NvAPIWrapper.Mosaic.OverlapLimit)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Mosaic.OverlapLimit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Mosaic.OverlapLimit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Mosaic.OverlapLimit.op_Equality(NvAPIWrapper.Mosaic.OverlapLimit,NvAPIWrapper.Mosaic.OverlapLimit)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.OverlapLimit.op_Inequality(NvAPIWrapper.Mosaic.OverlapLimit,NvAPIWrapper.Mosaic.OverlapLimit)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.OverlapLimit.ToString">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Mosaic.OverlapLimit.IsInHorizontalRange(System.Int32)">
            <summary>
                Checks to see if the value falls in to the acceptable horizontal overlap range
            </summary>
            <param name="overlapX">The horizontal overlap value</param>
            <returns>true if the value falls into the range, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.OverlapLimit.IsInVerticalRange(System.Int32)">
            <summary>
                Checks to see if the value falls in to the acceptable vertical overlap range
            </summary>
            <param name="overlapY">The vertical overlap value</param>
            <returns>true if the value falls into the range, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.OverlapLimit.IsInRange(NvAPIWrapper.Mosaic.Overlap)">
            <summary>
                Checks to see if the overlap values fall in to the acceptable overlap ranges
            </summary>
            <param name="overlap">The overlap values</param>
            <returns>true if the values fall into the range, otherwise false</returns>
        </member>
        <member name="T:NvAPIWrapper.Mosaic.Topology">
            <summary>
                Represents a mosaic topology
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Topology.#ctor(NvAPIWrapper.Native.Display.Structures.Resolution,System.Int32,NvAPIWrapper.Native.Mosaic.Topology,NvAPIWrapper.Mosaic.Overlap)">
            <summary>
                Creates a new Topology
            </summary>
            <param name="resolution">Mosaic displays resolution</param>
            <param name="frequency">Mosaic displays frequency</param>
            <param name="topology">Topology arrangement</param>
            <param name="overlap">Mosaic overlap</param>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Topology.#ctor(NvAPIWrapper.Native.Display.Structures.Resolution,System.Int32,System.UInt32,NvAPIWrapper.Native.Mosaic.Topology,NvAPIWrapper.Mosaic.Overlap)">
            <summary>
                Creates a new Topology
            </summary>
            <param name="resolution">>Mosaic displays resolution</param>
            <param name="frequency">Mosaic frequency</param>
            <param name="frequencyInMillihertz">Mosaic frequency x 1000</param>
            <param name="topology">Topology arrangement</param>
            <param name="overlap">Mosaic overlap</param>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.Topology.Frequency">
            <summary>
                Gets the mosaic displays frequency
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.Topology.FrequencyInMillihertz">
            <summary>
                Gets the mosaic displays frequency x 1000 (Millihertz)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.Topology.Overlap">
            <summary>
                Gets the topology overlap
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.Topology.Resolution">
            <summary>
                Gets the mosaic displays resolution
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.Topology.TopologyMode">
            <summary>
                Gets the topology arrangement
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Topology.Equals(NvAPIWrapper.Mosaic.Topology)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Topology.DisableCurrent">
            <summary>
                Disables the current topology
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Topology.EnableCurrent">
            <summary>
                Enables the current topology
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Topology.GetCurrentTopology">
            <summary>
                Returns the current topology settings
            </summary>
            <returns>The current Topology object</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Topology.GetSupportedTopologyModes(NvAPIWrapper.Native.Mosaic.TopologyType)">
            <summary>
                Retrieves all the supported topology modes that are now possible to apply
            </summary>
            <param name="type">The type of the topology mode to limit quary</param>
            <returns>An array of Topology modes</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Topology.GetSupportedTopologySettings(NvAPIWrapper.Native.Mosaic.TopologyType)">
            <summary>
                Retrieves all the supported display settings
            </summary>
            <param name="type">The type of the topology mode to limit quary</param>
            <returns>An array of IDisplaySettings implamented objects</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Topology.IsCurrentTopologyEnabled">
            <summary>
                Indicates if the current topology is now active
            </summary>
            <returns>true if the current topology is now enable, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Topology.IsCurrentTopologyPossible">
            <summary>
                Indicates if the current topology is possible to apply
            </summary>
            <returns>true if the current topology is possible to apply, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Topology.op_Equality(NvAPIWrapper.Mosaic.Topology,NvAPIWrapper.Mosaic.Topology)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Topology.op_Inequality(NvAPIWrapper.Mosaic.Topology,NvAPIWrapper.Mosaic.Topology)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Topology.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Topology.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Topology.GetDetails">
            <summary>
                Retrieves topology details
            </summary>
            <returns>An array of TopologyDetails</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Topology.GetDisplaySettingsV1">
            <summary>
                Creates and fills a DisplaySettingsV1 object
            </summary>
            <returns>The newly created DisplaySettingsV1 object</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Topology.GetDisplaySettingsV2">
            <summary>
                Creates and fills a DisplaySettingsV2 object
            </summary>
            <returns>The newly created DisplaySettingsV2 object</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Topology.GetOverlapLimits">
            <summary>
                Retrieve the topology overlap limits
            </summary>
            <returns></returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Topology.GetTopologyBrief">
            <summary>
                Creates and fills a TopologyBrief object
            </summary>
            <returns>The newly created TopologyBrief object</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.Topology.SetAsCurrentTopology(System.Boolean)">
            <summary>
                Sets this topology as the current topology
            </summary>
            <param name="apply">if true, will apply the topology right now</param>
        </member>
        <member name="T:NvAPIWrapper.Mosaic.TopologyDetails">
            <summary>
                Holds extra information about a topology
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.TopologyDetails.Columns">
            <summary>
                Gets the number of columns in the topology
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.TopologyDetails.Displays">
            <summary>
                Gets the list of topology displays
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.TopologyDetails.LogicalGPU">
            <summary>
                Gets the logical GPU in charge of controling the topology
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.TopologyDetails.Rows">
            <summary>
                Gets the number of rows in the topology
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.TopologyDetails.ValidityFlags">
            <summary>
                Gets the validity status of this topology
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.TopologyDetails.Equals(NvAPIWrapper.Mosaic.TopologyDetails)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Mosaic.TopologyDetails.op_Equality(NvAPIWrapper.Mosaic.TopologyDetails,NvAPIWrapper.Mosaic.TopologyDetails)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.TopologyDetails.op_Inequality(NvAPIWrapper.Mosaic.TopologyDetails,NvAPIWrapper.Mosaic.TopologyDetails)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.TopologyDetails.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Mosaic.TopologyDetails.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Mosaic.TopologyDisplay">
            <summary>
                Holds information about a display in a topology
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.TopologyDisplay.Output">
            <summary>
                Gets the GPU output used for this display
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.TopologyDisplay.Overlap">
            <summary>
                Gets the display overlap values
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Mosaic.TopologyDisplay.PhysicalGPU">
            <summary>
                Gets the corresponding physical GPU of this display
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.TopologyDisplay.Equals(NvAPIWrapper.Mosaic.TopologyDisplay)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Mosaic.TopologyDisplay.op_Equality(NvAPIWrapper.Mosaic.TopologyDisplay,NvAPIWrapper.Mosaic.TopologyDisplay)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.TopologyDisplay.op_Inequality(NvAPIWrapper.Mosaic.TopologyDisplay,NvAPIWrapper.Mosaic.TopologyDisplay)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Mosaic.TopologyDisplay.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Mosaic.TopologyDisplay.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.DisplayApi">
            <summary>
                Contains display and display control static functions
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.ColorControl``1(System.UInt32,``0@)">
            <summary>
                This API controls the display color configurations.
            </summary>
            <param name="displayId">The targeted display id.</param>
            <param name="colorData">The structure to be filled with information requested or applied on the display.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.ColorControl(System.UInt32,NvAPIWrapper.Native.Interfaces.Display.IColorData@)">
            <summary>
                This API controls the display color configurations.
            </summary>
            <param name="displayId">The targeted display id.</param>
            <param name="colorData">The structure to be filled with information requested or applied on the display.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.ColorControl(System.UInt32,NvAPIWrapper.Native.Interfaces.Display.IColorData[])">
            <summary>
                This API controls the display color configurations.
            </summary>
            <param name="displayId">The targeted display id.</param>
            <param name="colorDatas">The list of structures to be filled with information requested or applied on the display.</param>
            <returns>The structure that succeed in requesting information or used for applying configuration on the display.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.CreateDisplayFromUnAttachedDisplay(NvAPIWrapper.Native.Display.Structures.UnAttachedDisplayHandle)">
            <summary>
                This function converts the unattached display handle to an active attached display handle.
                At least one GPU must be present in the system and running an NVIDIA display driver.
            </summary>
            <param name="display">An unattached display handle to convert.</param>
            <returns>Display handle of newly created display.</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: Invalid UnAttachedDisplayHandle handle.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.DeleteCustomDisplay(System.UInt32[],NvAPIWrapper.Native.Display.Structures.CustomDisplay)">
            <summary>
                This function deletes the custom display configuration, specified from the registry for all the displays whose
                display IDs are passed.
            </summary>
            <param name="displayIds">Array of display IDs on which custom display configuration should be removed.</param>
            <param name="customDisplay">The custom display to remove.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.EnumCustomDisplays(System.UInt32)">
            <summary>
                This API enumerates the custom timing specified by the enum index.
            </summary>
            <param name="displayId">The display id of the display.</param>
            <returns>A list of <see cref="T:NvAPIWrapper.Native.Display.Structures.CustomDisplay" /></returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.EnumNvidiaDisplayHandle">
            <summary>
                This function returns the handle of all NVIDIA displays
                Note: Display handles can get invalidated on a mode-set, so the calling applications need to re-enum the handles
                after every mode-set.
            </summary>
            <returns>Array of display handles.</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA device found in the system</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.EnumNvidiaUnAttachedDisplayHandle">
            <summary>
                This function returns the handle of all unattached NVIDIA displays
                Note: Display handles can get invalidated on a mode-set, so the calling applications need to re-enum the handles
                after every mode-set.
            </summary>
            <returns>Array of unattached display handles.</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA device found in the system</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetAssociatedDisplayOutputId(NvAPIWrapper.Native.Display.Structures.DisplayHandle)">
            <summary>
                This function gets the active outputId associated with the display handle.
            </summary>
            <param name="display">
                NVIDIA Display selection. It can be DisplayHandle.DefaultHandle or a handle enumerated from
                DisplayApi.EnumNVidiaDisplayHandle().
            </param>
            <returns>
                The active display output ID associated with the selected display handle hNvDisplay. The output id will have
                only one bit set. In the case of Clone or Span mode, this will indicate the display outputId of the primary display
                that the GPU is driving.
            </returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedDisplayHandle: display is not a valid display handle.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetAssociatedNvidiaDisplayHandle(System.String)">
            <summary>
                This function returns the handle of the NVIDIA display that is associated with the given display "name" (such as
                "\\.\DISPLAY1").
            </summary>
            <param name="name">Display name</param>
            <returns>Display handle of associated display</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: Display name is null.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA device maps to that display name.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetAssociatedNvidiaDisplayName(NvAPIWrapper.Native.Display.Structures.DisplayHandle)">
            <summary>
                For a given NVIDIA display handle, this function returns a string (such as "\\.\DISPLAY1") to identify the display.
            </summary>
            <param name="display">Handle of the associated display</param>
            <returns>Name of the display</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: Display handle is null.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA device maps to that display name.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetAssociatedUnAttachedNvidiaDisplayHandle(System.String)">
            <summary>
                This function returns the handle of an unattached NVIDIA display that is associated with the given display "name"
                (such as "\\DISPLAY1").
            </summary>
            <param name="name">Display name</param>
            <returns>Display handle of associated unattached display</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: Display name is null.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA device maps to that display name.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetDisplayConfig">
            <summary>
                This API lets caller retrieve the current global display configuration.
                Note: User should dispose all returned PathInfo objects
            </summary>
            <returns>Array of path information</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIANotSupportedException">This operation is not supported.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: Invalid input parameter.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.DeviceBusy: ModeSet has not yet completed. Please wait and call it again.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetDisplayDriverBuildTitle(NvAPIWrapper.Native.Display.Structures.DisplayHandle)">
            <summary>
                Gets the build title of the Driver Settings Database for a display
            </summary>
            <param name="displayHandle">The display handle to get DRS build title.</param>
            <returns>The DRS build title.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetDisplayDriverMemoryInfo(NvAPIWrapper.Native.Display.Structures.DisplayHandle)">
            <summary>
                This function retrieves the available driver memory footprint for the GPU associated with a display.
            </summary>
            <param name="displayHandle">Handle of the display for which the memory information of its GPU is to be extracted.</param>
            <returns>The memory footprint available in the driver.</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIANotSupportedException">This operation is not supported.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetDisplayIdByDisplayName(System.String)">
            <summary>
                This API retrieves the Display Id of a given display by display name. The display must be active to retrieve the
                displayId. In the case of clone mode or Surround gaming, the primary or top-left display will be returned.
            </summary>
            <param name="displayName">Name of display (Eg: "\\DISPLAY1" to retrieve the displayId for.</param>
            <returns>Display ID of the requested display.</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: One or more args passed in are invalid.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ApiNotInitialized: The NvAPI API needs to be initialized first</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NoImplementation: This entry-point not available</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: Miscellaneous error occurred</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetDVCInfo(NvAPIWrapper.Native.Display.Structures.DisplayHandle)">
            [PRIVATE]
            <summary>
                This API returns the current saturation level from the Digital Vibrance Control
            </summary>
            <param name="display">
                The targeted display's handle.
            </param>
            <returns>An instance of the PrivateDisplayDVCInfo structure containing requested information.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetDVCInfo(NvAPIWrapper.Native.GPU.OutputId)">
            [PRIVATE]
            <summary>
                This API returns the current saturation level from the Digital Vibrance Control
            </summary>
            <param name="displayId">
                The targeted display output id.
            </param>
            <returns>An instance of the PrivateDisplayDVCInfo structure containing requested information.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetDVCInfoEx(NvAPIWrapper.Native.Display.Structures.DisplayHandle)">
            [PRIVATE]
            <summary>
                This API returns the current and the default saturation level from the Digital Vibrance Control.
                The difference between this API and the 'GetDVCInfo()' includes the possibility to get the default
                saturation level as well as to query under saturated configurations.
            </summary>
            <param name="display">
                The targeted display's handle.
            </param>
            <returns>An instance of the PrivateDisplayDVCInfoEx structure containing requested information.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetDVCInfoEx(NvAPIWrapper.Native.GPU.OutputId)">
            [PRIVATE]
            <summary>
                This API returns the current and the default saturation level from the Digital Vibrance Control.
                The difference between this API and the 'GetDVCInfo()' includes the possibility to get the default
                saturation level as well as to query under saturated configurations.
            </summary>
            <param name="displayId">
                The targeted display output id.
            </param>
            <returns>An instance of the PrivateDisplayDVCInfoEx structure containing requested information.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetHDMISupportInfo(NvAPIWrapper.Native.Display.Structures.DisplayHandle,NvAPIWrapper.Native.GPU.OutputId)">
            <summary>
                This API returns the current info-frame data on the specified device (monitor).
            </summary>
            <param name="displayHandle">The display handle of the device to retrieve HDMI support information for.</param>
            <param name="outputId">The target display's output id, or <see cref="F:NvAPIWrapper.Native.GPU.OutputId.Invalid"/> to determine automatically.</param>
            <returns>An instance of a type implementing the <see cref="T:NvAPIWrapper.Native.Interfaces.Display.IHDMISupportInfo" /> interface.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetHDMISupportInfo(System.UInt32)">
            <summary>
                This API returns the current info-frame data on the specified device (monitor).
            </summary>
            <param name="displayId">The display id of the device to retrieve HDMI support information for.</param>
            <returns>An instance of a type implementing the <see cref="T:NvAPIWrapper.Native.Interfaces.Display.IHDMISupportInfo" /> interface.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetHUEInfo(NvAPIWrapper.Native.Display.Structures.DisplayHandle)">
            [PRIVATE]
            <summary>
                This API returns the current default HUE angle
            </summary>
            <param name="display">
                The targeted display's handle.
            </param>
            <returns>An instance of the PrivateDisplayHUEInfo structure containing requested information.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetHUEInfo(NvAPIWrapper.Native.GPU.OutputId)">
            [PRIVATE]
            <summary>
                This API returns the current and default HUE angle
            </summary>
            <param name="displayId">
                The targeted display output id.
            </param>
            <returns>An instance of the PrivateDisplayHUEInfo structure containing requested information.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetMonitorCapabilities(System.UInt32,NvAPIWrapper.Native.Display.MonitorCapabilitiesType)">
            <summary>
                This API returns all the monitor capabilities.
            </summary>
            <param name="displayId">The target display id.</param>
            <param name="capabilitiesType">The type of capabilities requested.</param>
            <returns>An instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.MonitorCapabilities" />.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetMonitorColorCapabilities(System.UInt32)">
            <summary>
                This API returns all the color formats and bit depth values supported by a given display port monitor.
            </summary>
            <param name="displayId">The target display id.</param>
            <returns>A list of <see cref="T:NvAPIWrapper.Native.Display.Structures.MonitorColorData" /> instances.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetGDIPrimaryDisplayId">
            <summary>
                This API returns the Display ID of the GDI Primary.
            </summary>
            <returns>Display ID of the GDI Primary.</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: GDI Primary not on an NVIDIA GPU.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ApiNotInitialized: The NvAPI API needs to be initialized first</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NoImplementation: This entry-point not available</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: Miscellaneous error occurred</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetHDRCapabilities(System.UInt32,System.Boolean)">
            <summary>
                This API gets High Dynamic Range (HDR) capabilities of the display.
            </summary>
            <param name="displayId">The targeted display id.</param>
            <param name="driverExpandDefaultHDRParameters">
                A boolean value indicating if the EDID HDR parameters should be expanded (true) or the actual current HDR
                parameters should be reported (false).
            </param>
            <returns>HDR capabilities of the display</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetScanOutCompositionParameter(System.UInt32,NvAPIWrapper.Native.Display.ScanOutCompositionParameter,System.Single@)">
            <summary>
                This API queries current state of one of the various scan-out composition parameters on the specified display.
            </summary>
            <param name="displayId">Combined physical display and GPU identifier of the display to query the configuration.</param>
            <param name="parameter">Scan-out composition parameter to by queried.</param>
            <param name="container">Additional container containing the returning data associated with the specified parameter.</param>
            <returns>Scan-out composition parameter value.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetScanOutConfiguration(System.UInt32)">
            <summary>
                This API queries the desktop and scan-out portion of the specified display.
            </summary>
            <param name="displayId">Combined physical display and GPU identifier of the display to query the configuration.</param>
            <returns>Desktop area to displayId mapping information.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetScanOutConfiguration(System.UInt32,NvAPIWrapper.Native.General.Structures.Rectangle@,NvAPIWrapper.Native.General.Structures.Rectangle@)">
            <summary>
                This API queries the desktop and scan-out portion of the specified display.
            </summary>
            <param name="displayId">Combined physical display and GPU identifier of the display to query the configuration.</param>
            <param name="desktopRectangle">Desktop area of the display in desktop coordinates.</param>
            <param name="scanOutRectangle">Scan-out area of the display relative to desktopRect.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetScanOutIntensityState(System.UInt32)">
            <summary>
                This API queries current state of the intensity feature on the specified display.
            </summary>
            <param name="displayId">Combined physical display and GPU identifier of the display to query the configuration.</param>
            <returns>Intensity state data.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetScanOutWarpingState(System.UInt32)">
            <summary>
                This API queries current state of the warping feature on the specified display.
            </summary>
            <param name="displayId">Combined physical display and GPU identifier of the display to query the configuration.</param>
            <returns>The warping state data.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetSupportedViews(NvAPIWrapper.Native.Display.Structures.DisplayHandle)">
            <summary>
                This API lets caller enumerate all the supported NVIDIA display views - nView and DualView modes.
            </summary>
            <param name="display">
                NVIDIA Display selection. It can be DisplayHandle.DefaultHandle or a handle enumerated from
                DisplayApi.EnumNVidiaDisplayHandle().
            </param>
            <returns>Array of supported views.</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIANotSupportedException">This operation is not supported.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: Miscellaneous error occurred</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: Invalid input parameter.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetTiming(System.UInt32,NvAPIWrapper.Native.Display.Structures.TimingInput)">
            <summary>
                This function calculates the timing from the visible width/height/refresh-rate and timing type info.
            </summary>
            <param name="displayId">Display ID of the display.</param>
            <param name="timingInput">Inputs used for calculating the timing.</param>
            <returns>An instance of the <see cref="T:NvAPIWrapper.Native.Display.Structures.Timing" /> structure.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.GetUnAttachedAssociatedDisplayName(NvAPIWrapper.Native.Display.Structures.UnAttachedDisplayHandle)">
            <summary>
                This function returns the display name given, for example, "\\DISPLAY1", using the unattached NVIDIA display handle
            </summary>
            <param name="display">Handle of the associated unattached display</param>
            <returns>Name of the display</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: Display handle is null.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA device maps to that display name.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.InfoFrameControl(System.UInt32,NvAPIWrapper.Native.Display.Structures.InfoFrameData@)">
            <summary>
                This API controls the InfoFrame values.
            </summary>
            <param name="displayId">The targeted display id.</param>
            <param name="infoFrameData">The structure to be filled with information requested or applied on the display.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.RevertCustomDisplayTrial(System.UInt32[])">
            <summary>
                This API is used to restore the display configuration, that was changed by calling <see cref="M:NvAPIWrapper.Native.DisplayApi.TryCustomDisplay(System.Collections.Generic.IDictionary{System.UInt32,NvAPIWrapper.Native.Display.Structures.CustomDisplay})" />.
                This function must be called only after a custom display configuration is tested on the hardware, using
                <see cref="M:NvAPIWrapper.Native.DisplayApi.TryCustomDisplay(System.Collections.Generic.IDictionary{System.UInt32,NvAPIWrapper.Native.Display.Structures.CustomDisplay})" />, otherwise no action is taken.
                On Vista, <see cref="M:NvAPIWrapper.Native.DisplayApi.RevertCustomDisplayTrial(System.UInt32[])" /> should be called with an active display that was affected during
                the <see cref="M:NvAPIWrapper.Native.DisplayApi.TryCustomDisplay(System.Collections.Generic.IDictionary{System.UInt32,NvAPIWrapper.Native.Display.Structures.CustomDisplay})" /> call, per GPU.
            </summary>
            <param name="displayIds">Array of display ids on which custom display configuration is to be reverted.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.HDRColorControl``1(System.UInt32,``0@)">
            <summary>
                This API configures High Dynamic Range (HDR) and Extended Dynamic Range (EDR) output.
            </summary>
            <param name="displayId">The targeted display id.</param>
            <param name="hdrColorData">The structure to be filled with information requested or applied on the display.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.HDRColorControl(System.UInt32,NvAPIWrapper.Native.Interfaces.Display.IHDRColorData@)">
            <summary>
                This API configures High Dynamic Range (HDR) and Extended Dynamic Range (EDR) output.
            </summary>
            <param name="displayId">The targeted display id.</param>
            <param name="hdrColorData">The structure to be filled with information requested or applied on the display.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.SaveCustomDisplay(System.UInt32[],System.Boolean,System.Boolean)">
            <summary>
                This function saves the current hardware display configuration on the specified Display IDs as a custom display
                configuration.
                This function should be called right after <see cref="M:NvAPIWrapper.Native.DisplayApi.TryCustomDisplay(System.Collections.Generic.IDictionary{System.UInt32,NvAPIWrapper.Native.Display.Structures.CustomDisplay})" /> to save the custom display from the
                current hardware context.
                This function will not do anything if the custom display configuration is not tested on the hardware.
            </summary>
            <param name="displayIds">Array of display ids on which custom display configuration is to be saved.</param>
            <param name="isThisOutputIdOnly">
                If set, the saved custom display will only be applied on the monitor with the same
                outputId.
            </param>
            <param name="isThisMonitorOnly">
                If set, the saved custom display will only be applied on the monitor with the same EDID
                ID or the same TV connector in case of analog TV.
            </param>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.HDRColorControl(System.UInt32,NvAPIWrapper.Native.Interfaces.Display.IHDRColorData[])">
            <summary>
                This API configures High Dynamic Range (HDR) and Extended Dynamic Range (EDR) output.
            </summary>
            <param name="displayId">The targeted display id.</param>
            <param name="colorDatas">The list of structures to be filled with information requested or applied on the display.</param>
            <returns>The structure that succeed in requesting information or used for applying configuration on the display.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.SetDisplayConfig(NvAPIWrapper.Native.Interfaces.Display.IPathInfo[],NvAPIWrapper.Native.Display.DisplayConfigFlags)">
            <summary>
                This API lets caller apply a global display configuration across multiple GPUs.
                If all sourceIds are zero, then NvAPI will pick up sourceId's based on the following criteria :
                - If user provides SourceModeInfo then we are trying to assign 0th SourceId always to GDIPrimary.
                This is needed since active windows always moves along with 0th sourceId.
                - For rest of the paths, we are incrementally assigning the SourceId per adapter basis.
                - If user doesn't provide SourceModeInfo then NVAPI just picks up some default SourceId's in incremental order.
                Note : NVAPI will not intelligently choose the SourceIDs for any configs that does not need a mode-set.
            </summary>
            <param name="pathInfos">Array of path information</param>
            <param name="flags">Flags for applying settings</param>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIANotSupportedException">This operation is not supported.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ApiNotInitialized: NVAPI not initialized</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: Miscellaneous error occurred</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: Invalid input parameter.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.SetDVCLevel(NvAPIWrapper.Native.Display.Structures.DisplayHandle,System.Int32)">
            [PRIVATE]
            <summary>
                This API sets the current saturation level for the Digital Vibrance Control
            </summary>
            <param name="display">
                The targeted display's handle.
            </param>
            <param name="currentLevel">
                The saturation level to be set.
            </param>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.SetDVCLevel(NvAPIWrapper.Native.GPU.OutputId,System.Int32)">
            [PRIVATE]
            <summary>
                This API sets the current saturation level for the Digital Vibrance Control
            </summary>
            <param name="displayId">
                The targeted display output id.
            </param>
            <param name="currentLevel">
                The saturation level to be set.
            </param>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.SetDVCLevelEx(NvAPIWrapper.Native.Display.Structures.DisplayHandle,System.Int32)">
            [PRIVATE]
            <summary>
                This API sets the current saturation level for the Digital Vibrance Control.
                The difference between this API and the 'SetDVCLevel()' includes the possibility to set under saturated
                levels.
            </summary>
            <param name="display">
                The targeted display's handle.
            </param>
            <param name="currentLevel">
                The saturation level to be set.
            </param>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.SetDVCLevelEx(NvAPIWrapper.Native.GPU.OutputId,System.Int32)">
            [PRIVATE]
            <summary>
                This API sets the current saturation level for the Digital Vibrance Control.
                The difference between this API and the 'SetDVCLevel()' includes the possibility to set under saturated
                levels.
            </summary>
            <param name="displayId">
                The targeted display output id.
            </param>
            <param name="currentLevel">
                The saturation level to be set.
            </param>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.SetHUEAngle(NvAPIWrapper.Native.Display.Structures.DisplayHandle,System.Int32)">
            [PRIVATE]
            <summary>
                This API sets the current HUE angle
            </summary>
            <param name="display">
                The targeted display's handle.
            </param>
            <param name="currentAngle">
                The HUE angle to be set.
            </param>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.SetHUEAngle(NvAPIWrapper.Native.GPU.OutputId,System.Int32)">
            [PRIVATE]
            <summary>
                This API sets the current HUE angle
            </summary>
            <param name="displayId">
                The targeted display output id.
            </param>
            <param name="currentAngle">
                The HUE angle to be set.
            </param>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.SetRefreshRateOverride(NvAPIWrapper.Native.Display.Structures.DisplayHandle,System.Single,System.Boolean)">
            <summary>
                This function overrides the refresh rate on the given display.
                The new refresh rate can be applied right away in this API call or deferred to be applied with the next OS
                mode-set.
                The override is good for only one mode-set (regardless whether it's deferred or immediate).
            </summary>
            <param name="display">The display handle to override refresh rate of.</param>
            <param name="refreshRate">The override refresh rate.</param>
            <param name="isDeferred">
                A boolean value indicating if the refresh rate override should be deferred to the next OS
                mode-set.
            </param>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.SetRefreshRateOverride(NvAPIWrapper.Native.GPU.OutputId,System.Single,System.Boolean)">
            <summary>
                This function overrides the refresh rate on the given output mask.
                The new refresh rate can be applied right away in this API call or deferred to be applied with the next OS
                mode-set.
                The override is good for only one mode-set (regardless whether it's deferred or immediate).
            </summary>
            <param name="outputMask">The output(s) to override refresh rate of.</param>
            <param name="refreshRate">The override refresh rate.</param>
            <param name="isDeferred">
                A boolean value indicating if the refresh rate override should be deferred to the next OS
                mode-set.
            </param>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.SetScanOutCompositionParameter(System.UInt32,NvAPIWrapper.Native.Display.ScanOutCompositionParameter,NvAPIWrapper.Native.Display.ScanOutCompositionParameterValue,System.Single@)">
            <summary>
                This API sets various parameters that configure the scan-out composition feature on the specified display.
            </summary>
            <param name="displayId">Combined physical display and GPU identifier of the display to apply the intensity control.</param>
            <param name="parameter">The scan-out composition parameter to be set.</param>
            <param name="parameterValue">The value to be set for the specified parameter.</param>
            <param name="container">Additional container for data associated with the specified parameter.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.SetScanOutIntensity(System.UInt32,NvAPIWrapper.Native.Display.Structures.IScanOutIntensity,System.Boolean@)">
            <summary>
                This API enables and sets up per-pixel intensity feature on the specified display.
            </summary>
            <param name="displayId">Combined physical display and GPU identifier of the display to apply the intensity control.</param>
            <param name="scanOutIntensity">The intensity texture info.</param>
            <param name="isSticky">Indicates whether the settings will be kept over a reboot.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.SetScanOutWarping(System.UInt32,System.Nullable{NvAPIWrapper.Native.Display.Structures.ScanOutWarpingV1},System.Int32@,System.Boolean@)">
            <summary>
                This API enables and sets up the warping feature on the specified display.
            </summary>
            <param name="displayId">Combined physical display and GPU identifier of the display to apply the intensity control.</param>
            <param name="scanOutWarping">The warping data info.</param>
            <param name="maximumNumberOfVertices">The maximum number of vertices.</param>
            <param name="isSticky">Indicates whether the settings will be kept over a reboot.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DisplayApi.TryCustomDisplay(System.Collections.Generic.IDictionary{System.UInt32,NvAPIWrapper.Native.Display.Structures.CustomDisplay})">
            <summary>
                This API is used to set up a custom display without saving the configuration on multiple displays.
            </summary>
            <param name="displayIdCustomDisplayPairs">A list of display ids with corresponding custom display instances.</param>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.ColorDataColorimetry">
            <summary>
                Contains possible values for color data color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataColorimetry.RGB">
            <summary>
                RGB color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataColorimetry.YCC601">
            <summary>
                YCC601 color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataColorimetry.YCC709">
            <summary>
                YCC709 color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataColorimetry.XVYCC601">
            <summary>
                XVYCC601 color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataColorimetry.XVYCC709">
            <summary>
                XVYCC709 color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataColorimetry.SYCC601">
            <summary>
                SYCC601 color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataColorimetry.ADOBEYCC601">
            <summary>
                ADOBEYCC601 color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataColorimetry.ADOBERGB">
            <summary>
                ADOBERGB color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataColorimetry.BT2020RGB">
            <summary>
                BT2020RGB color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataColorimetry.BT2020YCC">
            <summary>
                BT2020YCC color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataColorimetry.BT2020cYCC">
            <summary>
                BT2020cYCC color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataColorimetry.Default">
            <summary>
                Default color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataColorimetry.Auto">
            <summary>
                Automatically select color space
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.ColorDataCommand">
            <summary>
                Contains possible values for the color data command
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataCommand.Get">
            <summary>
                Get the current color data
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataCommand.Set">
            <summary>
                Set the current color data
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataCommand.IsSupportedColor">
            <summary>
                Check if the passed color data is supported
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataCommand.GetDefault">
            <summary>
                Get the default color data
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.ColorDataDepth">
            <summary>
                Contains possible values for the color data depth
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataDepth.Default">
            <summary>
                Default color depth meaning that the current setting should be kept
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataDepth.BPC6">
            <summary>
                6bit per color depth
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataDepth.BPC8">
            <summary>
                8bit per color depth
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataDepth.BPC10">
            <summary>
                10bit per color depth
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataDepth.BPC12">
            <summary>
                12bit per color depth
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataDepth.BPC16">
            <summary>
                16bit per color depth
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.ColorDataDesktopDepth">
            <summary>
                Contains possible values for the color data desktop color depth
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataDesktopDepth.Default">
            <summary>
                Default color depth meaning that the current setting should be kept
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataDesktopDepth.BPC8">
            <summary>
                8bit per integer color component
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataDesktopDepth.BPC10">
            <summary>
                10bit integer per color component
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataDesktopDepth.BPC16Float">
            <summary>
                16bit float per color component
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataDesktopDepth.BPC16FloatWcg">
            <summary>
                16bit float per color component wide color gamut
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataDesktopDepth.BPC16FloatHDR">
            <summary>
                16bit float per color component HDR
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.ColorDataDynamicRange">
            <summary>
                Contains possible values for color data dynamic range
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataDynamicRange.VESA">
            <summary>
                VESA standard progress signal
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataDynamicRange.CEA">
            <summary>
                CEA interlaced signal
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataDynamicRange.Auto">
            <summary>
                Automatically select the best value
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.ColorDataFormat">
            <summary>
                Contains possible color data color format values
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataFormat.RGB">
            <summary>
                RGB color format
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataFormat.YUV422">
            <summary>
                YUV422 color format
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataFormat.YUV444">
            <summary>
                YUV444 color format
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataFormat.YUV420">
            <summary>
                YUV420 color format
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataFormat.Default">
            <summary>
                Default color format
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataFormat.Auto">
            <summary>
                Automatically select the best color format
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.ColorDataHDRCommand">
            <summary>
                Contains possible values for the HDR color data command
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataHDRCommand.Get">
            <summary>
                Get the current HDR color data
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataHDRCommand.Set">
            <summary>
                Set the current HDR color data
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.ColorDataHDRMode">
            <summary>
                Contains possible color data HDR modes
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataHDRMode.Off">
            <summary>
                Turn off HDR.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataHDRMode.UHDA">
            <summary>
                Source: CCCS [a.k.a FP16 scRGB, linear, sRGB primaries, [-65504,0, 65504] range, RGB(1,1,1) = 80nits]
                Output: UHDA HDR [a.k.a HDR10, RGB/YCC 10/12bpc ST2084(PQ) EOTF RGB(1,1,1) = 10000 nits, Rec2020 color primaries,
                ST2086 static HDR metadata].
                This is the only supported production HDR mode.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataHDRMode.EDR">
            <summary>
                Source: CCCS (a.k.a FP16 scRGB)
                Output: EDR (Extended Dynamic Range) - HDR content is tone-mapped and gamut mapped to output on regular SDR display
                set to max luminance ( ~300 nits ).
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataHDRMode.SDR">
            <summary>
                Source: any
                Output: SDR (Standard Dynamic Range), we continuously send SDR EOTF InfoFrame signaling, HDMI compliance testing.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataHDRMode.UHDAPassthrough">
            <summary>
                Source: HDR10 RGB 10bpc
                Output: HDR10 RGB 10 colorDepth - signal UHDA HDR mode (PQ + Rec2020) to the sink but send source pixel values
                unmodified (no PQ or Rec2020 conversions) - assumes source is already in HDR10 format.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataHDRMode.UHDANB">
            <summary>
                Source: CCCS (a.k.a FP16 scRGB)
                Output: notebook HDR
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataHDRMode.DolbyVision">
            <summary>
                Source: RGB8 Dolby Vision encoded (12 colorDepth YCbCr422 packed into RGB8)
                Output: Dolby Vision encoded : Application is to encoded frames in DV format and embed DV dynamic metadata as
                described in Dolby Vision specification.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.ColorDataSelectionPolicy">
            <summary>
                Possible values for the color data selection policy
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataSelectionPolicy.User">
            <summary>
                Application or the Nvidia Control Panel user configuration are used to decide the best color format
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataSelectionPolicy.BestQuality">
            <summary>
                Driver or the Operating System decides the best color format
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataSelectionPolicy.Default">
            <summary>
                Default value, <see cref="F:NvAPIWrapper.Native.Display.ColorDataSelectionPolicy.BestQuality" />
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorDataSelectionPolicy.Unknown">
            <summary>
                Unknown policy
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.ColorFormat">
            <summary>
                Possible color formats
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorFormat.Unknown">
            <summary>
                Unknown, driver will choose one automatically.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorFormat.P8">
            <summary>
                8bpp mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorFormat.R5G6B5">
            <summary>
                16bpp mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorFormat.A8R8G8B8">
            <summary>
                32bpp mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ColorFormat.A16B16G16R16F">
            <summary>
                64bpp (floating point)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.DisplayConfigFlags">
            <summary>
                Flags for applying settings, used by NvAPI_DISP_SetDisplayConfig()
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.DisplayConfigFlags.None">
            <summary>
                None
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.DisplayConfigFlags.ValidateOnly">
            <summary>
                Do not apply
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.DisplayConfigFlags.SaveToPersistence">
            <summary>
                Save to the persistence storage
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.DisplayConfigFlags.DriverReloadAllowed">
            <summary>
                Driver reload is permitted if necessary
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.DisplayConfigFlags.ForceModeEnumeration">
            <summary>
                Refresh OS mode list.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.DisplayConfigFlags.ForceCommitVideoPresentNetwork">
            <summary>
                Tell OS to avoid optimizing CommitVidPn call during a modeset
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.DisplayPortColorDepth">
            <summary>
            Possible display port color depths
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.DisplayPortColorDepth.Default">
            <summary>
            Default color depth
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.DisplayPortColorDepth.BPC6">
            <summary>
            6 bit per color color depth
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.DisplayPortColorDepth.BPC8">
            <summary>
            8 bit per color color depth
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.DisplayPortColorDepth.BPC10">
            <summary>
            10 bit per color color depth
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.DisplayPortColorDepth.BPC12">
            <summary>
            12 bit per color color depth
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.DisplayPortColorDepth.BPC16">
            <summary>
            16 bit per color color depth
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.DisplayPortColorFormat">
            <summary>
                Possible display port color formats
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.DisplayPortColorFormat.RGB">
            <summary>
                RGB color format
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.DisplayPortColorFormat.YCbCr422">
            <summary>
                YCbCr422 color format
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.DisplayPortColorFormat.YCbCr444">
            <summary>
                YCbCr444 color format
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation">
            <summary>
                Contains possible audio channel allocations (speaker placements)
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FrFl">
            <summary>
                [0] Empty [1] Empty [2] Empty [3] Empty [4] Empty [5] Empty [6] Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.LfeFrFl">
            <summary>
                [0] Empty [1] Empty [2] Empty [3] Empty [4] Empty [5] Low Frequency Effects [6] Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FcFrFl">
            <summary>
                [0] Empty [1] Empty [2] Empty [3] Empty [4] Front Center [5] Empty [6] Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FcLfeFrFl">
            <summary>
                [0] Empty [1] Empty [2] Empty [3] Empty [4] Front Center [5] Low Frequency Effects [6] Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.RcFrFl">
            <summary>
                [0] Empty [1] Empty [2] Empty [3] Rear Center [4] Empty [5] Empty [6] Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.RcLfeFrFl">
            <summary>
                [0] Empty [1] Empty [2] Empty [3] Rear Center [4] Empty [5] Low Frequency Effects [6] Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.RcFcFrFl">
            <summary>
                [0] Empty [1] Empty [2] Empty [3] Rear Center [4] Front Center [5] Empty [6] Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.RcFcLfeFrFl">
            <summary>
                [0] Empty [1] Empty [2] Empty [3] Rear Center [4] Front Center [5] Low Frequency Effects [6] Front Right [7] Front
                Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.RrRlFrFl">
            <summary>
                [0] Empty [1] Empty [2] Rear Right [3] Rear Left [4] Empty [5] Empty [6] Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.RrRlLfeFrFl">
            <summary>
                [0] Empty [1] Empty [2] Rear Right [3] Rear Left [4] Empty [5] Low Frequency Effects [6] Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.RrRlFcFrFl">
            <summary>
                [0] Empty [1] Empty [2] Rear Right [3] Rear Left [4] Front Center [5] Empty [6] Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.RrRlFcLfeFrFl">
            <summary>
                [0] Empty [1] Empty [2] Rear Right [3] Rear Left [4] Front Center [5] Low Frequency Effects [6] Front Right [7]
                Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.RcRrRlFrFl">
            <summary>
                [0] Empty [1] Rear Center [2] Rear Right [3] Rear Left [4] Empty [5] Empty [6] Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.RcRrRlLfeFrFl">
            <summary>
                [0] Empty [1] Rear Center [2] Rear Right [3] Rear Left [4] Empty [5] Low Frequency Effects [6] Front Right [7]
                Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.RcRrRlFcFrFl">
            <summary>
                [0] Empty [1] Rear Center [2] Rear Right [3] Rear Left [4] Front Center [5] Empty [6] Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.RcRrRlFcLfeFrFl">
            <summary>
                [0] Empty [1] Rear Center [2] Rear Right [3] Rear Left [4] Front Center [5] Low Frequency Effects [6] Front Right
                [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.RrcRlcRrRlFrFl">
            <summary>
                [0] Rear Right Of Center [1] Rear Left Of Center [2] Rear Right [3] Rear Left [4] Empty [5] Empty [6] Front Right
                [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.RrcRlcRrRlLfeFrFl">
            <summary>
                [0] Rear Right Of Center [1] Rear Left Of Center [2] Rear Right [3] Rear Left [4] Empty [5] Low Frequency Effects
                [6] Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.RrcRlcRrRlFcFrFl">
            <summary>
                [0] Rear Right Of Center [1] Rear Left Of Center [2] Rear Right [3] Rear Left [4] Front Center [5] Empty [6] Front
                Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.RrcRlcRrRlFcLfeFrFl">
            <summary>
                [0] Rear Right Of Center [1] Rear Left Of Center [2] Rear Right [3] Rear Left [4] Front Center [5] Low Frequency
                Effects [6] Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FrcFlcFrFl">
            <summary>
                [0] Front Right Of Center [1] Front Left Of Center [2] Empty [3] Empty [4] Empty [5] Empty [6] Front Right [7]
                Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FrcFlcLfeFrFl">
            <summary>
                [0] Front Right Of Center [1] Front Left Of Center [2] Empty [3] Empty [4] Empty [5] Low Frequency Effects [6]
                Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FrcFlcFcFrFl">
            <summary>
                [0] Front Right Of Center [1] Front Left Of Center [2] Empty [3] Empty [4] Front Center [5] Empty [6] Front Right
                [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FrcFlcFcLfeFrFl">
            <summary>
                [0] Front Right Of Center [1] Front Left Of Center [2] Empty [3] Empty [4] Front Center [5] Low Frequency Effects
                [6] Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FrcFlcRcFrFl">
            <summary>
                [0] Front Right Of Center [1] Front Left Of Center [2] Empty [3] Rear Center [4] Empty [5] Empty [6] Front Right
                [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FrcFlcRcLfeFrFl">
            <summary>
                [0] Front Right Of Center [1] Front Left Of Center [2] Empty [3] Rear Center [4] Empty [5] Low Frequency Effects
                [6] Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FrcFlcRcFcFrFl">
            <summary>
                [0] Front Right Of Center [1] Front Left Of Center [2] Empty [3] Rear Center [4] Front Center [5] Empty [6] Front
                Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FrcFlcRcFcLfeFrFl">
            <summary>
                [0] Front Right Of Center [1] Front Left Of Center [2] Empty [3] Rear Center [4] Front Center [5] Low Frequency
                Effects [6] Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FrcFlcRrRlFrFl">
            <summary>
                [0] Front Right Of Center [1] Front Left Of Center [2] Rear Right [3] Rear Left [4] Empty [5] Empty [6] Front Right
                [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FrcFlcRrRlLfeFrFl">
            <summary>
                [0] Front Right Of Center [1] Front Left Of Center [2] Rear Right [3] Rear Left [4] Empty [5] Low Frequency Effects
                [6] Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FrcFlcRrRlFcFrFl">
            <summary>
                [0] Front Right Of Center [1] Front Left Of Center [2] Rear Right [3] Rear Left [4] Front Center [5] Empty [6]
                Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FrcFlcRrRlFcLfeFrFl">
            <summary>
                [0] Front Right Of Center [1] Front Left Of Center [2] Rear Right [3] Rear Left [4] Front Center [5] Low Frequency
                Effects [6] Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FchRrRlFcFrFl">
            <summary>
                [0] Empty [1] Front Center High [2] Rear Right [3] Rear Left [4] Front Center [5] Empty [6] Front Right [7] Front
                Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FchRrRlFcLfeFrFl">
            <summary>
                [0] Empty [1] Front Center High [2] Rear Right [3] Rear Left [4] Front Center [5] Low Frequency Effects [6] Front
                Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.TcRrRlFcFrFl">
            <summary>
                [0] TopCenter [1] Empty [2] Rear Right [3] Rear Left [4] Front Center [5] Empty [6] Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.TcRrRlFcLfeFrFl">
            <summary>
                [0] TopCenter [1] Empty [2] Rear Right [3] Rear Left [4] Front Center [5] Low Frequency Effects [6] Front Right [7]
                Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FrhFlhRrRlFrFl">
            <summary>
                [0] Front Right High [1] Front Left High [2] Rear Right [3] Rear Left [4] Empty [5] Empty [6] Front Right [7] Front
                Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FrhFlhRrRlLfeFrFl">
            <summary>
                [0] Front Right High [1] Front Left High [2] Rear Right [3] Rear Left [4] Empty [5] Low Frequency Effects [6] Front
                Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FrwFlwRrRlFrFl">
            <summary>
                [0] Front Right Wide [1] Front Left Wide [2] Rear Right [3] Rear Left [4] Empty [5] Empty [6] Front Right [7] Front
                Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FrwFlwRrRlLfeFrFl">
            <summary>
                [0] Front Right Wide [1] Front Left Wide [2] Rear Right [3] Rear Left [4] Empty [5] Low Frequency Effects [6] Front
                Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.TcRcRrRlFcFrFl">
            <summary>
                [0] TopCenter [1] Rear Center [2] Rear Right [3] Rear Left [4] Front Center [5] Empty [6] Front Right [7] Front
                Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.TcRcRrRlFcLfeFrFl">
            <summary>
                [0] TopCenter [1] Rear Center [2] Rear Right [3] Rear Left [4] Front Center [5] Low Frequency Effects [6] Front
                Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FchRcRrRlFcFrFl">
            <summary>
                [0] Front Center High [1] Rear Center [2] Rear Right [3] Rear Left [4] Front Center [5] Empty [6] Front Right [7]
                Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FchRcRrRlFcLfeFrFl">
            <summary>
                [0] Front Center High [1] Rear Center [2] Rear Right [3] Rear Left [4] Front Center [5] Low Frequency Effects [6]
                Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.TcFcRrRlFcFrFl">
            <summary>
                [0] TopCenter [1] Front Center High [2] Rear Right [3] Rear Left [4] Front Center [5] Empty [6] Front Right [7]
                Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.TcFchRrRlFcLfeFrFl">
            <summary>
                [0] TopCenter [1] Front Center High [2] Rear Right [3] Rear Left [4] Front Center [5] Low Frequency Effects [6]
                Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FrhFlhRrRlFcFrFl">
            <summary>
                [0] Front Right High [1] Front Left High [2] Rear Right [3] Rear Left [4] Front Center [5] Empty [6] Front Right
                [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FrhFlhRrRlFcLfeFrFl">
            <summary>
                [0] Front Right High [1] Front Left High [2] Rear Right [3] Rear Left [4] Front Center [5] Low Frequency Effects
                [6] Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FrwFlwRrRlFcFeFl">
            <summary>
                [0] Front Right Wide [1] Front Left Wide [2] Rear Right [3] Rear Left [4] Front Center [5] Empty [6] Front Right
                [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.FrwFlwRrRlFcLfeFrFl">
            <summary>
                [0] Front Right Wide [1] Front Left Wide [2] Rear Right [3] Rear Left [4] Front Center [5] Low Frequency Effects
                [6] Front Right [7] Front Left
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation.Auto">
            <summary>
                Auto (Unspecified)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameAudioChannelCount">
            <summary>
                Contains possible audio channels
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelCount.InHeader">
            <summary>
                Data is available in the header of source data
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelCount.Two">
            <summary>
                Two channels
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelCount.Three">
            <summary>
                Three channels
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelCount.Four">
            <summary>
                Four channels
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelCount.Five">
            <summary>
                Five channels
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelCount.Six">
            <summary>
                Six channels
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelCount.Seven">
            <summary>
                Seven channels
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelCount.Eight">
            <summary>
                Eight channels
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioChannelCount.Auto">
            <summary>
                Auto (Unspecified)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameAudioCodec">
            <summary>
                Contains possible audio codecs
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioCodec.InHeader">
            <summary>
                Data is available in the header of source data
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioCodec.PCM">
            <summary>
                Pulse-code modulation
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioCodec.AC3">
            <summary>
                Dolby AC-3
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioCodec.MPEG1">
            <summary>
                MPEG1
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioCodec.MP3">
            <summary>
                MP3 (MPEG-2 Audio Layer III)
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioCodec.MPEG2">
            <summary>
                MPEG2
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioCodec.AACLC">
            <summary>
                Advanced Audio Coding
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioCodec.DTS">
            <summary>
                DTS
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioCodec.ATRAC">
            <summary>
                Adaptive Transform Acoustic Coding
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioCodec.DSD">
            <summary>
                Direct Stream Digital
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioCodec.EAC3">
            <summary>
                Dolby Digital Plus
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioCodec.DTSHD">
            <summary>
                DTS High Definition
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioCodec.MLP">
            <summary>
                Meridian Lossless Packing
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioCodec.DST">
            <summary>
                DST
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioCodec.WMAPRO">
            <summary>
                Windows Media Audio Pro
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioCodec.UseExtendedCodecType">
            <summary>
                Extended audio codec value should be used to get information regarding audio codec
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioCodec.Auto">
            <summary>
                Auto (Unspecified)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameAudioExtendedCodec">
            <summary>
                Contains possible extended audio codecs
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioExtendedCodec.UseCodecType">
            <summary>
                Use the primary audio codec type, data not available
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioExtendedCodec.HEAAC">
            <summary>
                High-Efficiency Advanced Audio Coding
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioExtendedCodec.HEAACVersion2">
            <summary>
                High-Efficiency Advanced Audio Coding 2
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioExtendedCodec.MPEGSurround">
            <summary>
                MPEG Surround
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioExtendedCodec.Auto">
            <summary>
                Auto (Unspecified)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameAudioLevelShift">
            <summary>
                Contains possible audio channel level shift values
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioLevelShift.Shift0Decibel">
            <summary>
                No change to the source audio
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioLevelShift.Shift1Decibel">
            <summary>
                Shifts 1 decibel
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioLevelShift.Shift2Decibel">
            <summary>
                Shifts 2 decibel
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioLevelShift.Shift3Decibel">
            <summary>
                Shifts 3 decibel
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioLevelShift.Shift4Decibel">
            <summary>
                Shifts 4 decibel
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioLevelShift.Shift5Decibel">
            <summary>
                Shifts 5 decibel
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioLevelShift.Shift6Decibel">
            <summary>
                Shifts 6 decibel
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioLevelShift.Shift7Decibel">
            <summary>
                Shifts 7 decibel
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioLevelShift.Shift8Decibel">
            <summary>
                Shifts 8 decibel
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioLevelShift.Shift9Decibel">
            <summary>
                Shifts 9 decibel
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioLevelShift.Shift10Decibel">
            <summary>
                Shifts 10 decibel
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioLevelShift.Shift11Decibel">
            <summary>
                Shifts 11 decibel
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioLevelShift.Shift12Decibel">
            <summary>
                Shifts 12 decibel
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioLevelShift.Shift13Decibel">
            <summary>
                Shifts 13 decibel
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioLevelShift.Shift14Decibel">
            <summary>
                Shifts 14 decibel
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioLevelShift.Shift15Decibel">
            <summary>
                Shifts 15 decibel
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioLevelShift.Auto">
            <summary>
                Auto (Unspecified)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameAudioLFEPlaybackLevel">
            <summary>
                Contains possible audio low frequency effects channel playback level
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioLFEPlaybackLevel.NoData">
            <summary>
                Data not available
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioLFEPlaybackLevel.Plus0Decibel">
            <summary>
                No change to the source audio
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioLFEPlaybackLevel.Plus10Decibel">
            <summary>
                Adds 10 decibel
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioLFEPlaybackLevel.Auto">
            <summary>
                Auto (Unspecified)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameAudioSampleRate">
            <summary>
                Contains possible audio sample rates (sampling frequency)
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioSampleRate.InHeader">
            <summary>
                Data is available in the header of source data
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioSampleRate.F32000Hz">
            <summary>
                31kHz sampling frequency
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioSampleRate.F44100Hz">
            <summary>
                44.1kHz sampling frequency
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioSampleRate.F48000Hz">
            <summary>
                48kHz sampling frequency
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioSampleRate.F88200Hz">
            <summary>
                88.2kHz sampling frequency
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioSampleRate.F96000Hz">
            <summary>
                96kHz sampling frequency
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioSampleRate.F176400Hz">
            <summary>
                176.4kHz sampling frequency
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioSampleRate.F192000Hz">
            <summary>
                192kHz sampling frequency
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioSampleRate.Auto">
            <summary>
                Auto (Unspecified)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameAudioSampleSize">
            <summary>
                Contains possible audio sample size (bit depth)
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioSampleSize.InHeader">
            <summary>
                Data is available in the header of source data
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioSampleSize.B16">
            <summary>
                16bit audio sample size
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioSampleSize.B20">
            <summary>
                20bit audio sample size
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioSampleSize.B24">
            <summary>
                24bit audio sample size
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameAudioSampleSize.Auto">
            <summary>
                Auto (Unspecified)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameBoolean">
            <summary>
                Contains possible values for info-frame properties that accept or return a boolean value
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameBoolean.False">
            <summary>
                False
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameBoolean.True">
            <summary>
                True
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameBoolean.Auto">
            <summary>
                Auto (Unspecified)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameCommand">
            <summary>
                Possible commands for info-frame operations
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameCommand.GetDefault">
            <summary>
                Returns the fields in the info-frame with values set by the manufacturer (NVIDIA or OEM)
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameCommand.Reset">
            <summary>
                Sets the fields in the info-frame to auto, and info-frame to the default info-frame for use in a set.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameCommand.Get">
            <summary>
                Get the current info-frame state.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameCommand.Set">
            <summary>
                Set the current info-frame state (flushed to the monitor), the values are one time and do not persist.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameCommand.GetOverride">
            <summary>
                Get the override info-frame state, non-override fields will be set to value = AUTO, overridden fields will have the
                current override values.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameCommand.SetOverride">
            <summary>
                Set the override info-frame state, non-override fields will be set to value = AUTO, other values indicate override;
                persist across mode-set and reboot.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameCommand.GetProperty">
            <summary>
                Get properties associated with info-frame (each of the info-frame type will have properties).
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameCommand.SetProperty">
            <summary>
                Set properties associated with info-frame.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameDataType">
            <summary>
                Contains possible info-frame data type
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameDataType.AuxiliaryVideoInformation">
            <summary>
                Auxiliary Video data
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameDataType.AudioInformation">
            <summary>
                Audio data
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFramePropertyMode">
            <summary>
                Contains possible info-frame property modes
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFramePropertyMode.Auto">
            <summary>
                Driver determines whether to send info-frames.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFramePropertyMode.Enable">
            <summary>
                Driver always sends info-frame.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFramePropertyMode.Disable">
            <summary>
                Driver never sends info-frame.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFramePropertyMode.AllowOverride">
            <summary>
                Driver only sends info-frame when client requests it via info-frame escape call.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameVideoAspectRatioActivePortion">
            <summary>
                Contains possible values for AVI aspect ratio portions
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoAspectRatioActivePortion.Disabled">
            <summary>
                Disabled or not available
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoAspectRatioActivePortion.LetterboxGreaterThan16X9">
            <summary>
                Letter box 16x9
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoAspectRatioActivePortion.EqualCodedFrame">
            <summary>
                Equal to the source frame size
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoAspectRatioActivePortion.Center4X3">
            <summary>
                Centered 4x3 ratio
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoAspectRatioActivePortion.Center16X9">
            <summary>
                Centered 16x9 ratio
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoAspectRatioActivePortion.Center14X9">
            <summary>
                Centered 14x9 ratio
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoAspectRatioActivePortion.Bordered4X3On14X9">
            <summary>
                Bordered 4x3 on 14x9
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoAspectRatioActivePortion.Bordered16X9On14X9">
            <summary>
                Bordered 16x9 on 14x9
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoAspectRatioActivePortion.Bordered16X9On4X3">
            <summary>
                Bordered 16x9 on 4x3
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoAspectRatioActivePortion.Auto">
            <summary>
                Auto (Unspecified)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameVideoAspectRatioCodedFrame">
            <summary>
                Gets the possible values for AVI source aspect ratio
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoAspectRatioCodedFrame.NoData">
            <summary>
                No data available
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoAspectRatioCodedFrame.Aspect4X3">
            <summary>
                The 4x3 aspect ratio
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoAspectRatioCodedFrame.Aspect16X9">
            <summary>
                The 16x9 aspect ratio
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoAspectRatioCodedFrame.Auto">
            <summary>
                Auto (Unspecified)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameVideoBarData">
            <summary>
                Contains possible AVI bar data that are available and should be used
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoBarData.NotPresent">
            <summary>
                No bar data present
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoBarData.Vertical">
            <summary>
                Vertical bar
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoBarData.Horizontal">
            <summary>
                Horizontal bar
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoBarData.Both">
            <summary>
                Both sides have bars
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoBarData.Auto">
            <summary>
                Auto (Unspecified)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameVideoColorFormat">
            <summary>
                Contains possible AVI color formats
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoColorFormat.RGB">
            <summary>
                The RGB color format
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoColorFormat.YCbCr422">
            <summary>
                The YCbCr422 color format
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoColorFormat.YCbCr444">
            <summary>
                The YCbCr444 color format
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoColorFormat.Auto">
            <summary>
                Auto (Unspecified)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameVideoColorimetry">
            <summary>
                Contains possible values for the AVI color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoColorimetry.NoData">
            <summary>
                No data available
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoColorimetry.SMPTE170M">
            <summary>
                The SMPTE170M color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoColorimetry.ITURBT709">
            <summary>
                The ITURBT709 color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoColorimetry.UseExtendedColorimetry">
            <summary>
                Extended colorimetry value should be used to get information regarding AVI color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoColorimetry.Auto">
            <summary>
                Auto (Unspecified)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameVideoContentType">
            <summary>
                Contains possible AVI content type
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoContentType.Graphics">
            <summary>
                Graphics content
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoContentType.Photo">
            <summary>
                Photo content
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoContentType.Cinema">
            <summary>
                Cinematic content
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoContentType.Game">
            <summary>
                Gaming content
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoContentType.Auto">
            <summary>
                Auto (Unspecified)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameVideoExtendedColorimetry">
            <summary>
                Contains possible values for the AVI extended color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoExtendedColorimetry.xvYCC601">
            <summary>
                The xvYCC601 color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoExtendedColorimetry.xvYCC709">
            <summary>
                The xvYCC709 color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoExtendedColorimetry.sYCC601">
            <summary>
                The sYCC601 color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoExtendedColorimetry.AdobeYCC601">
            <summary>
                The AdobeYCC601 color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoExtendedColorimetry.AdobeRGB">
            <summary>
                The AdobeRGB color space
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoExtendedColorimetry.Auto">
            <summary>
                Auto (Unspecified)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameVideoITC">
            <summary>
                Contains possible AVI video content modes
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoITC.VideoContent">
            <summary>
                Normal video content (Consumer Electronics)
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoITC.ITContent">
            <summary>
                Information Technology content
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoITC.Auto">
            <summary>
                Auto (Unspecified)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameVideoNonUniformPictureScaling">
            <summary>
                Contains possible values for the AVI non uniform picture scaling
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoNonUniformPictureScaling.NoData">
            <summary>
                No data available
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoNonUniformPictureScaling.Horizontal">
            <summary>
                Horizontal scaling
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoNonUniformPictureScaling.Vertical">
            <summary>
                Vertical scaling
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoNonUniformPictureScaling.Both">
            <summary>
                Scaling in both directions
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoNonUniformPictureScaling.Auto">
            <summary>
                Auto (Unspecified)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameVideoPixelRepetition">
            <summary>
                Contains possible AVI pixel repetition values
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoPixelRepetition.None">
            <summary>
                No pixel repetition
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoPixelRepetition.X2">
            <summary>
                Two pixel repetition
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoPixelRepetition.X3">
            <summary>
                Three pixel repetition
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoPixelRepetition.X4">
            <summary>
                Four pixel repetition
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoPixelRepetition.X5">
            <summary>
                Five pixel repetition
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoPixelRepetition.X6">
            <summary>
                Six pixel repetition
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoPixelRepetition.X7">
            <summary>
                Seven pixel repetition
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoPixelRepetition.X8">
            <summary>
                Eight pixel repetition
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoPixelRepetition.X9">
            <summary>
                Nine pixel repetition
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoPixelRepetition.X10">
            <summary>
                Ten pixel repetition
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoPixelRepetition.Auto">
            <summary>
                Auto (Unspecified)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameVideoRGBQuantization">
            <summary>
                Contains possible values for the AVI RGB quantization
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoRGBQuantization.Default">
            <summary>
                Default setting
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoRGBQuantization.LimitedRange">
            <summary>
                Limited RGB range [16-235] (86%)
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoRGBQuantization.FullRange">
            <summary>
                Full RGB range [0-255] (100%)
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoRGBQuantization.Auto">
            <summary>
                Auto (Unspecified)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameVideoScanInfo">
            <summary>
                Contains possible values for AVI scan information
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoScanInfo.NoData">
            <summary>
                No data available
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoScanInfo.OverScan">
            <summary>
                Overscan
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoScanInfo.UnderScan">
            <summary>
                Underscan
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoScanInfo.Auto">
            <summary>
                Auto (Unspecified)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.InfoFrameVideoYCCQuantization">
            <summary>
                Contains possible AVI YCC quantization
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoYCCQuantization.LimitedRange">
            <summary>
                Limited YCC range
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoYCCQuantization.FullRange">
            <summary>
                Full YCC range
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.InfoFrameVideoYCCQuantization.Auto">
            <summary>
                Auto (Unspecified)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.MonitorCapabilitiesConnectorType">
            <summary>
                Possible values for the monitor capabilities connector type
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.MonitorCapabilitiesConnectorType.Unknown">
            <summary>
                Unknown or invalid connector
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.MonitorCapabilitiesConnectorType.VGA">
            <summary>
                VGA connector
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.MonitorCapabilitiesConnectorType.TV">
            <summary>
                Composite connector (TV)
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.MonitorCapabilitiesConnectorType.DVI">
            <summary>
                DVI connector
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.MonitorCapabilitiesConnectorType.HDMI">
            <summary>
                HDMI connector
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.MonitorCapabilitiesConnectorType.DisplayPort">
            <summary>
                Display Port connector
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.MonitorCapabilitiesType">
            <summary>
                Contains possible values for the monitor capabilities type
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.MonitorCapabilitiesType.VSDB">
            <summary>
                The Vendor Specific Data Block
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.MonitorCapabilitiesType.VCDB">
            <summary>
                The Video Capability Data Block
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Rotate">
            <summary>
                Possible rotate modes
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.Rotate.Degree0">
            <summary>
                No rotation
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.Rotate.Degree90">
            <summary>
                90 degree rotation
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.Rotate.Degree180">
            <summary>
                180 degree rotation
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.Rotate.Degree270">
            <summary>
                270 degree rotation
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.Rotate.Ignored">
            <summary>
                This value is ignored
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Scaling">
            <summary>
                Possible scaling modes
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.Scaling.Default">
            <summary>
                No change
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.Scaling.ToClosest">
            <summary>
                Balanced  - Full Screen
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.Scaling.ToNative">
            <summary>
                Force GPU - Full Screen
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.Scaling.GPUScanOutToNative">
            <summary>
                Force GPU - Centered\No Scaling
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.Scaling.ToAspectScanOutToNative">
            <summary>
                Force GPU - Aspect Ratio
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.Scaling.ToAspectScanOutToClosest">
            <summary>
                Balanced  - Aspect Ratio
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.Scaling.GPUScanOutToClosest">
            <summary>
                Balanced  - Centered\No Scaling
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.Scaling.Customized">
            <summary>
                Customized scaling - For future use
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.ScanOutCompositionParameter">
            <summary>
                Holds a list of possible scan out composition configurable parameters
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ScanOutCompositionParameter.WarpingReSamplingMethod">
            <summary>
                Warping re-sampling method parameter
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.ScanOutCompositionParameterValue">
            <summary>
                Holds a list of possible scan out composition parameter values
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ScanOutCompositionParameterValue.Default">
            <summary>
                Default parameter value
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ScanOutCompositionParameterValue.WarpingReSamplingMethodBiLinear">
            <summary>
                BiLinear value for the warping re-sampling method parameter
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ScanOutCompositionParameterValue.WarpingReSamplingMethodBicubicTriangular">
            <summary>
                Bicubic Triangular value for the warping re-sampling method parameter
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ScanOutCompositionParameterValue.WarpingReSamplingMethodBicubicBellShaped">
            <summary>
                Bicubic Bell Shaped value for the warping re-sampling method parameter
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ScanOutCompositionParameterValue.WarpingReSamplingMethodBicubicBSpline">
            <summary>
                Bicubic B-Spline value for the warping re-sampling method parameter
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ScanOutCompositionParameterValue.WarpingReSamplingMethodBicubicAdaptiveTriangular">
            <summary>
                Bicubic Adaptive Triangular value for the warping re-sampling method parameter
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ScanOutCompositionParameterValue.WarpingReSamplingMethodBicubicAdaptiveBellShaped">
            <summary>
                Bicubic Adaptive Bell Shaped value for the warping re-sampling method parameter
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.ScanOutCompositionParameterValue.WarpingReSamplingMethodBicubicAdaptiveBSpline">
            <summary>
                Bicubic Adaptive B-Spline value for the warping re-sampling method parameter
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.SpanningOrientation">
            <summary>
                Display spanning for Windows XP
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.SpanningOrientation.None">
            <summary>
                No spanning
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.SpanningOrientation.Horizontal">
            <summary>
                Horizontal spanning
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.SpanningOrientation.Vertical">
            <summary>
                Vertical spanning
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.StaticMetadataDescriptorId">
            <summary>
                Contains possible values for the type of the Static Metadata Descriptor block structure
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.StaticMetadataDescriptorId.StaticMetadataType1">
            <summary>
                Type 1 Static Metadata Descriptor block structure
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate">
            <summary>
                Holds coordinates of a color in the color space
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate.X">
            <summary>
                Gets the color space's X coordinate
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate.Y">
            <summary>
                Gets the color space's Y coordinate
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate.#ctor(System.Single,System.Single)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate" />.
            </summary>
            <param name="x">The color space's X coordinate.</param>
            <param name="y">The color space's Y coordinate.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate.#ctor(System.Drawing.PointF)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate" />.
            </summary>
            <param name="coordinate">The color space's coordinates.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate.ToString">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate.Equals(NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate.op_Equality(NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate,NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate)">
            <summary>
                Checks two instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate" /> for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>true if both instances are equal, otherwise false.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate.op_Inequality(NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate,NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate)">
            <summary>
                Checks two instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate" /> for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>true if both instances are not equal, otherwise false.</returns>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.ColorDataV1">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.Display.IColorData" />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ColorDataV1.#ctor(NvAPIWrapper.Native.Display.ColorDataCommand)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.ColorDataV1" /> to retrieve color data information
            </summary>
            <param name="command">The command to be executed.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ColorDataV1.#ctor(NvAPIWrapper.Native.Display.ColorDataCommand,NvAPIWrapper.Native.Display.ColorDataFormat,NvAPIWrapper.Native.Display.ColorDataColorimetry)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.ColorDataV1" /> to modify the color data
            </summary>
            <param name="command">The command to be executed.</param>
            <param name="colorFormat">The color data color format.</param>
            <param name="colorimetry">The color data color space.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV1.ColorFormat">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV1.Colorimetry">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV1.DynamicRange">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV1.ColorDepth">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV1.SelectionPolicy">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV1.DesktopColorDepth">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.ColorDataV2">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.Display.IColorData" />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ColorDataV2.#ctor(NvAPIWrapper.Native.Display.ColorDataCommand)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.ColorDataV2" /> to retrieve color data information
            </summary>
            <param name="command">The command to be executed.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ColorDataV2.#ctor(NvAPIWrapper.Native.Display.ColorDataCommand,NvAPIWrapper.Native.Display.ColorDataFormat,NvAPIWrapper.Native.Display.ColorDataColorimetry,NvAPIWrapper.Native.Display.ColorDataDynamicRange)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.ColorDataV2" /> to modify the color data
            </summary>
            <param name="command">The command to be executed.</param>
            <param name="colorFormat">The color data color format.</param>
            <param name="colorimetry">The color data color space.</param>
            <param name="colorDynamicRange">The color data dynamic range.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV2.ColorFormat">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV2.Colorimetry">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV2.DynamicRange">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV2.ColorDepth">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV2.SelectionPolicy">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV2.DesktopColorDepth">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.ColorDataV3">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.Display.IColorData" />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ColorDataV3.#ctor(NvAPIWrapper.Native.Display.ColorDataCommand)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.ColorDataV3" /> to retrieve color data information
            </summary>
            <param name="command">The command to be executed.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ColorDataV3.#ctor(NvAPIWrapper.Native.Display.ColorDataCommand,NvAPIWrapper.Native.Display.ColorDataFormat,NvAPIWrapper.Native.Display.ColorDataColorimetry,NvAPIWrapper.Native.Display.ColorDataDynamicRange,NvAPIWrapper.Native.Display.ColorDataDepth)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.ColorDataV3" /> to modify the color data
            </summary>
            <param name="command">The command to be executed.</param>
            <param name="colorFormat">The color data color format.</param>
            <param name="colorimetry">The color data color space.</param>
            <param name="colorDynamicRange">The color data dynamic range.</param>
            <param name="colorDepth">The color data color depth.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV3.ColorFormat">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV3.Colorimetry">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV3.DynamicRange">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV3.ColorDepth">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV3.SelectionPolicy">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV3.DesktopColorDepth">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.ColorDataV4">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.Display.IColorData" />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ColorDataV4.#ctor(NvAPIWrapper.Native.Display.ColorDataCommand)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.ColorDataV4" /> to retrieve color data information
            </summary>
            <param name="command">The command to be executed.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ColorDataV4.#ctor(NvAPIWrapper.Native.Display.ColorDataCommand,NvAPIWrapper.Native.Display.ColorDataFormat,NvAPIWrapper.Native.Display.ColorDataColorimetry,NvAPIWrapper.Native.Display.ColorDataDynamicRange,NvAPIWrapper.Native.Display.ColorDataDepth,NvAPIWrapper.Native.Display.ColorDataSelectionPolicy)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.ColorDataV4" /> to modify the color data
            </summary>
            <param name="command">The command to be executed.</param>
            <param name="colorFormat">The color data color format.</param>
            <param name="colorimetry">The color data color space.</param>
            <param name="colorDynamicRange">The color data dynamic range.</param>
            <param name="colorDepth">The color data color depth.</param>
            <param name="colorSelectionPolicy">The color data selection policy.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV4.ColorFormat">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV4.Colorimetry">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV4.DynamicRange">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV4.ColorDepth">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV4.SelectionPolicy">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV4.DesktopColorDepth">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.ColorDataV5">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.Display.IColorData" />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ColorDataV5.#ctor(NvAPIWrapper.Native.Display.ColorDataCommand)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.ColorDataV5" /> to retrieve color data information
            </summary>
            <param name="command">The command to be executed.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ColorDataV5.#ctor(NvAPIWrapper.Native.Display.ColorDataCommand,NvAPIWrapper.Native.Display.ColorDataFormat,NvAPIWrapper.Native.Display.ColorDataColorimetry,NvAPIWrapper.Native.Display.ColorDataDynamicRange,NvAPIWrapper.Native.Display.ColorDataDepth,NvAPIWrapper.Native.Display.ColorDataSelectionPolicy,NvAPIWrapper.Native.Display.ColorDataDesktopDepth)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.ColorDataV4" /> to modify the color data
            </summary>
            <param name="command">The command to be executed.</param>
            <param name="colorFormat">The color data color format.</param>
            <param name="colorimetry">The color data color space.</param>
            <param name="dynamicRange">The color data dynamic range.</param>
            <param name="colorDepth">The color data color depth.</param>
            <param name="colorSelectionPolicy">The color data selection policy.</param>
            <param name="desktopColorDepth">The color data desktop color depth.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV5.ColorFormat">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV5.Colorimetry">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV5.DynamicRange">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV5.ColorDepth">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV5.SelectionPolicy">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ColorDataV5.DesktopColorDepth">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.CustomDisplay">
            <summary>
                Hold information about a custom display resolution
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.CustomDisplay.Width">
            <summary>
                Gets the source surface (source mode) width.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.CustomDisplay.Height">
            <summary>
                Gets the source surface (source mode) height.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.CustomDisplay.Depth">
            <summary>
                Gets the source surface color depth. "0" means all 8/16/32bpp.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.CustomDisplay.ColorFormat">
            <summary>
                Gets the color format (optional)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.CustomDisplay.SourcePartition">
            <summary>
                Gets the source partition viewport. All values are between [0, 1]. For multi-mon support, should be set to
                (0,0,1.0,1.0) for now.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.CustomDisplay.XRatio">
            <summary>
                Gets the horizontal scaling ratio.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.CustomDisplay.YRatio">
            <summary>
                Gets the vertical scaling ratio.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.CustomDisplay.Timing">
            <summary>
                Gets the timing used to program TMDS/DAC/LVDS/HDMI/TVEncoder, etc.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.CustomDisplay.HardwareModeSetOnly">
            <summary>
                Gets a boolean value indicating that a hardware mode-set without OS update should be performed.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.CustomDisplay.#ctor(System.UInt32,System.UInt32,System.UInt32,NvAPIWrapper.Native.Display.ColorFormat,System.Single,System.Single,NvAPIWrapper.Native.Display.Structures.Timing,System.Boolean)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.CustomDisplay" />
            </summary>
            <param name="width">The source surface (source mode) width.</param>
            <param name="height">The source surface (source mode) height.</param>
            <param name="depth">The source surface color depth. "0" means all 8/16/32bpp.</param>
            <param name="colorFormat">The color format (optional)</param>
            <param name="xRatio">The horizontal scaling ratio.</param>
            <param name="yRatio">The vertical scaling ratio.</param>
            <param name="timing">The timing used to program TMDS/DAC/LVDS/HDMI/TVEncoder, etc.</param>
            <param name="hwModeSetOnly">A boolean value indicating that a hardware mode-set without OS update should be performed.</param>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.DisplayColorData">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.DisplayColorData.FirstColorCoordinate">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.DisplayColorData.SecondColorCoordinate">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.DisplayColorData.ThirdColorCoordinate">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.DisplayColorData.WhiteColorCoordinate">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.DisplayColorData.MaximumDesiredContentLuminance">
            <summary>
                Gets the maximum desired content luminance [1.0-65535] in cd/m^2
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.DisplayColorData.MaximumDesiredContentFrameAverageLightLevel">
            <summary>
                Gets the maximum desired content frame average light level (a.k.a MaxFALL) [1.0-65535] in cd/m^2
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.DisplayColorData.MinimumDesiredContentLuminance">
            <summary>
                Gets the maximum desired content luminance [1.0-6.5535] in cd/m^2
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.DisplayHandle">
            <summary>
                DisplayHandle is a one-to-one map to the GDI handle of an attached display in the Windows Display Properties
                Settings page.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.DisplayHandle.MemoryAddress">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.DisplayHandle.IsNull">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.DisplayHandle.Equals(NvAPIWrapper.Native.Display.Structures.DisplayHandle)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.DisplayHandle.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.DisplayHandle.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.DisplayHandle.op_Equality(NvAPIWrapper.Native.Display.Structures.DisplayHandle,NvAPIWrapper.Native.Display.Structures.DisplayHandle)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.DisplayHandle.op_Inequality(NvAPIWrapper.Native.Display.Structures.DisplayHandle,NvAPIWrapper.Native.Display.Structures.DisplayHandle)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.DisplayHandle.ToString">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.DisplayHandle.DefaultHandle">
            <summary>
                Gets default DisplayHandle with a null pointer
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV1">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.Display.IHDMISupportInfo" />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV1.IsGPUCapableOfHDMIOutput">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV1.IsMonitorCapableOfsYCC601">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV1.IsMonitorCapableOfUnderscan">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV1.IsMonitorCapableOfAdobeYCC601">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV1.IsMonitorCapableOfBasicAudio">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV1.IsMonitorCapableOfYCbCr444">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV1.IsMonitorCapableOfYCbCr422">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV1.IsMonitorCapableOfxvYCC601">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV1.IsMonitorCapableOfxvYCC709">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV1.IsHDMIMonitor">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV1.IsMonitorCapableOfAdobeRGB">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV1.EDID861ExtensionRevision">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV2">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.Display.IHDMISupportInfo" />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV2.IsGPUCapableOfHDMIOutput">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV2.IsMonitorCapableOfUnderscan">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV2.IsMonitorCapableOfBasicAudio">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV2.IsMonitorCapableOfYCbCr444">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV2.IsMonitorCapableOfYCbCr422">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV2.IsMonitorCapableOfxvYCC601">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV2.IsMonitorCapableOfxvYCC709">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV2.IsHDMIMonitor">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV2.IsMonitorCapableOfsYCC601">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV2.IsMonitorCapableOfAdobeYCC601">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV2.IsMonitorCapableOfAdobeRGB">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDMISupportInfoV2.EDID861ExtensionRevision">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.HDRCapabilitiesV1">
            <summary>
                Contains information regarding HDR capabilities of a display
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDRCapabilitiesV1.DisplayData">
            <summary>
                Gets the display color space configurations
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDRCapabilitiesV1.IsST2084EOTFSupported">
            <summary>
                Gets a boolean value indicating if the HDMI2.0a UHDA HDR with ST2084 EOTF (CEA861.3) is supported.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDRCapabilitiesV1.IsTraditionalHDRGammaSupported">
            <summary>
                Gets a boolean value indicating if the HDMI2.0a traditional HDR gamma (CEA861.3) is supported.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDRCapabilitiesV1.IsEDRSupported">
            <summary>
                Gets a boolean value indicating if the Extended Dynamic Range on SDR displays is supported.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDRCapabilitiesV1.IsDriverDefaultHDRParametersExpanded">
            <summary>
                Gets a boolean value indicating if the default EDID HDR parameters is expanded;
                otherwise false if this instance contains actual HDR parameters.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDRCapabilitiesV1.IsTraditionalSDRGammaSupported">
            <summary>
                Gets a boolean value indicating if the HDMI2.0a traditional SDR gamma is supported.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.HDRColorDataV1">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.Display.IHDRColorData" />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.HDRColorDataV1.#ctor(NvAPIWrapper.Native.Display.ColorDataHDRCommand,NvAPIWrapper.Native.Display.ColorDataHDRMode,NvAPIWrapper.Native.Display.Structures.MasteringDisplayColorData)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.HDRColorDataV1" />.
            </summary>
            <param name="command">The command to be executed.</param>
            <param name="hdrMode">The hdr mode.</param>
            <param name="masteringDisplayData">The display color space configurations.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.HDRColorDataV1.#ctor(NvAPIWrapper.Native.Display.ColorDataHDRCommand)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.HDRColorDataV1" />.
            </summary>
            <param name="command">The command to be executed.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDRColorDataV1.ColorDepth">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDRColorDataV1.ColorFormat">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDRColorDataV1.Command">
            <summary>
                Gets the color data command
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDRColorDataV1.DynamicRange">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDRColorDataV1.HDRMode">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDRColorDataV1.MasteringDisplayData">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.HDRColorDataV2">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.Display.IHDRColorData" />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.HDRColorDataV2.#ctor(NvAPIWrapper.Native.Display.ColorDataHDRCommand,NvAPIWrapper.Native.Display.ColorDataHDRMode,NvAPIWrapper.Native.Display.Structures.MasteringDisplayColorData,NvAPIWrapper.Native.Display.ColorDataFormat,NvAPIWrapper.Native.Display.ColorDataDynamicRange,NvAPIWrapper.Native.Display.ColorDataDepth)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.HDRColorDataV2" />.
            </summary>
            <param name="command">The command to be executed.</param>
            <param name="hdrMode">The hdr mode.</param>
            <param name="masteringDisplayData">The display color space configurations.</param>
            <param name="colorFormat">The color data color format.</param>
            <param name="dynamicRange">The color data dynamic range.</param>
            <param name="colorDepth">The color data color depth.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.HDRColorDataV2.#ctor(NvAPIWrapper.Native.Display.ColorDataHDRCommand)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.HDRColorDataV2" />.
            </summary>
            <param name="command">The command to be executed.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDRColorDataV2.Command">
            <summary>
                Gets the color data command
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDRColorDataV2.HDRMode">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDRColorDataV2.MasteringDisplayData">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDRColorDataV2.ColorFormat">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDRColorDataV2.DynamicRange">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.HDRColorDataV2.ColorDepth">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.InfoFrameAudio">
            <summary>
                Contains info-frame audio information
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.InfoFrameAudio.#ctor(NvAPIWrapper.Native.Display.InfoFrameAudioCodec,NvAPIWrapper.Native.Display.InfoFrameAudioExtendedCodec,NvAPIWrapper.Native.Display.InfoFrameAudioSampleSize,NvAPIWrapper.Native.Display.InfoFrameAudioSampleRate,NvAPIWrapper.Native.Display.InfoFrameAudioChannelCount,NvAPIWrapper.Native.Display.InfoFrameAudioChannelAllocation,NvAPIWrapper.Native.Display.InfoFrameBoolean,NvAPIWrapper.Native.Display.InfoFrameAudioLFEPlaybackLevel,NvAPIWrapper.Native.Display.InfoFrameAudioLevelShift)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.InfoFrameAudio" />.
            </summary>
            <param name="codec">The audio coding type (codec)</param>
            <param name="codecExtension">The audio codec from codec extension</param>
            <param name="sampleSize">The audio sample size (depth)</param>
            <param name="sampleRate">The audio sample rate (sampling frequency)</param>
            <param name="channelCount">The number of audio channels</param>
            <param name="channelAllocation">The audio channel allocation (speaker placements)</param>
            <param name="isDownMixProhibited">A value indicating if down-mix is prohibited</param>
            <param name="lfePlaybackLevel">The Low Frequency Effects playback level value</param>
            <param name="levelShift">The audio level shift value</param>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameAudio.Codec">
            <summary>
                Gets the audio coding type (codec)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameAudio.ExtendedCodec">
            <summary>
                Gets the audio codec from codec extension; only valid when
                <see cref="P:NvAPIWrapper.Native.Display.Structures.InfoFrameAudio.Codec" /> == <see cref="F:NvAPIWrapper.Native.Display.InfoFrameAudioCodec.UseExtendedCodecType" />
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameAudio.SampleSize">
            <summary>
                Gets the audio sample size (depth)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameAudio.SampleRate">
            <summary>
                Gets the audio sample rate (sampling frequency)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameAudio.ChannelCount">
            <summary>
                Gets the number of audio channels
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameAudio.ChannelAllocation">
            <summary>
                Gets the audio channel allocation (speaker placements)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameAudio.IsDownMixProhibited">
            <summary>
                Gets a value indicating if down-mix is prohibited
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameAudio.LFEPlaybackLevel">
            <summary>
                Gets the Low Frequency Effects playback level value
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameAudio.LevelShift">
            <summary>
                Gets the audio level shift value
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.InfoFrameData">
            <summary>
                Contains info-frame requested information or information to be overriden
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.InfoFrameData.#ctor(NvAPIWrapper.Native.Display.InfoFrameCommand,NvAPIWrapper.Native.Display.InfoFrameDataType)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.InfoFrameData" />.
            </summary>
            <param name="command">
                The operation to be done. Can be used for information retrieval or to reset configurations to
                default.
            </param>
            <param name="dataType">The type of information.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.InfoFrameData.#ctor(NvAPIWrapper.Native.Display.InfoFrameCommand,NvAPIWrapper.Native.Display.InfoFrameDataType,NvAPIWrapper.Native.Display.Structures.InfoFrameProperty)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.InfoFrameData" />.
            </summary>
            <param name="command">The operation to be done. Can only be used to change property information.</param>
            <param name="dataType">The type of information.</param>
            <param name="propertyInformation">The new property information to be set.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.InfoFrameData.#ctor(NvAPIWrapper.Native.Display.InfoFrameCommand,NvAPIWrapper.Native.Display.Structures.InfoFrameAudio)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.InfoFrameData" />.
            </summary>
            <param name="command">The operation to be done. Can only be used to change current or default audio information.</param>
            <param name="audioInformation">The new audio information to be set.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.InfoFrameData.#ctor(NvAPIWrapper.Native.Display.InfoFrameCommand,NvAPIWrapper.Native.Display.Structures.InfoFrameVideo)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.InfoFrameData" />.
            </summary>
            <param name="command">The operation to be done. Can only be used to change current or default video information.</param>
            <param name="videoInformation">The new video information to be set.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameData.Type">
            <summary>
                Gets the type of data contained in this instance
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameData.Command">
            <summary>
                Gets the operation type
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameData.AudioInformation">
            <summary>
                Gets the info-frame audio information if available; otherwise null
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameData.AuxiliaryVideoInformation">
            <summary>
                Gets the info-frame auxiliary video information (AVI) if available; otherwise null
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameData.PropertyInformation">
            <summary>
                Gets the info-frame property information if available; otherwise null
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.InfoFrameProperty">
            <summary>
                Contains info-frame property information
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.InfoFrameProperty.#ctor(NvAPIWrapper.Native.Display.InfoFramePropertyMode,NvAPIWrapper.Native.Display.InfoFrameBoolean)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.InfoFrameProperty" />.
            </summary>
            <param name="mode">The info-frame operation mode</param>
            <param name="isBlackListed">A value indicating if this display (monitor) is blacklisted</param>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameProperty.Mode">
            <summary>
                Gets the info-frame operation mode
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameProperty.IsBlackListed">
            <summary>
                Gets a value indicating if this display (monitor) is blacklisted
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameProperty.Version">
            <summary>
                Gets the info-frame version
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameProperty.Length">
            <summary>
                Gets the info-frame length
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo">
            <summary>
                Contains info-frame video information
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo.#ctor(System.Byte,NvAPIWrapper.Native.Display.InfoFrameVideoPixelRepetition,NvAPIWrapper.Native.Display.InfoFrameVideoColorFormat,NvAPIWrapper.Native.Display.InfoFrameVideoColorimetry,NvAPIWrapper.Native.Display.InfoFrameVideoExtendedColorimetry,NvAPIWrapper.Native.Display.InfoFrameVideoRGBQuantization,NvAPIWrapper.Native.Display.InfoFrameVideoYCCQuantization,NvAPIWrapper.Native.Display.InfoFrameVideoITC,NvAPIWrapper.Native.Display.InfoFrameVideoContentType,NvAPIWrapper.Native.Display.InfoFrameVideoScanInfo,NvAPIWrapper.Native.Display.InfoFrameBoolean,NvAPIWrapper.Native.Display.InfoFrameVideoAspectRatioActivePortion,NvAPIWrapper.Native.Display.InfoFrameVideoAspectRatioCodedFrame,NvAPIWrapper.Native.Display.InfoFrameVideoNonUniformPictureScaling,NvAPIWrapper.Native.Display.InfoFrameVideoBarData,System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo" />.
            </summary>
            <param name="videoIdentificationCode">The video identification code (VIC)</param>
            <param name="pixelRepetition">The video pixel repetition</param>
            <param name="colorFormat">The video color format</param>
            <param name="colorimetry">The video color space</param>
            <param name="extendedColorimetry">The extended video color space</param>
            <param name="rgbQuantization">The RGB quantization configuration</param>
            <param name="yccQuantization">The YCC quantization configuration</param>
            <param name="contentMode">The video content mode</param>
            <param name="contentType">The video content type</param>
            <param name="scanInfo">The video scan information</param>
            <param name="isActiveFormatInfoPresent">A value indicating if the active format information is present</param>
            <param name="activeFormatAspectRatio">The active format aspect ratio</param>
            <param name="pictureAspectRatio">The picture aspect ratio</param>
            <param name="nonUniformPictureScaling">The non uniform picture scaling direction</param>
            <param name="barInfo">The video bar information</param>
            <param name="topBar">The top bar value if not auto and present; otherwise null</param>
            <param name="bottomBar">The bottom bar value if not auto and present; otherwise null</param>
            <param name="leftBar">The left bar value if not auto and present; otherwise null</param>
            <param name="rightBar">The right bar value if not auto and present; otherwise null</param>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo.VideoIdentificationCode">
            <summary>
                Gets the video identification code (VIC)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo.PixelRepetition">
            <summary>
                Gets the video pixel repetition
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo.ColorFormat">
            <summary>
                Gets the video color format
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo.Colorimetry">
            <summary>
                Gets the video color space
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo.ExtendedColorimetry">
            <summary>
                Gets the extended video color space; only valid when <see cref="P:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo.Colorimetry" /> ==
                <see cref="F:NvAPIWrapper.Native.Display.InfoFrameVideoColorimetry.UseExtendedColorimetry" />
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo.RGBQuantization">
            <summary>
                Gets the RGB quantization configuration
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo.YCCQuantization">
            <summary>
                Gets the YCC quantization configuration
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo.ContentMode">
            <summary>
                Gets the video content mode
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo.ContentType">
            <summary>
                Gets the video content type
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo.ScanInfo">
            <summary>
                Gets the video scan information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo.IsActiveFormatInfoPresent">
            <summary>
                Gets a value indicating if the active format information is present
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo.ActiveFormatAspectRatio">
            <summary>
                Gets the active format aspect ratio
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo.PictureAspectRatio">
            <summary>
                Gets the picture aspect ratio
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo.NonUniformPictureScaling">
            <summary>
                Gets the non uniform picture scaling direction
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo.BarInfo">
            <summary>
                Gets the video bar information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo.TopBar">
            <summary>
                Gets the top bar value if not auto and present; otherwise null
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo.BottomBar">
            <summary>
                Gets the bottom bar value if not auto and present; otherwise null
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo.LeftBar">
            <summary>
                Gets the left bar value if not auto and present; otherwise null
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.InfoFrameVideo.RightBar">
            <summary>
                Gets the right bar value if not auto and present; otherwise null
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.LUID">
            <summary>
                Locally unique identifier is a 64-bit value guaranteed to be unique only on the system on which it was generated.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.Structures.LUID.LowPart">
            <summary>
                32Bit unsigned integer, low
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.Structures.LUID.HighPart">
            <summary>
                32Bit signed integer, high
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.LUID.ToString">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.LUID.Equals(NvAPIWrapper.Native.Display.Structures.LUID)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.LUID.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.LUID.op_Equality(NvAPIWrapper.Native.Display.Structures.LUID,NvAPIWrapper.Native.Display.Structures.LUID)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.LUID.op_Inequality(NvAPIWrapper.Native.Display.Structures.LUID,NvAPIWrapper.Native.Display.Structures.LUID)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.LUID.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.MasteringDisplayColorData">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.MasteringDisplayColorData.#ctor(NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate,NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate,NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate,NvAPIWrapper.Native.Display.Structures.ColorDataColorCoordinate,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.MasteringDisplayColorData" />.
            </summary>
            <param name="firstColorCoordinate">The first primary color coordinate.</param>
            <param name="secondColorCoordinate">The second primary color coordinate.</param>
            <param name="thirdColorCoordinate">The third primary color coordinate.</param>
            <param name="whiteColorCoordinate">The white color coordinate.</param>
            <param name="maximumMasteringLuminance">The maximum mastering display luminance [1.0-65535] in cd/m^2</param>
            <param name="minimumMasteringLuminance">The maximum mastering display luminance [1.0-6.5535] in cd/m^2</param>
            <param name="maximumContentLightLevel">
                The maximum mastering display content light level (a.k.a MaxCLL) [1.0-65535] in
                cd/m^2
            </param>
            <param name="maximumFrameAverageLightLevel">
                The maximum mastering display frame average light level (a.k.a MaxFALL)
                [1.0-65535] in cd/m^2
            </param>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MasteringDisplayColorData.FirstColorCoordinate">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MasteringDisplayColorData.SecondColorCoordinate">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MasteringDisplayColorData.ThirdColorCoordinate">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MasteringDisplayColorData.WhiteColorCoordinate">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MasteringDisplayColorData.MaximumMasteringLuminance">
            <summary>
                Gets the maximum mastering display luminance [1.0-65535] in cd/m^2
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MasteringDisplayColorData.MaximumFrameAverageLightLevel">
            <summary>
                Gets the maximum mastering display frame average light level (a.k.a MaxFALL) [1.0-65535] in cd/m^2
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MasteringDisplayColorData.MaximumContentLightLevel">
            <summary>
                Gets the maximum mastering display content light level (a.k.a MaxCLL) [1.0-65535] in cd/m^2
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MasteringDisplayColorData.MinimumMasteringLuminance">
            <summary>
                Gets the maximum mastering display luminance [1.0-6.5535] in cd/m^2
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.MonitorCapabilities">
            <summary>
                Contains the monitor capabilities read from the Vendor Specific Data Block or the Video Capability Data Block
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.MonitorCapabilities.#ctor(NvAPIWrapper.Native.Display.MonitorCapabilitiesType)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.MonitorCapabilities" />.
            </summary>
            <param name="type">The type of information to be retrieved.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorCapabilities.IsValid">
            <summary>
                Gets a boolean value indicating if this instance contains valid information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorCapabilities.Type">
            <summary>
                Gets the monitor capability type
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorCapabilities.ConnectorType">
            <summary>
                Gets the monitor connector type
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorCapabilities.VCDBCapabilities">
            <summary>
                Gets the monitor VCDB capabilities information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorCapabilities.VSDBCapabilities">
            <summary>
                Gets the monitor VSDB capabilities information
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.MonitorColorData">
            <summary>
            Contains information about a monitor color data
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorColorData.ColorFormat">
             <summary>
            Gets the monitor display port color format
             </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorColorData.ColorDepth">
            <summary>
            Gets the monitor display port color depth
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.MonitorVCDBCapabilities">
            <summary>
                Contains monitor VCDB capabilities
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorVCDBCapabilities.QuantizationRangeRGB">
            <summary>
                Gets a boolean value indicating RGB range quantization
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorVCDBCapabilities.QuantizationRangeYcc">
            <summary>
                Gets a boolean value indicating Ycc range quantization
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.MonitorVSDBCapabilities">
            <summary>
                Contains monitor VSDB capabilities
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorVSDBCapabilities.AudioLatency">
            <summary>
                Gets the audio latency if available or null
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorVSDBCapabilities.InterlacedAudioLatency">
            <summary>
                Gets the interlaced audio latency if available or null
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorVSDBCapabilities.InterlacedVideoLatency">
            <summary>
                Gets the interlaced video latency if available or null
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorVSDBCapabilities.IsCinemaContentSupported">
            <summary>
                Returns a boolean value indicating if the cinematic content is supported by the monitor or the connection
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorVSDBCapabilities.IsDeepColor30BitsSupported">
            <summary>
                Returns a boolean value indicating if the 30bit deep color is supported by the monitor or the connection
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorVSDBCapabilities.IsDeepColor36BitsSupported">
            <summary>
                Returns a boolean value indicating if the 36bit deep color is supported by the monitor or the connection
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorVSDBCapabilities.IsDeepColor48BitsSupported">
            <summary>
                Returns a boolean value indicating if the 48bit deep color is supported by the monitor or the connection
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorVSDBCapabilities.IsDeepColorYCbCr444Supported">
            <summary>
                Returns a boolean value indicating if the YCbCr444 deep color is supported by the monitor or the connection
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorVSDBCapabilities.IsDualDVIOperationSupported">
            <summary>
                Returns a boolean value indicating if the dual DVI operation is supported by the monitor or the connection
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorVSDBCapabilities.IsGameContentSupported">
            <summary>
                Returns a boolean value indicating if the gaming content is supported by the monitor or the connection
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorVSDBCapabilities.IsGraphicsTextContentSupported">
            <summary>
                Returns a boolean value indicating if the graphics text content is supported by the monitor or the connection
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorVSDBCapabilities.IsPhotoContentSupported">
            <summary>
                Returns a boolean value indicating if the photo content is supported by monitor or the connection
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorVSDBCapabilities.MaxTMDSClock">
            <summary>
                Gets the connection max TMDS clock supported by the monitor or the connection
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorVSDBCapabilities.PhysicalAddress">
            <summary>
                Gets the monitor physical address on port
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorVSDBCapabilities.VideoLatency">
            <summary>
                Gets the video latency if available or null
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.MonitorVSDBCapabilities.MonitorPhysicalAddress">
            <summary>
                Represents a monitor physical address
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorVSDBCapabilities.MonitorPhysicalAddress.A">
            <summary>
                Gets the first part of a monitor physical address
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorVSDBCapabilities.MonitorPhysicalAddress.B">
            <summary>
                Gets the second part of a monitor physical address
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorVSDBCapabilities.MonitorPhysicalAddress.C">
            <summary>
                Gets the third part of a monitor physical address
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.MonitorVSDBCapabilities.MonitorPhysicalAddress.D">
            <summary>
                Gets the forth part of a monitor physical address
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.MonitorVSDBCapabilities.MonitorPhysicalAddress.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.PathAdvancedTargetInfo">
            <summary>
                Holds advanced information about a PathTargetInfo
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathAdvancedTargetInfo.#ctor(NvAPIWrapper.Native.Display.Rotate,NvAPIWrapper.Native.Display.Scaling,System.UInt32,NvAPIWrapper.Native.Display.TimingOverride,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Creates a new PathAdvancedTargetInfo for monitors
            </summary>
            <param name="rotation">Screen rotation</param>
            <param name="scale">Screen scaling</param>
            <param name="refreshRateInMillihertz">Screen refresh rate</param>
            <param name="timingOverride">Timing override</param>
            <param name="isInterlaced">Indicates if the mode is interlaced</param>
            <param name="isClonePrimary">Indicates if the display is the primary display of a clone topology</param>
            <param name="isClonePanAndScanTarget">Indicates if the target Pan and Scan is enabled</param>
            <param name="disableVirtualModeSupport"></param>
            <param name="isPreferredUnscaledTarget"></param>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIANotSupportedException"></exception>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathAdvancedTargetInfo.#ctor(NvAPIWrapper.Native.Display.Rotate,NvAPIWrapper.Native.Display.Scaling,NvAPIWrapper.Native.Display.TVFormat,NvAPIWrapper.Native.GPU.ConnectorType,System.UInt32,NvAPIWrapper.Native.Display.TimingOverride,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Creates a new PathAdvancedTargetInfo for TVs
            </summary>
            <param name="rotation">Screen rotation</param>
            <param name="scale">Screen scaling</param>
            <param name="tvFormat">The TV format to apply</param>
            <param name="connectorType">Specify connector type. For TV only</param>
            <param name="refreshRateInMillihertz">Screen refresh rate</param>
            <param name="timingOverride">Timing override</param>
            <param name="isInterlaced">Indicates if the mode is interlaced</param>
            <param name="isClonePrimary">Indicates if the display is the primary display of a clone topology</param>
            <param name="isClonePanAndScanTarget">Indicates if the target Pan and Scan is enabled</param>
            <param name="disableVirtualModeSupport"></param>
            <param name="isPreferredUnscaledTarget"></param>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIANotSupportedException"></exception>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathAdvancedTargetInfo.Equals(NvAPIWrapper.Native.Display.Structures.PathAdvancedTargetInfo)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathAdvancedTargetInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathAdvancedTargetInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathAdvancedTargetInfo.Rotation">
            <summary>
                Rotation setting
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathAdvancedTargetInfo.Scaling">
            <summary>
                Scaling setting
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathAdvancedTargetInfo.RefreshRateInMillihertz">
            <summary>
                Non-interlaced Refresh Rate of the mode, multiplied by 1000, 0 = ignored
                This is the value which driver reports to the OS.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathAdvancedTargetInfo.ConnectorType">
            <summary>
                Specify connector type. For TV only, ignored if TVFormat == TVFormat.None.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathAdvancedTargetInfo.TVFormat">
            <summary>
                To choose the last TV format set this value to TVFormat.None
                In case of NvAPI_DISP_GetDisplayConfig(), this field will indicate the currently applied TV format;
                if no TV format is applied, this field will have TVFormat.None value.
                In case of NvAPI_DISP_SetDisplayConfig(), this field should only be set in case of TVs;
                for other displays this field will be ignored and resolution &amp; refresh rate specified in input will be used to
                apply the TV format.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathAdvancedTargetInfo.TimingOverride">
            <summary>
                Ignored if TimingOverride == TimingOverride.Current
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathAdvancedTargetInfo.Timing">
            <summary>
                Scan out timing, valid only if TimingOverride == TimingOverride.Custom
                The value Timing.PixelClockIn10KHertz is obtained from the EDID. The driver may tweak this value for HDTV, stereo,
                etc., before reporting it to the OS.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathAdvancedTargetInfo.IsInterlaced">
            <summary>
                Interlaced mode flag, ignored if refreshRate == 0
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathAdvancedTargetInfo.IsClonePrimary">
            <summary>
                Declares primary display in clone configuration. This is *NOT* GDI Primary.
                Only one target can be primary per source. If no primary is specified, the first target will automatically be
                primary.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathAdvancedTargetInfo.IsClonePanAndScanTarget">
            <summary>
                Whether on this target Pan and Scan is enabled or has to be enabled. Valid only when the target is part of clone
                topology.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathAdvancedTargetInfo.DisableVirtualModeSupport">
            <summary>
                Indicates if virtual mode support is disabled
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathAdvancedTargetInfo.IsPreferredUnscaledTarget">
            <summary>
                Indicates if the target is in preferred unscaled mode
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.PathInfoV1">
            <summary>
                Holds information about a path
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathInfoV1.SourceId">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathInfoV1.TargetsInfo">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathInfoV1.SourceModeInfo">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathInfoV1.#ctor(NvAPIWrapper.Native.Display.Structures.PathTargetInfoV1[],NvAPIWrapper.Native.Display.Structures.SourceModeInfo,System.UInt32)">
            <summary>
                Creates a new PathInfoV1
            </summary>
            <param name="targetsInformation">Information about path targets</param>
            <param name="sourceModeInformation">Source mode information</param>
            <param name="sourceId">Source Id, can be zero</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathInfoV1.Equals(NvAPIWrapper.Native.Display.Structures.PathInfoV1)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathInfoV1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathInfoV1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathInfoV1.#ctor(NvAPIWrapper.Native.Display.Structures.PathTargetInfoV1[],System.UInt32)">
            <summary>
                Creates a new PathInfoV1
            </summary>
            <param name="targetsInformation">Information about path targets</param>
            <param name="sourceId">Source Id, can be zero</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathInfoV1.#ctor(System.UInt32)">
            <summary>
                Creates a new PathInfoV1
            </summary>
            <param name="sourceId">Source Id, can be zero</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathInfoV1.#ctor(NvAPIWrapper.Native.Display.Structures.SourceModeInfo,System.UInt32)">
            <summary>
                Creates a new PathInfoV1
            </summary>
            <param name="sourceModeInfo">Source mode information</param>
            <param name="sourceId">Source Id, can be zero</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathInfoV1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.PathInfoV2">
            <summary>
                Holds information about a path
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathInfoV2.SourceId">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathInfoV2.Equals(NvAPIWrapper.Native.Display.Structures.PathInfoV2)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathInfoV2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathInfoV2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathInfoV2.TargetsInfo">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathInfoV2.SourceModeInfo">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathInfoV2.IsNonNVIDIAAdapter">
            <summary>
                True for non-NVIDIA adapter.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathInfoV2.OSAdapterLUID">
            <summary>
                Used by Non-NVIDIA adapter for OS Adapter of LUID
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathInfoV2.#ctor(NvAPIWrapper.Native.Display.Structures.PathTargetInfoV2[],NvAPIWrapper.Native.Display.Structures.SourceModeInfo,System.UInt32)">
            <summary>
                Creates a new PathInfoV2
            </summary>
            <param name="targetInformations">Information about path targets</param>
            <param name="sourceModeInfo">Source mode information</param>
            <param name="sourceId">Source Id, can be zero</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathInfoV2.#ctor(NvAPIWrapper.Native.Display.Structures.PathTargetInfoV2[],System.UInt32)">
            <summary>
                Creates a new PathInfoV2
            </summary>
            <param name="targetInformations">Information about path targets</param>
            <param name="sourceId">Source Id, can be zero</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathInfoV2.#ctor(System.UInt32)">
            <summary>
                Creates a new PathInfoV2
            </summary>
            <param name="sourceId">Source Id, can be zero</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathInfoV2.#ctor(NvAPIWrapper.Native.Display.Structures.SourceModeInfo,System.UInt32)">
            <summary>
                Creates a new PathInfoV2
            </summary>
            <param name="sourceModeInfo">Source mode information</param>
            <param name="sourceId">Source Id, can be zero</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathInfoV2.Dispose">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV1">
            <summary>
                Holds information about a path's target
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV1.ToString">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV1.DisplayId">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV1.Equals(NvAPIWrapper.Native.Display.Structures.PathTargetInfoV1)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV1.Equals(NvAPIWrapper.Native.Display.Structures.PathTargetInfoV2)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV1.Details">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV1.#ctor(System.UInt32)">
            <summary>
                Creates a new PathTargetInfoV1
            </summary>
            <param name="displayId">Display Id</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV1.#ctor(System.UInt32,NvAPIWrapper.Native.Display.Structures.PathAdvancedTargetInfo)">
            <summary>
                Creates a new PathTargetInfoV1
            </summary>
            <param name="displayId">Display Id</param>
            <param name="details">Extra information</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV2">
            <summary>
                Holds information about a path's target
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV2.DisplayId">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV2.ToString">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV2.Details">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV2.WindowsCCDTargetId">
            <summary>
                Windows CCD target ID. Must be present only for non-NVIDIA adapter, for NVIDIA adapter this parameter is ignored.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV2.#ctor(System.UInt32)">
            <summary>
                Creates a new PathTargetInfoV1
            </summary>
            <param name="displayId">Display Id</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV2.Equals(NvAPIWrapper.Native.Display.Structures.PathTargetInfoV2)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV2.Equals(NvAPIWrapper.Native.Display.Structures.PathTargetInfoV1)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV2.#ctor(System.UInt32,System.UInt32)">
            <summary>
                Creates a new PathTargetInfoV1
            </summary>
            <param name="displayId">Display Id</param>
            <param name="windowsCCDTargetId">Windows CCD target Id</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV2.#ctor(System.UInt32,NvAPIWrapper.Native.Display.Structures.PathAdvancedTargetInfo)">
            <summary>
                Creates a new PathTargetInfoV1
            </summary>
            <param name="displayId">Display Id</param>
            <param name="details">Extra information</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV2.#ctor(System.UInt32,System.UInt32,NvAPIWrapper.Native.Display.Structures.PathAdvancedTargetInfo)">
            <summary>
                Creates a new PathTargetInfoV1
            </summary>
            <param name="displayId">Display Id</param>
            <param name="windowsCCDTargetId">Windows CCD target Id</param>
            <param name="details">Extra information</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.PathTargetInfoV2.Dispose">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.Position">
            <summary>
                Holds a [X,Y] pair as a position on a 2D plane
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.Position.ToString">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.Position.Equals(NvAPIWrapper.Native.Display.Structures.Position)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.Position.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.Position.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.Position.op_Equality(NvAPIWrapper.Native.Display.Structures.Position,NvAPIWrapper.Native.Display.Structures.Position)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.Position.op_Inequality(NvAPIWrapper.Native.Display.Structures.Position,NvAPIWrapper.Native.Display.Structures.Position)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.Position.#ctor(System.Int32,System.Int32)">
            <summary>
                Creates a new Position
            </summary>
            <param name="x">X value</param>
            <param name="y">Y value</param>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Position.X">
            <summary>
                X value
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Position.Y">
            <summary>
                Y value
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.PrivateDisplayDVCInfo">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.Display.IDisplayDVCInfo" />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PrivateDisplayDVCInfo.CurrentLevel">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PrivateDisplayDVCInfo.MinimumLevel">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PrivateDisplayDVCInfo.NvAPIWrapper#Native#Interfaces#Display#IDisplayDVCInfo#DefaultLevel">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PrivateDisplayDVCInfo.MaximumLevel">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.PrivateDisplayDVCInfoEx">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.Display.IDisplayDVCInfo" />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PrivateDisplayDVCInfoEx.CurrentLevel">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PrivateDisplayDVCInfoEx.MinimumLevel">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PrivateDisplayDVCInfoEx.MaximumLevel">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PrivateDisplayDVCInfoEx.DefaultLevel">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.PrivateDisplayHUEInfo">
            <summary>
                Holds the current and the default HUE information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PrivateDisplayHUEInfo.CurrentAngle">
            <summary>
                Gets or sets the current HUE offset angle [0-359]
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.PrivateDisplayHUEInfo.DefaultAngle">
            <summary>
                Gets or sets the default HUE offset angle [0-359]
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.Resolution">
            <summary>
                Holds a [Width, Height] pair as the resolution of a display device, as well as a color format
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.Resolution.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a new Resolution
            </summary>
            <param name="width">Display resolution width</param>
            <param name="height">Display resolution height</param>
            <param name="colorDepth">Display color depth</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.Resolution.Equals(NvAPIWrapper.Native.Display.Structures.Resolution)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.Resolution.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.Resolution.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.Resolution.op_Equality(NvAPIWrapper.Native.Display.Structures.Resolution,NvAPIWrapper.Native.Display.Structures.Resolution)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.Resolution.op_Inequality(NvAPIWrapper.Native.Display.Structures.Resolution,NvAPIWrapper.Native.Display.Structures.Resolution)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.Resolution.ToString">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Resolution.Width">
            <summary>
                Display resolution width
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Resolution.Height">
            <summary>
                Display resolution height
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Resolution.ColorDepth">
            <summary>
                Display color depth
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.ScanOutInformationV1">
            <summary>
                Contains information regarding the scan-out configurations
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ScanOutInformationV1.SourceDesktopRectangle">
            <summary>
                Gets the operating system display device rectangle in desktop coordinates displayId is scanning out from.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ScanOutInformationV1.SourceViewPortRectangle">
            <summary>
                Gets the area inside the SourceDesktopRectangle which is scanned out to the display.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ScanOutInformationV1.TargetViewPortRectangle">
            <summary>
                Gets the area inside the rectangle described by targetDisplayWidth/Height SourceViewPortRectangle is scanned out
                to.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ScanOutInformationV1.TargetDisplayWidth">
            <summary>
                Gets the horizontal size of the active resolution scanned out to the display.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ScanOutInformationV1.TargetDisplayHeight">
            <summary>
                Gets the vertical size of the active resolution scanned out to the display.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ScanOutInformationV1.CloneImportance">
            <summary>
                Gets the clone importance assigned to the target if the target is a cloned view of the SourceDesktopRectangle
                (0:primary,1 secondary,...).
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ScanOutInformationV1.SourceToTargetRotation">
            <summary>
                Gets the rotation performed between the SourceViewPortRectangle and the TargetViewPortRectangle.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.ScanOutIntensityStateV1">
            <summary>
                Contains information regarding the scan-out intensity state
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ScanOutIntensityStateV1.IsEnabled">
            <summary>
                Gets a boolean value indicating if the scan out intensity is enabled or not
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.ScanOutIntensityV1">
            <inheritdoc cref="T:NvAPIWrapper.Native.Display.Structures.IScanOutIntensity" />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ScanOutIntensityV1.#ctor(System.UInt32,System.UInt32,System.Single[])">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.ScanOutIntensityV1" />.
            </summary>
            <param name="width">The width of the input texture.</param>
            <param name="height">The height of the input texture</param>
            <param name="blendingTexture">The array of floating values building an intensity RGB texture.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ScanOutIntensityV1.Width">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ScanOutIntensityV1.Height">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ScanOutIntensityV1.BlendingTexture">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ScanOutIntensityV1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.ScanOutIntensityV2">
            <inheritdoc cref="T:NvAPIWrapper.Native.Display.Structures.IScanOutIntensity" />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ScanOutIntensityV2.#ctor(System.UInt32,System.UInt32,System.Single[],System.UInt32,System.Single[])">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.ScanOutIntensityV2" />.
            </summary>
            <param name="width">The width of the input texture.</param>
            <param name="height">The height of the input texture</param>
            <param name="blendingTexture">The array of floating values building an intensity RGB texture</param>
            <param name="offsetTextureChannels">The number of channels per pixel in the offset texture</param>
            <param name="offsetTexture">The array of floating values building an offset texture</param>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ScanOutIntensityV2.Width">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ScanOutIntensityV2.Height">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ScanOutIntensityV2.OffsetTextureChannels">
            <summary>
                Gets the number of channels per pixel in the offset texture
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ScanOutIntensityV2.BlendingTexture">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ScanOutIntensityV2.OffsetTexture">
            <summary>
                Gets the array of floating values building an offset texture
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ScanOutIntensityV2.Dispose">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.ScanOutWarpingStateV1">
            <summary>
                Contains information regarding the scan-out warping state
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ScanOutWarpingStateV1.IsEnabled">
            <summary>
                Gets a boolean value indicating if the scan out warping is enabled or not
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.ScanOutWarpingV1">
            <summary>
                Contains information regarding the scan-out warping data
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ScanOutWarpingV1.#ctor(NvAPIWrapper.Native.Display.WarpingVerticeFormat,System.Single[],NvAPIWrapper.Native.General.Structures.Rectangle)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.ScanOutWarpingV1" />.
            </summary>
            <param name="vertexFormat">The format of the input vertices.</param>
            <param name="vertices">The array of floating values containing the warping vertices.</param>
            <param name="textureRectangle">The rectangle in desktop coordinates describing the source area for the warping.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ScanOutWarpingV1.VertexFormat">
            <summary>
                Gets the format of the input vertices
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ScanOutWarpingV1.TextureRectangle">
            <summary>
                Gets the rectangle in desktop coordinates describing the source area for the warping
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ScanOutWarpingV1.Vertices">
            <summary>
                Gets the array of floating values containing the warping vertices
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ScanOutWarpingV1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.SourceModeInfo">
            <summary>
                Holds information about a source mode
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.SourceModeInfo.#ctor(NvAPIWrapper.Native.Display.Structures.Resolution,NvAPIWrapper.Native.Display.ColorFormat,NvAPIWrapper.Native.Display.Structures.Position,NvAPIWrapper.Native.Display.SpanningOrientation,System.Boolean,System.Boolean)">
            <summary>
                Creates a new SourceModeInfo
            </summary>
            <param name="resolution">Source resolution</param>
            <param name="colorFormat">Must be Format.Unknown</param>
            <param name="position">Source position</param>
            <param name="spanningOrientation">Spanning orientation for XP</param>
            <param name="isGDIPrimary">true if this source represents the GDI primary display, otherwise false</param>
            <param name="isSLIFocus">true if this source represents the SLI focus display, otherwise false</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.SourceModeInfo.Equals(NvAPIWrapper.Native.Display.Structures.SourceModeInfo)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.SourceModeInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.SourceModeInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.SourceModeInfo.ToString">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.SourceModeInfo.Resolution">
            <summary>
                Holds the source resolution
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.SourceModeInfo.ColorFormat">
            <summary>
                Ignored at present, must be Format.Unknown
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.SourceModeInfo.Position">
            <summary>
                Is all positions are 0 or invalid, displays will be automatically positioned from left to right with GDI Primary at
                0,0, and all other displays in the order of the path array.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.SourceModeInfo.SpanningOrientation">
            <summary>
                Spanning is only supported on XP
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.SourceModeInfo.IsGDIPrimary">
            <summary>
                Indicates if the path is for the primary GDI display
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.SourceModeInfo.IsSLIFocus">
            <summary>
                Indicates if the path is for the SLI focus display
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.Timing">
            <summary>
                Holds VESA scan out timing parameters
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.Timing.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,NvAPIWrapper.Native.Display.TimingHorizontalSyncPolarity,NvAPIWrapper.Native.Display.TimingVerticalSyncPolarity,NvAPIWrapper.Native.Display.TimingScanMode,NvAPIWrapper.Native.Display.Structures.TimingExtra)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.Timing" /> structure.
            </summary>
            <param name="horizontalVisible">The horizontal visible pixels</param>
            <param name="verticalVisible">The vertical visible pixels</param>
            <param name="horizontalBorder">The horizontal border pixels</param>
            <param name="verticalBorder">The vertical border pixels</param>
            <param name="horizontalFrontPorch">The horizontal front porch pixels</param>
            <param name="verticalFrontPorch">The vertical front porch pixels</param>
            <param name="horizontalSyncWidth">The horizontal sync width pixels</param>
            <param name="verticalSyncWidth">The vertical sync width pixels</param>
            <param name="horizontalTotal">The horizontal total pixels</param>
            <param name="verticalTotal">The vertical total pixels</param>
            <param name="horizontalPolarity">The horizontal sync polarity</param>
            <param name="verticalPolarity">The vertical sync polarity</param>
            <param name="scanMode">The scan mode</param>
            <param name="extra">The extra timing information</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.Timing.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,NvAPIWrapper.Native.Display.TimingHorizontalSyncPolarity,NvAPIWrapper.Native.Display.TimingVerticalSyncPolarity,NvAPIWrapper.Native.Display.TimingScanMode,System.Double,System.UInt16)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.Timing" /> structure.
            </summary>
            <param name="horizontalVisible">The horizontal visible pixels</param>
            <param name="verticalVisible">The vertical visible pixels</param>
            <param name="horizontalBorder">The horizontal border pixels</param>
            <param name="verticalBorder">The vertical border pixels</param>
            <param name="horizontalFrontPorch">The horizontal front porch pixels</param>
            <param name="verticalFrontPorch">The vertical front porch pixels</param>
            <param name="horizontalSyncWidth">The horizontal sync width pixels</param>
            <param name="verticalSyncWidth">The vertical sync width pixels</param>
            <param name="horizontalTotal">The horizontal total pixels</param>
            <param name="verticalTotal">The vertical total pixels</param>
            <param name="horizontalPolarity">The horizontal sync polarity</param>
            <param name="verticalPolarity">The vertical sync polarity</param>
            <param name="scanMode">The scan mode</param>
            <param name="refreshRateFrequencyInHz">The frequency in hertz</param>
            <param name="horizontalPixelRepetition">The number of identical horizontal pixels that are repeated; 1 = no repetition</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.Timing.Equals(NvAPIWrapper.Native.Display.Structures.Timing)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.Timing.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.Timing.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.Timing.op_Equality(NvAPIWrapper.Native.Display.Structures.Timing,NvAPIWrapper.Native.Display.Structures.Timing)">
            <summary>
                Checks two instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.Timing" /> for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>Returns a boolean value indicating if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.Timing.op_Inequality(NvAPIWrapper.Native.Display.Structures.Timing,NvAPIWrapper.Native.Display.Structures.Timing)">
            <summary>
                Checks two instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.Timing" /> for in equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>Returns a boolean value indicating if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Timing.HorizontalVisible">
            <summary>
                Get the horizontal visible pixels
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Timing.HorizontalBorder">
            <summary>
                Get the horizontal border pixels
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Timing.HorizontalFrontPorch">
            <summary>
                Get the horizontal front porch pixels
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Timing.HorizontalSyncWidth">
            <summary>
                Get the horizontal sync width pixels
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Timing.HorizontalTotal">
            <summary>
                Get the horizontal total pixels
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Timing.HorizontalSyncPolarity">
            <summary>
                Get the horizontal sync polarity
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Timing.VerticalVisible">
            <summary>
                Get the vertical visible pixels
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Timing.VerticalBorder">
            <summary>
                Get the vertical border pixels
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Timing.VerticalFrontPorch">
            <summary>
                Get the vertical front porch pixels
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Timing.VerticalSyncWidth">
            <summary>
                Get the vertical sync width pixels
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Timing.VerticalTotal">
            <summary>
                Get the vertical total pixels
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Timing.VerticalSyncPolarity">
            <summary>
                Get the vertical sync polarity
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Timing.ScanMode">
            <summary>
                Get the scan mode
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Timing.PixelClockIn10KHertz">
            <summary>
                Get the pixel clock in 10 kHz
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Timing.Extra">
            <summary>
                Get the other timing related extras
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Timing.HorizontalActive">
            <summary>
                Gets the horizontal active pixels
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Timing.VerticalActive">
            <summary>
                Gets the vertical active pixels
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Timing.HorizontalBackPorch">
            <summary>
                Gets the horizontal back porch pixels
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Timing.HorizontalBlanking">
            <summary>
                Gets the horizontal blanking pixels
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Timing.VerticalBackPorch">
            <summary>
                Gets vertical back porch pixels
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.Timing.VerticalBlanking">
            <summary>
                Gets the vertical blanking pixels
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.TimingExtra">
            <summary>
                Holds NVIDIA-specific timing extras
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.TimingExtra.#ctor(System.Double,System.String,System.UInt16,System.UInt16,System.UInt16,System.UInt32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.TimingExtra" /> structure.
            </summary>
            <param name="frequencyInHertz">The timing frequency in hertz</param>
            <param name="name">The timing source name</param>
            <param name="horizontalAspect">The display horizontal aspect</param>
            <param name="verticalAspect">The display vertical aspect</param>
            <param name="horizontalPixelRepetition">The number of identical horizontal pixels that are repeated; 1 = no repetition</param>
            <param name="hardwareFlags">The NVIDIA hardware-based enhancement, such as double-scan.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.TimingExtra.#ctor(System.UInt32,System.UInt16,System.String,System.UInt16,System.UInt16,System.UInt16,System.UInt32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.TimingExtra" /> structure.
            </summary>
            <param name="frequencyInMillihertz">The timing frequency in millihertz</param>
            <param name="refreshRate">The refresh rate</param>
            <param name="name">The timing source name</param>
            <param name="horizontalAspect">The display horizontal aspect</param>
            <param name="verticalAspect">The display vertical aspect</param>
            <param name="horizontalPixelRepetition">The number of identical horizontal pixels that are repeated; 1 = no repetition</param>
            <param name="hardwareFlags">The NVIDIA hardware-based enhancement, such as double-scan.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.TimingExtra.Equals(NvAPIWrapper.Native.Display.Structures.TimingExtra)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.TimingExtra.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.TimingExtra.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.TimingExtra.HardwareFlags">
            <summary>
                Gets the NVIDIA hardware-based enhancement, such as double-scan.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.TimingExtra.RefreshRate">
            <summary>
                Gets the logical refresh rate to present
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.TimingExtra.FrequencyInMillihertz">
            <summary>
                Gets the physical vertical refresh rate in 0.001Hz
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.TimingExtra.VerticalAspect">
            <summary>
                Gets the display vertical aspect
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.TimingExtra.HorizontalAspect">
            <summary>
                Gets the display horizontal aspect
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.TimingExtra.PixelRepetition">
            <summary>
                Gets the bit-wise pixel repetition factor: 0x1:no pixel repetition; 0x2:each pixel repeats twice horizontally,..
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.TimingExtra.Standard">
            <summary>
                Gets the timing standard
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.TimingExtra.Name">
            <summary>
                Gets the timing name
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.TimingExtra.ToString">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.TimingExtra.op_Equality(NvAPIWrapper.Native.Display.Structures.TimingExtra,NvAPIWrapper.Native.Display.Structures.TimingExtra)">
            <summary>
                Checks two instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.TimingExtra" /> for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>Returns a boolean value indicating if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.TimingExtra.op_Inequality(NvAPIWrapper.Native.Display.Structures.TimingExtra,NvAPIWrapper.Native.Display.Structures.TimingExtra)">
            <summary>
                Checks two instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.TimingExtra" /> for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>Returns a boolean value indicating if the two instances are equal; otherwise false</returns>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.TimingInput">
            <summary>
                Contains the information required for calculating timing for a particular display
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.TimingInput.Width">
            <summary>
                Gets the visible horizontal size
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.TimingInput.Height">
            <summary>
                Gets the visible vertical size
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.TimingInput.RefreshRate">
            <summary>
                Gets the timing refresh rate
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.TimingInput.IsInterlaced">
            <summary>
                Gets a boolean value indicating if the requested timing is an interlaced timing
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.TimingInput.Scaling">
            <summary>
                Gets the preferred scaling
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.TimingInput.TimingType">
            <summary>
                Gets timing type (formula) to use for calculating the timing
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.TimingInput.#ctor(System.UInt32,System.UInt32,System.Single,NvAPIWrapper.Native.Display.TimingOverride,System.Boolean,System.Byte)">
            <summary>
                Creates an instance of the TimingInput
            </summary>
            <param name="width">The preferred visible horizontal size</param>
            <param name="height">The preferred visible vertical size</param>
            <param name="refreshRate">The preferred timing refresh rate</param>
            <param name="timingType">The preferred formula to be used for timing calculation</param>
            <param name="isInterlaced">A boolean value indicating if the preferred timing is interlaced</param>
            <param name="scaling">The preferred scaling factor</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.TimingInput.#ctor(NvAPIWrapper.Native.Display.TVFormat,System.Boolean,System.Byte)">
            <summary>
                Creates an instance of the TimingInput
            </summary>
            <param name="tvFormat">The preferred analog TV format</param>
            <param name="isInterlaced">A boolean value indicating if the preferred timing is interlaced</param>
            <param name="scaling">The preferred scaling factor</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.TimingInput.#ctor(System.Byte,NvAPIWrapper.Native.Display.TimingOverride,System.Boolean,System.Byte)">
            <summary>
                Creates an instance of the TimingInput
            </summary>
            <param name="ceaIdOrPredefinedPSFormatId">
                The CEA id or the predefined PsF format id depending on the value of other
                arguments
            </param>
            <param name="timingType">
                The preferred formula to be used for timing calculation, valid values for this overload are
                <see cref="F:NvAPIWrapper.Native.Display.TimingOverride.EIA861" /> and <see cref="F:NvAPIWrapper.Native.Display.TimingOverride.Predefined" />.
            </param>
            <param name="isInterlaced">A boolean value indicating if the preferred timing is interlaced</param>
            <param name="scaling">The preferred scaling factor</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.TimingInput.#ctor(NvAPIWrapper.Native.Display.TimingOverride)">
            <summary>
                Creates an instance of the TimingInput
            </summary>
            <param name="timingType">
                The preferred formula to be used for timing calculation.
            </param>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.TimingInput.TVFormat">
            <summary>
                Gets the analog TV actual HD/SDTV format
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.TimingInput.CEAId">
            <summary>
                Gets the EIA/CEA 861B/D predefined short timing descriptor id
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.TimingInput.PredefinedPSFormatId">
            <summary>
                Gets the Nvidia predefined PsF format id
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.UnAttachedDisplayHandle">
            <summary>
                UnAttachedDisplayHandle is a one-to-one map to the GDI handle of an unattached display.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.UnAttachedDisplayHandle.Equals(NvAPIWrapper.Native.Display.Structures.UnAttachedDisplayHandle)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.UnAttachedDisplayHandle.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.UnAttachedDisplayHandle.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.UnAttachedDisplayHandle.ToString">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.UnAttachedDisplayHandle.op_Equality(NvAPIWrapper.Native.Display.Structures.UnAttachedDisplayHandle,NvAPIWrapper.Native.Display.Structures.UnAttachedDisplayHandle)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.UnAttachedDisplayHandle.op_Inequality(NvAPIWrapper.Native.Display.Structures.UnAttachedDisplayHandle,NvAPIWrapper.Native.Display.Structures.UnAttachedDisplayHandle)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.UnAttachedDisplayHandle.MemoryAddress">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.UnAttachedDisplayHandle.IsNull">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.ViewPortF">
            <summary>
                Hold information about the screen view port rectangle
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ViewPortF.X">
            <summary>
                Gets the x-coordinate of the viewport top-left point
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ViewPortF.Y">
            <summary>
                Gets the y-coordinate of the viewport top-left point
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ViewPortF.Width">
            <summary>
                Gets the width of the viewport.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.ViewPortF.Height">
            <summary>
                Gets the height of the viewport.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ViewPortF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates an instance of ViewPortF
            </summary>
            <param name="x">The x-coordinate of the viewport top-left point</param>
            <param name="y">The y-coordinate of the viewport top-left point</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ViewPortF.#ctor(System.Drawing.RectangleF)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.Display.Structures.ViewPortF" />
            </summary>
            <param name="rect">The rectangle to take view port information from.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ViewPortF.ToRectangle">
            <summary>
                Return an instance of <see cref="T:System.Drawing.RectangleF" /> representing this view port.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Display.Structures.ViewPortF.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Display.Structures.IScanOutIntensity">
            <summary>
            Contains information regarding the scan-out intensity data
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.IScanOutIntensity.BlendingTexture">
            <summary>
                Gets the array of floating values building an intensity RGB texture
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.IScanOutIntensity.Height">
            <summary>
                Gets the height of the input texture
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Display.Structures.IScanOutIntensity.Width">
            <summary>
                Gets the width of the input texture
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.TargetViewMode">
            <summary>
                Display view modes
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TargetViewMode.Standard">
            <summary>
                Standard view mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TargetViewMode.Clone">
            <summary>
                Cloned view mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TargetViewMode.HorizontalSpan">
            <summary>
                Horizontal span view mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TargetViewMode.VerticalSpan">
            <summary>
                Vertical span view mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TargetViewMode.DualView">
            <summary>
                Dual view mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TargetViewMode.MultiView">
            <summary>
                Multi view mode
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.TimingHorizontalSyncPolarity">
            <summary>
                Horizontal synchronized polarity modes
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingHorizontalSyncPolarity.Positive">
            <summary>
                Positive horizontal synchronized polarity
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingHorizontalSyncPolarity.Negative">
            <summary>
                Negative horizontal synchronized polarity
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingHorizontalSyncPolarity.Default">
            <summary>
                Default horizontal synchronized polarity
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.TimingOverride">
            <summary>
                Timing override modes
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingOverride.Current">
            <summary>
                Current timing
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingOverride.Auto">
            <summary>
                Auto timing
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingOverride.EDID">
            <summary>
                EDID timing
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingOverride.DMT">
            <summary>
                VESA DMT timing
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingOverride.DMTReducedBlanking">
            <summary>
                VESA DMT timing with reduced blanking
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingOverride.CVT">
            <summary>
                VESA CVT timing
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingOverride.CVTReducedBlanking">
            <summary>
                VESA CVT timing with reduced blanking
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingOverride.GTF">
            <summary>
                VESA GTF
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingOverride.EIA861">
            <summary>
                EIA 861x PreDefined timing
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingOverride.AnalogTV">
            <summary>
                AnalogTV PreDefined timing
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingOverride.Custom">
            <summary>
                NVIDIA Custom timing
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingOverride.Predefined">
            <summary>
                NVIDIA PreDefined timing
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingOverride.PSF">
            <summary>
                NVIDIA PreDefined timing
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingOverride.ASPR">
            <summary>
                ASPR timing
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingOverride.SDI">
            <summary>
                Override for SDI timing
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingOverride.Max">
            <summary>
                Not used
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.TimingScanMode">
            <summary>
                Timing scan modes
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingScanMode.Progressive">
            <summary>
                Progressive scan mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingScanMode.Interlaced">
            <summary>
                Interlaced scan mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingScanMode.InterlacedWithExtraVerticalBlank">
            <summary>
                Interlaced scan mode with extra vertical blank
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingScanMode.InterlacedWithNoExtraVerticalBlank">
            <summary>
                Interlaced scan mode without extra vertical blank
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.TimingVerticalSyncPolarity">
            <summary>
                Vertical synchronized polarity modes
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingVerticalSyncPolarity.Positive">
            <summary>
                Positive vertical synchronized polarity
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingVerticalSyncPolarity.Negative">
            <summary>
                Negative vertical synchronized polarity
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TimingVerticalSyncPolarity.Default">
            <summary>
                Default vertical synchronized polarity
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.TVFormat">
            <summary>
                Possible TV formats
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.None">
            <summary>
                Display is not a TV
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.SD_NTSCM">
            <summary>
                Standard definition NTSC M signal
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.SD_NTSCJ">
            <summary>
                Standard definition NTSC J signal
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.SD_PALM">
            <summary>
                Standard definition PAL M signal
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.SD_PALBDGH">
            <summary>
                Standard definition PAL DFGH signal
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.SD_PAL_N">
            <summary>
                Standard definition PAL N signal
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.SD_PAL_NC">
            <summary>
                Standard definition PAL NC signal
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.SD576i">
            <summary>
                Extended definition with height of 576 pixels interlaced
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.SD480i">
            <summary>
                Extended definition with height of 480 pixels interlaced
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.ED480p">
            <summary>
                Extended definition with height of 480 pixels progressive
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.ED576p">
            <summary>
                Extended definition with height of 576 pixels progressive
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.HD720p">
            <summary>
                High definition with height of 720 pixels progressive
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.HD1080i">
            <summary>
                High definition with height of 1080 pixels interlaced
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.HD1080p">
            <summary>
                High definition with height of 1080 pixels progressive
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.HD720p50">
            <summary>
                High definition 50 frames per second with height of 720 pixels progressive
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.HD1080p24">
            <summary>
                High definition 24 frames per second with height of 1080 pixels progressive
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.HD1080i50">
            <summary>
                High definition 50 frames per second with height of 1080 pixels interlaced
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.HD1080p50">
            <summary>
                High definition 50 frames per second with height of 1080 pixels progressive
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.UHD4Kp30">
            <summary>
                Ultra high definition 30 frames per second
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.UHD4Kp30_3840">
            <summary>
                Ultra high definition 30 frames per second with width of 3840 pixels
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.UHD4Kp25">
            <summary>
                Ultra high definition 25 frames per second
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.UHD4Kp25_3840">
            <summary>
                Ultra high definition 25 frames per second with width of 3840 pixels
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.UHD4Kp24">
            <summary>
                Ultra high definition 24 frames per second
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.UHD4Kp24_3840">
            <summary>
                Ultra high definition 24 frames per second with width of 3840 pixels
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.UHD4Kp24_SMPTE">
            <summary>
                Ultra high definition 24 frames per second with SMPTE signal
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.UHD4Kp50_3840">
            <summary>
                Ultra high definition 50 frames per second with width of 3840 pixels
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.UHD4Kp60_3840">
            <summary>
                Ultra high definition 60 frames per second with width of 3840 pixels
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.UHD4Kp30_4096">
            <summary>
                Ultra high definition 30 frames per second with width of 4096 pixels
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.UHD4Kp25_4096">
            <summary>
                Ultra high definition 25 frames per second with width of 4096 pixels
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.UHD4Kp24_4096">
            <summary>
                Ultra high definition 24 frames per second with width of 4096 pixels
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.UHD4Kp50_4096">
            <summary>
                Ultra high definition 50 frames per second with width of 4096 pixels
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.UHD4Kp60_4096">
            <summary>
                Ultra high definition 60 frames per second with width of 4096 pixels
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.SDOther">
            <summary>
                Any other standard definition TV format
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.EDOther">
            <summary>
                Any other extended definition TV format
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.HDOther">
            <summary>
                Any other high definition TV format
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.TVFormat.Any">
            <summary>
                Any other TV format
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Display.WarpingVerticeFormat">
            <summary>
                Holds a list of possible warping vertex formats
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.WarpingVerticeFormat.TriangleStripXYUVRQ">
            <summary>
                XYUVRQ Triangle Strip vertex format
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Display.WarpingVerticeFormat.TrianglesXYUVRQ">
            <summary>
                XYUVRQ Triangles format
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.DRSApi">
            <summary>
                Contains driver settings static functions
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.CreateApplication(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle,NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle,NvAPIWrapper.Native.Interfaces.DRS.IDRSApplication)">
            <summary>
                This API adds an executable name to a profile.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
            <param name="profileHandle">Input profile handle.</param>
            <param name="application">Input <see cref="T:NvAPIWrapper.Native.Interfaces.DRS.IDRSApplication" /> instance containing the executable name.</param>
            <returns>The newly created instance of <see cref="T:NvAPIWrapper.Native.Interfaces.DRS.IDRSApplication" />.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.CreateProfile(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle,NvAPIWrapper.Native.DRS.Structures.DRSProfileV1)">
            <summary>
                This API creates an empty profile.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
            <param name="profile">Input to the <see cref="T:NvAPIWrapper.Native.DRS.Structures.DRSProfileV1" /> instance.</param>
            <returns>The newly created profile handle.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.CreateSession">
            <summary>
                This API allocates memory and initializes the session.
            </summary>
            <returns>The newly created session handle.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.DeleteApplication(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle,NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle,NvAPIWrapper.Native.Interfaces.DRS.IDRSApplication)">
            <summary>
                This API removes an executable from a profile.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
            <param name="profileHandle">Input profile handle.</param>
            <param name="application">Input all the information about the application to be removed.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.DeleteApplication(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle,NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle,System.String)">
            <summary>
                This API removes an executable name from a profile.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
            <param name="profileHandle">Input profile handle.</param>
            <param name="applicationName">Input the executable name to be removed.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.DeleteProfile(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle,NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle)">
            <summary>
                This API deletes a profile or sets it back to a predefined value.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
            <param name="profileHandle">Input profile handle.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.DeleteProfileSetting(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle,NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle,System.UInt32)">
            <summary>
                This API deletes a setting or sets it back to predefined value.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
            <param name="profileHandle">Input profile handle.</param>
            <param name="settingId">Input settingId to be deleted.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.DestroySession(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle)">
            <summary>
                This API frees the allocated resources for the session handle.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.EnumApplications(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle,NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle)">
            <summary>
                This API enumerates all the applications in a given profile.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
            <param name="profileHandle">Input profile handle.</param>
            <returns>Instances of <see cref="T:NvAPIWrapper.Native.Interfaces.DRS.IDRSApplication" /> with all the attributes filled.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.EnumAvailableSettingIds">
            <summary>
                This API enumerates all the Ids of all the settings recognized by NVAPI.
            </summary>
            <returns>An array of <see cref="T:System.UInt32" />s filled with the settings identification numbers of available settings.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.EnumAvailableSettingValues(System.UInt32)">
            <summary>
                This API enumerates all available setting values for a given setting.
            </summary>
            <param name="settingId">Input settingId.</param>
            <returns>All available setting values.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.EnumProfiles(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle)">
            <summary>
                This API enumerates through all the profiles in the session.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
            <returns>Instances of <see cref="T:NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle" /> each representing a profile.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.EnumSettings(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle,NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle)">
            <summary>
                This API enumerates all the settings of a given profile.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
            <param name="profileHandle">Input profile handle.</param>
            <returns>Instances of <see cref="T:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1" />.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.FindApplicationByName(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle,System.String,System.Nullable{NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle}@)">
            <summary>
                This API searches the application and the associated profile for the given application name.
                If a fully qualified path is provided, this function will always return the profile
                the driver will apply upon running the application (on the path provided).
            </summary>
            <param name="sessionHandle">Input to the hSession handle</param>
            <param name="applicationName">Input appName. For best results, provide a fully qualified path of the type</param>
            <param name="profileHandle">The profile handle of the profile that the found application belongs to.</param>
            <returns>An instance of <see cref="T:NvAPIWrapper.Native.Interfaces.DRS.IDRSApplication" />.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.FindProfileByName(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle,System.String)">
            <summary>
                This API finds a profile in the current session.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
            <param name="profileName">Input profileName.</param>
            <returns>The profile handle.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.GetApplicationInfo(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle,NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle,System.String)">
            <summary>
                This API gets information about the given application.  The input application name
                must match exactly what the Profile has stored for the application.
                This function is better used to retrieve application information from a previous
                enumeration.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
            <param name="profileHandle">Input profile handle.</param>
            <param name="applicationName">Input application name.</param>
            <returns>
                An instance of <see cref="T:NvAPIWrapper.Native.Interfaces.DRS.IDRSApplication" /> with all attributes filled if found; otherwise
                <see langword="null" />.
            </returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.GetBaseProfile(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle)">
            <summary>
                Returns the handle to the current global profile.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
            <returns>Base profile handle.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.GetCurrentGlobalProfile(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle)">
            <summary>
                This API returns the handle to the current global profile.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
            <returns>Current global profile handle.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.GetNumberOfProfiles(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle)">
            <summary>
                This API obtains the number of profiles in the current session object.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
            <returns>Number of profiles in the current session.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.GetProfileInfo(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle,NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle)">
            <summary>
                This API gets information about the given profile.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
            <param name="profileHandle">Input profile handle.</param>
            <returns>An instance of <see cref="T:NvAPIWrapper.Native.DRS.Structures.DRSProfileV1" /> with all attributes filled.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.GetSetting(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle,NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle,System.UInt32)">
            <summary>
                This API gets information about the given setting.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
            <param name="profileHandle">Input profile handle.</param>
            <param name="settingId">Input settingId.</param>
            <returns>An instance of <see cref="T:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1" /> describing the setting if found; otherwise <see langword="null" />.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.GetSettingIdFromName(System.String)">
            <summary>
                This API gets the binary identification number of a setting given the setting name.
            </summary>
            <param name="settingName">Input Unicode settingName.</param>
            <returns>The corresponding settingId.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.GetSettingNameFromId(System.UInt32)">
            <summary>
                This API gets the setting name given the binary identification number.
            </summary>
            <param name="settingId">Input settingId.</param>
            <returns>Corresponding settingName.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.LoadSettings(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle)">
            <summary>
                This API loads and parses the settings data.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.LoadSettings(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle,System.String)">
            <summary>
                This API loads settings from the given file path.
            </summary>
            <param name="sessionHandle">Input to the session handle</param>
            <param name="fileName">Binary full file path.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.RestoreDefaults(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle)">
            <summary>
                This API restores the whole system to predefined(default) values.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.RestoreDefaults(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle,NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle)">
            <summary>
                This API restores the given profile to predefined(default) values.
                Any and all user specified modifications will be removed.
                If the whole profile was set by the user, the profile will be removed.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
            <param name="profileHandle">Input profile handle.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.RestoreDefaults(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle,NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle,System.UInt32)">
            <summary>
                This API restores the given profile setting to predefined(default) values.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
            <param name="profileHandle">Input profile handle.</param>
            <param name="settingId">Input settingId.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.SaveSettings(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle)">
            <summary>
                This API saves the settings data to the system.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.SaveSettings(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle,System.String)">
            <summary>
                This API saves settings to the given file path.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
            <param name="fileName">Binary full file path.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.SetCurrentGlobalProfile(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle,System.String)">
            <summary>
                This API sets the current global profile in the driver.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
            <param name="profileName">Input the new current global profile name.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.SetProfileInfo(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle,NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle,NvAPIWrapper.Native.DRS.Structures.DRSProfileV1)">
            <summary>
                Specifies flags for a given profile. Currently only the GPUSupport is
                used to update the profile. Neither the name, number of settings or applications
                or other profile information can be changed with this function.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
            <param name="profileHandle">Input profile handle.</param>
            <param name="profile">Input the new profile info.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DRSApi.SetSetting(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle,NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle,NvAPIWrapper.Native.DRS.Structures.DRSSettingV1)">
            <summary>
                This API adds/modifies a setting to a profile.
            </summary>
            <param name="sessionHandle">Input to the session handle.</param>
            <param name="profileHandle">Input profile handle.</param>
            <param name="setting">
                An instance of <see cref="T:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1" /> containing the setting identification number and new
                value for the setting.
            </param>
        </member>
        <member name="T:NvAPIWrapper.Native.DRS.DRSSettingLocation">
            <summary>
                Holds possible values for the setting location
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.DRS.DRSSettingLocation.CurrentProfile">
            <summary>
                Setting is part of the current profile
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.DRS.DRSSettingLocation.GlobalProfile">
            <summary>
                Setting is part of the global profile
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.DRS.DRSSettingLocation.BaseProfile">
            <summary>
                Setting is part of the base profile
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.DRS.DRSSettingLocation.DefaultProfile">
            <summary>
                Setting is part of the default profile
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.DRS.DRSSettingType">
            <summary>
                Holds a list of possible setting value types
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.DRS.DRSSettingType.Integer">
            <summary>
                Integer value type
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.DRS.DRSSettingType.Binary">
            <summary>
                Binary value type
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.DRS.DRSSettingType.String">
            <summary>
                ASCII string value type
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.DRS.DRSSettingType.UnicodeString">
            <summary>
                Unicode string value type
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV1">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.DRS.IDRSApplication" />
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV1.#ctor(System.String,System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV1" />
            </summary>
            <param name="applicationName">The application file name.</param>
            <param name="friendlyName">The application friendly name.</param>
            <param name="launcherName">The application launcher name.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV1.IsPredefined">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV1.ApplicationName">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV1.FriendlyName">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV1.LauncherName">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV2">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.DRS.IDRSApplication" />
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV2.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV2" />
            </summary>
            <param name="applicationName">The application file name.</param>
            <param name="friendlyName">The application friendly name.</param>
            <param name="launcherName">The application launcher name.</param>
            <param name="fileInFolders">The list of files that are necessary to be present in the application parent directory.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV2.IsPredefined">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV2.ApplicationName">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV2.FriendlyName">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV2.LauncherName">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV2.FilesInFolder">
            <summary>
                Gets the list of files that are necessary to be present in the application parent directory.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV3">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.DRS.IDRSApplication" />
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV3.#ctor(System.String,System.String,System.String,System.String[],System.Boolean)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV3" />
            </summary>
            <param name="applicationName">The application file name.</param>
            <param name="friendlyName">The application friendly name.</param>
            <param name="launcherName">The application launcher name.</param>
            <param name="fileInFolders">The list of files that are necessary to be present in the application parent directory.</param>
            <param name="isMetro">A boolean value indicating if this application is a metro application.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV3.IsPredefined">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV3.IsMetroApplication">
            <summary>
                Gets a boolean value indicating if this application is a metro application
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV3.HasCommandLine">
            <summary>
                Gets a boolean value indicating if this application has command line arguments
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV3.ApplicationName">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV3.FriendlyName">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV3.LauncherName">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV3.FilesInFolder">
            <summary>
                Gets the list of files that are necessary to be present in the application parent directory.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV4">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.DRS.IDRSApplication" />
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV4.#ctor(System.String,System.String,System.String,System.String[],System.Boolean,System.String)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV4" />
            </summary>
            <param name="applicationName">The application file name.</param>
            <param name="friendlyName">The application friendly name.</param>
            <param name="launcherName">The application launcher name.</param>
            <param name="fileInFolders">The list of files that are necessary to be present in the application parent directory.</param>
            <param name="isMetro">A boolean value indicating if this application is a metro application.</param>
            <param name="commandLine">The application's command line arguments.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV4.IsPredefined">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV4.IsMetroApplication">
            <summary>
                Gets a boolean value indicating if this application is a metro application
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV4.HasCommandLine">
            <summary>
                Gets a boolean value indicating if this application has command line arguments
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV4.ApplicationName">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV4.ApplicationCommandLine">
            <summary>
                Gets the application command line arguments
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV4.FriendlyName">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV4.LauncherName">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSApplicationV4.FilesInFolder">
            <summary>
                Gets the list of files that are necessary to be present in the application parent directory.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.DRS.Structures.DRSGPUSupport">
            <summary>
                Contains a list of supported GPU series by a NVIDIA driver setting profile
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSGPUSupport.IsGeForceSupported">
            <summary>
                Gets or sets a value indicating if the GeForce line of products are supported
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSGPUSupport.IsQuadroSupported">
            <summary>
                Gets or sets a value indicating if the Quadro line of products are supported
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSGPUSupport.IsNVSSupported">
            <summary>
                Gets or sets a value indicating if the NVS line of products are supported
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSGPUSupport.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle">
            <summary>
                DRSProfileHandle is a reference to a DRS profile.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle.Equals(NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle.ToString">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle.MemoryAddress">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle.IsNull">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle.op_Equality(NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle,NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle.op_Inequality(NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle,NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle.DefaultHandle">
            <summary>
                Gets default DRSProfileHandle with a null pointer
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSProfileHandle.DefaultGlobalProfileHandle">
            <summary>
                Gets the default global profile handle
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.DRS.Structures.DRSProfileV1">
            <summary>
                Represents a NVIDIA driver settings profile
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSProfileV1.#ctor(System.String,NvAPIWrapper.Native.DRS.Structures.DRSGPUSupport)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.DRS.Structures.DRSProfileV1" /> with the passed name and GPU series support list.
            </summary>
            <param name="name">The name of the profile.</param>
            <param name="gpuSupport">An instance of <see cref="T:NvAPIWrapper.Native.DRS.Structures.DRSGPUSupport" /> containing the list of supported GPU series.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSProfileV1.Name">
            <summary>
                Gets the name of the profile
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSProfileV1.GPUSupport">
            <summary>
                Gets or sets the GPU series support list
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSProfileV1.IsPredefined">
            <summary>
                Gets a boolean value indicating if this profile is predefined
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSProfileV1.NumberOfApplications">
            <summary>
                Gets the number of applications registered under this profile
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSProfileV1.NumberOfSettings">
            <summary>
                Gets the number of setting registered under this profile
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle">
            <summary>
                DRSSessionHandle is a reference to a DRS session.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle.Equals(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle.ToString">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle.MemoryAddress">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle.IsNull">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle.op_Equality(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle,NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle.op_Inequality(NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle,NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSSessionHandle.DefaultHandle">
            <summary>
                Gets default DRSSessionHandle with a null pointer
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1">
            <summary>
                Represents a NVIDIA driver setting
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1.#ctor(System.UInt32,NvAPIWrapper.Native.DRS.DRSSettingType,System.Object)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1" /> containing the passed value.
            </summary>
            <param name="id">The setting identification number.</param>
            <param name="settingType">The type of the setting's value</param>
            <param name="value">The setting's value</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1.#ctor(System.UInt32,System.String)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1" /> containing the passed value.
            </summary>
            <param name="id">The setting identification number.</param>
            <param name="value">The setting's value</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1.#ctor(System.UInt32,System.UInt32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1" /> containing the passed value.
            </summary>
            <param name="id">The setting identification number.</param>
            <param name="value">The setting's value</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1.#ctor(System.UInt32,System.Byte[])">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1" /> containing the passed value.
            </summary>
            <param name="id">The setting identification number.</param>
            <param name="value">The setting's value</param>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1.Name">
            <summary>
                Gets the name of the setting
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1.Id">
            <summary>
                Gets the identification number of the setting
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1.SettingType">
            <summary>
                Gets the setting's value type
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1.SettingLocation">
            <summary>
                Gets the setting location
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1.IsCurrentValuePredefined">
            <summary>
                Gets a boolean value indicating if the current value is the predefined value
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1.IsPredefinedValueValid">
            <summary>
                Gets a boolean value indicating if the predefined value is available and valid
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1.GetPredefinedValueAsInteger">
            <summary>
                Returns the predefined value as an integer
            </summary>
            <returns>An integer representing the predefined value</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1.GetPredefinedValueAsBinary">
            <summary>
                Returns the predefined value as an array of bytes
            </summary>
            <returns>An byte array representing the predefined value</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1.GetPredefinedValueAsUnicodeString">
            <summary>
                Returns the predefined value as an unicode string
            </summary>
            <returns>An unicode string representing the predefined value</returns>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1.PredefinedValue">
            <summary>
                Gets the setting's predefined value
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1.GetCurrentValueAsInteger">
            <summary>
                Returns the current value as an integer
            </summary>
            <returns>An integer representing the current value</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1.GetCurrentValueAsBinary">
            <summary>
                Returns the current value as an array of bytes
            </summary>
            <returns>An byte array representing the current value</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1.GetCurrentValueAsUnicodeString">
            <summary>
                Returns the current value as an unicode string
            </summary>
            <returns>An unicode string representing the current value</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1.SetCurrentValueAsInteger(System.UInt32)">
            <summary>
                Sets the passed value as the current value
            </summary>
            <param name="value">The new value for the setting</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1.SetCurrentValueAsBinary(System.Byte[])">
            <summary>
                Sets the passed value as the current value
            </summary>
            <param name="value">The new value for the setting</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1.SetCurrentValueAsUnicodeString(System.String)">
            <summary>
                Sets the passed value as the current value
            </summary>
            <param name="value">The new value for the setting</param>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSSettingV1.CurrentValue">
            <summary>
                Gets or sets the setting's current value
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.DRS.Structures.DRSSettingValue">
            <summary>
                Represents a setting value
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingValue.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.DRS.Structures.DRSSettingValue" /> containing the passed unicode string as the value
            </summary>
            <param name="value">The unicode string value</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingValue.#ctor(System.Byte[])">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.DRS.Structures.DRSSettingValue" /> containing the passed byte array as the value
            </summary>
            <param name="value">The byte array value</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingValue.#ctor(System.UInt32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.DRS.Structures.DRSSettingValue" /> containing the passed integer as the value
            </summary>
            <param name="value">The integer value</param>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingValue.AsInteger">
            <summary>
                Returns the value as an integer
            </summary>
            <returns>An integer representing the value</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingValue.AsBinary">
            <summary>
                Returns the value as an array of bytes
            </summary>
            <returns>An array of bytes representing the value</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingValue.AsUnicodeString">
            <summary>
                Returns the value as an unicode string
            </summary>
            <returns>An unicode string representing the value</returns>
        </member>
        <member name="T:NvAPIWrapper.Native.DRS.Structures.DRSSettingValues">
            <summary>
                Contains a list of all possible values for a setting as well as its default value
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSSettingValues.SettingType">
            <summary>
                Gets the setting's value type
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSSettingValues.Values">
            <summary>
                Gets a list of possible values for the setting
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.DRS.Structures.DRSSettingValues.DefaultValue">
            <summary>
                Gets the default value of the setting
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingValues.DefaultValueAsInteger">
            <summary>
                Returns the default value as an integer
            </summary>
            <returns>An integer representing the default value</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingValues.DefaultValueAsBinary">
            <summary>
                Returns the default value as a byte array
            </summary>
            <returns>An array of bytes representing the default value</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingValues.DefaultValueAsUnicodeString">
            <summary>
                Returns the default value as an unicode string
            </summary>
            <returns>A string representing the default value</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingValues.ValuesAsInteger">
            <summary>
                Returns the setting's possible values as an array of integers
            </summary>
            <returns>An array of integers representing the possible values</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingValues.ValuesAsBinary">
            <summary>
                Returns the setting's possible values as an array of byte arrays
            </summary>
            <returns>An array of byte arrays representing the possible values</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.DRS.Structures.DRSSettingValues.ValuesAsUnicodeString">
            <summary>
                Returns the setting's possible values as an array of unicode strings
            </summary>
            <returns>An array of unicode strings representing the possible values</returns>
        </member>
        <member name="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">
            <summary>
                Represents errors that raised by NVIDIA Api
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Exceptions.NVIDIAApiException.Message">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Exceptions.NVIDIAApiException.Status">
            <summary>
                Gets NVIDIA Api exception status code
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Exceptions.NVIDIANotSupportedException">
            <summary>
                Represents errors that raised by NvAPIWrapper
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GeneralApi">
            <summary>
                Contains system and general static functions
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GeneralApi.GetChipsetInfo">
            <summary>
                This function returns information about the system's chipset.
            </summary>
            <returns>Information about the system's chipset</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIANotSupportedException">This operation is not supported.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: Invalid argument</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GeneralApi.GetDriverAndBranchVersion(System.String@)">
            <summary>
                This API returns display driver version and driver-branch string.
            </summary>
            <param name="branchVersion">Contains the driver-branch string after successful return.</param>
            <returns>Returns driver version</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ApiNotInitialized: NVAPI not initialized</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: Miscellaneous error occurred</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GeneralApi.GetErrorMessage(NvAPIWrapper.Native.General.Status)">
            <summary>
                This function converts an NvAPI error code into a null terminated string.
            </summary>
            <param name="statusCode">The error code to convert</param>
            <returns>The string corresponding to the error code</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GeneralApi.GetInterfaceVersionString">
            <summary>
                This function returns a string describing the version of the NvAPI library. The contents of the string are human
                readable. Do not assume a fixed format.
            </summary>
            <returns>User readable string giving NvAPI version information</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">See NVIDIAApiException.Status for the reason of the exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GeneralApi.GetLidAndDockInfo">
            <summary>
                This function returns the current lid and dock information.
            </summary>
            <returns>Current lid and dock information</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: Generic error</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NotSupported: Requested feature not supported</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.HandleInvalidated: Handle is no longer valid</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ApiNotInitialized: NvAPI_Initialize() has not been called</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GeneralApi.Initialize">
            <summary>
                This function initializes the NvAPI library (if not already initialized) but always increments the ref-counter.
                This must be called before calling other NvAPI_ functions.
            </summary>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: Generic error</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.LibraryNotFound: nvapi.dll can not be loaded</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GeneralApi.RestartDisplayDriver">
            <summary>
                PRIVATE - Requests to restart the display driver
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GeneralApi.Unload">
            <summary>
                Decrements the ref-counter and when it reaches ZERO, unloads NVAPI library.
                This must be called in pairs with NvAPI_Initialize.
                Note: By design, it is not mandatory to call NvAPI_Initialize before calling any NvAPI.
                When any NvAPI is called without first calling NvAPI_Initialize, the internal ref-counter will be implicitly
                incremented. In such cases, calling NvAPI_Initialize from a different thread will result in incrementing the
                ref-count again and the user has to call NvAPI_Unload twice to unload the library. However, note that the implicit
                increment of the ref-counter happens only once.
                If the client wants unload functionality, it is recommended to always call NvAPI_Initialize and NvAPI_Unload in
                pairs.
                Unloading NvAPI library is not supported when the library is in a resource locked state.
                Some functions in the NvAPI library initiates an operation or allocates certain resources and there are
                corresponding functions available, to complete the operation or free the allocated resources. All such function
                pairs are designed to prevent unloading NvAPI library.
                For example, if NvAPI_Unload is called after NvAPI_XXX which locks a resource, it fails with NVAPI_ERROR.
                Developers need to call the corresponding NvAPI_YYY to unlock the resources, before calling NvAPI_Unload again.
            </summary>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: Generic error</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">
                Status.ApiInUse: At least an API is still being called hence cannot unload NVAPI
                library from process
            </exception>
        </member>
        <member name="T:NvAPIWrapper.Native.General.ChipsetInfoFlag">
            <summary>
                Chipset information flags - obsolete
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.ChipsetInfoFlag.None">
            <summary>
                No flags
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.ChipsetInfoFlag.Hybrid">
            <summary>
                Hybrid chipset configuration
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.General.Status">
            <summary>
                NvAPI status codes
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.Ok">
            <summary>
                Success. Request is completed.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.Error">
            <summary>
                Generic error
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.LibraryNotFound">
            <summary>
                NVAPI support library cannot be loaded.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.NoImplementation">
            <summary>
                Not implemented in current driver installation
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ApiNotInitialized">
            <summary>
                NvAPI_Initialize() has not been called (successfully)
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.InvalidArgument">
            <summary>
                Invalid argument
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.NvidiaDeviceNotFound">
            <summary>
                No NVIDIA display driver was found
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.EndEnumeration">
            <summary>
                No more to enumerate
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.InvalidHandle">
            <summary>
                Invalid handle
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.IncompatibleStructureVersion">
            <summary>
                An argument's structure version is not supported
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.HandleInvalidated">
            <summary>
                Handle is no longer valid (likely due to GPU or display re-configuration)
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.OpenGLContextNotCurrent">
            <summary>
                No NVIDIA OpenGL context is current (but needs to be)
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.InvalidPointer">
            <summary>
                An invalid pointer, usually NULL, was passed as a parameter
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.NoGLExpert">
            <summary>
                OpenGL Expert is not supported by the current drivers
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.InstrumentationDisabled">
            <summary>
                OpenGL Expert is supported, but driver instrumentation is currently disabled
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ExpectedLogicalGPUHandle">
            <summary>
                Expected a logical GPU handle for one or more parameters
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ExpectedPhysicalGPUHandle">
            <summary>
                Expected a physical GPU handle for one or more parameters
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ExpectedDisplayHandle">
            <summary>
                Expected an NV display handle for one or more parameters
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.InvalidCombination">
            <summary>
                Used in some commands to indicate that the combination of parameters is not valid
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.NotSupported">
            <summary>
                Requested feature not supported in the selected GPU
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.PortIdNotFound">
            <summary>
                NO port Id found for I2C transaction
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ExpectedUnattachedDisplayHandle">
            <summary>
                Expected an unattached display handle as one of the input param
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.InvalidPerformanceLevel">
            <summary>
                Invalid performance level
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.DeviceBusy">
            <summary>
                Device is busy, request not fulfilled
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.NvPersistFileNotFound">
            <summary>
                NVIDIA persist file is not found
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.PersistDataNotFound">
            <summary>
                NVIDIA persist data is not found
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ExpectedTVDisplay">
            <summary>
                Expected TV output display
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ExpectedTVDisplayOnDConnector">
            <summary>
                Expected TV output on D Connector - HDTV_EIAJ4120.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.NoActiveSLITopology">
            <summary>
                SLI is not active on this device
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.SLIRenderingModeNotAllowed">
            <summary>
                Setup of SLI rendering mode is not possible right now
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ExpectedDigitalFlatPanel">
            <summary>
                Expected digital flat panel
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ArgumentExceedMaxSize">
            <summary>
                Argument exceeds expected size
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.DeviceSwitchingNotAllowed">
            <summary>
                Inhibit ON due to one of the flags in NV_GPU_DISPLAY_CHANGE_INHIBIT or SLI Active
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.TestingClocksNotSupported">
            <summary>
                Testing clocks not supported
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.UnknownUnderScanConfig">
            <summary>
                The specified underscan config is from an unknown source (e.g. INF)
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.TimeoutReConfiguringGPUTopology">
            <summary>
                Timeout while reconfiguring GPUs
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.DataNotFound">
            <summary>
                Requested data was not found
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ExpectedAnalogDisplay">
            <summary>
                Expected analog display
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.NoVideoLink">
            <summary>
                No SLI video bridge present
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.RequiresReboot">
            <summary>
                NvAPI requires reboot for its settings to take effect
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.InvalidHybridMode">
            <summary>
                The function is not supported with the current hybrid mode.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.MixedTargetTypes">
            <summary>
                The target types are not all the same
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.SYSWOW64NotSupported">
            <summary>
                The function is not supported from 32-bit on a 64-bit system
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ImplicitSetGPUTopologyChangeNotAllowed">
            <summary>
                There is any implicit GPU topology active. Use NVAPI_SetHybridMode to change topology.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.RequestUserToCloseNonMigratableApps">
            <summary>
                Prompt the user to close all non-migratable applications.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.OutOfMemory">
            <summary>
                Could not allocate sufficient memory to complete the call
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.WasStillDrawing">
            <summary>
                The previous operation that is transferring information to or from this surface is incomplete
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.FileNotFound">
            <summary>
                The file was not found
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.TooManyUniqueStateObjects">
            <summary>
                There are too many unique instances of a particular type of state object
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.InvalidCall">
            <summary>
                The method call is invalid. For example, a method's parameter may not be a valid pointer
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.D3D101LibraryNotFound">
            <summary>
                d3d10_1.dll can not be loaded
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.FunctionNotFound">
            <summary>
                Couldn't find the function in loaded DLL library
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.InvalidUserPrivilege">
            <summary>
                Current User is not Administrator
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ExpectedNonPrimaryDisplayHandle">
            <summary>
                The handle corresponds to GDIPrimary
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ExpectedComputeGPUHandle">
            <summary>
                Setting PhysX GPU requires that the GPU is compute capable
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.StereoNotInitialized">
            <summary>
                Stereo part of NvAPI failed to initialize completely. Check if stereo driver is installed.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.StereoRegistryAccessFailed">
            <summary>
                Access to stereo related registry keys or values failed.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.StereoRegistryProfileTypeNotSupported">
            <summary>
                Given registry profile type is not supported.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.StereoRegistryValueNotSupported">
            <summary>
                Given registry value is not supported.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.StereoNotEnabled">
            <summary>
                Stereo is not enabled and function needed it to execute completely.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.StereoNotTurnedOn">
            <summary>
                Stereo is not turned on and function needed it to execute completely.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.StereoInvalidDeviceInterface">
            <summary>
                Invalid device interface.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.StereoParameterOutOfRange">
            <summary>
                Separation percentage or JPEG image capture quality out of [0-100] range.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.StereoFrustumAdjustModeNotSupported">
            <summary>
                Given frustum adjust mode is not supported.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.TopologyNotPossible">
            <summary>
                The mosaic topology is not possible given the current state of HW
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ModeChangeFailed">
            <summary>
                An attempt to do a display resolution mode change has failed
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.D3D11LibraryNotFound">
            <summary>
                d3d11.dll/d3d11_beta.dll cannot be loaded.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.InvalidAddress">
            <summary>
                Address outside of valid range.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.StringTooSmall">
            <summary>
                The pre-allocated string is too small to hold the result.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.MatchingDeviceNotFound">
            <summary>
                The input does not match any of the available devices.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.DriverRunning">
            <summary>
                Driver is running.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.DriverNotRunning">
            <summary>
                Driver is not running.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ErrorDriverReloadRequired">
            <summary>
                A driver reload is required to apply these settings.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.SetNotAllowed">
            <summary>
                Intended setting is not allowed.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.AdvancedDisplayTopologyRequired">
            <summary>
                Information can't be returned due to "advanced display topology".
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.SettingNotFound">
            <summary>
                Setting is not found.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.SettingSizeTooLarge">
            <summary>
                Setting size is too large.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.TooManySettingsInProfile">
            <summary>
                There are too many settings for a profile.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ProfileNotFound">
            <summary>
                Profile is not found.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ProfileNameInUse">
            <summary>
                Profile name is duplicated.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ProfileNameEmpty">
            <summary>
                Profile name is empty.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ExecutableNotFound">
            <summary>
                Application not found in the Profile.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ExecutableAlreadyInUse">
            <summary>
                Application already exists in the other profile.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.DataTypeMismatch">
            <summary>
                Data Type mismatch
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ProfileRemoved">
            <summary>
                The profile passed as parameter has been removed and is no longer valid.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.UnregisteredResource">
            <summary>
                An unregistered resource was passed as a parameter.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.IdOutOfRange">
            <summary>
                The DisplayId corresponds to a display which is not within the normal outputId range.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.DisplayConfigValidationFailed">
            <summary>
                Display topology is not valid so the driver cannot do a mode set on this configuration.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.DPMSTChanged">
            <summary>
                Display Port Multi-Stream topology has been changed.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.InsufficientBuffer">
            <summary>
                Input buffer is insufficient to hold the contents.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.AccessDenied">
            <summary>
                No access to the caller.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.MosaicNotActive">
            <summary>
                The requested action cannot be performed without Mosaic being enabled.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ShareResourceRelocated">
            <summary>
                The surface is relocated away from video memory.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.RequestUserToDisableDWM">
            <summary>
                The user should disable DWM before calling NvAPI.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.D3DDeviceLost">
            <summary>
                D3D device status is "D3DERR_DEVICELOST" or "D3DERR_DEVICENOTRESET" - the user has to reset the device.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.InvalidConfiguration">
            <summary>
                The requested action cannot be performed in the current state.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.StereoHandshakeNotDone">
            <summary>
                Call failed as stereo handshake not completed.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ExecutablePathIsAmbiguous">
            <summary>
                The path provided was too short to determine the correct NVDRS_APPLICATION
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.DefaultStereoProfileIsNotDefined">
            <summary>
                Default stereo profile is not currently defined
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.DefaultStereoProfileDoesNotExist">
            <summary>
                Default stereo profile does not exist
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ClusterAlreadyExists">
            <summary>
                A cluster is already defined with the given configuration.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.DPMSTDisplayIdExpected">
            <summary>
                The input display id is not that of a multi stream enabled connector or a display device in a multi stream topology
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.InvalidDisplayId">
            <summary>
                The input display id is not valid or the monitor associated to it does not support the current operation
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.StreamIsOutOfSync">
            <summary>
                While playing secure audio stream, stream goes out of sync
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.IncompatibleAudioDriver">
            <summary>
                Older audio driver version than required
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ValueAlreadySet">
            <summary>
                Value already set, setting again not allowed.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.Timeout">
            <summary>
                Requested operation timed out
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.GPUWorkstationFeatureIncomplete">
            <summary>
                The requested workstation feature set has incomplete driver internal allocation resources
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.StereoInitActivationNotDone">
            <summary>
                Call failed because InitActivation was not called.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.SyncNotActive">
            <summary>
                The requested action cannot be performed without Sync being enabled.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.SyncMasterNotFound">
            <summary>
                The requested action cannot be performed without Sync Master being enabled.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.InvalidSyncTopology">
            <summary>
                Invalid displays passed in the NV_GSYNC_DISPLAY pointer.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ECIDSignAlgoUnsupported">
            <summary>
                The specified signing algorithm is not supported. Either an incorrect value was entered or the current installed
                driver/hardware does not support the input value.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ECIDKeyVerificationFailed">
            <summary>
                The encrypted public key verification has failed.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.FirmwareOutOfDate">
            <summary>
                The device's firmware is out of date.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.FirmwareRevisionNotSupported">
            <summary>
                The device's firmware is not supported.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.LicenseCallerAuthenticationFailed">
            <summary>
                The caller is not authorized to modify the License.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.D3DDeviceNotRegistered">
            <summary>
                The user tried to use a deferred context without registering the device first
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ResourceNotAcquired">
            <summary>
                Head or SourceId was not reserved for the VR Display before doing the Mode-Set.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.TimingNotSupported">
            <summary>
                Provided timing is not supported.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.HDCPEncryptionFailed">
            <summary>
                HDCP Encryption Failed for the device. Would be applicable when the device is HDCP Capable.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.PCLKLimitationFailed">
            <summary>
                Provided mode is over sink device pclk limitation.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.NoConnectorFound">
            <summary>
                No connector on GPU found.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.HDCPDisabled">
            <summary>
                When a non-HDCP capable HMD is connected, we would inform user by this code.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.ApiInUse">
            <summary>
                At least an API is still being called
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.General.Status.NVIDIADisplayNotFound">
            <summary>
                No display found on Nvidia GPU(s).
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.General.Structures.ChipsetInfoV1">
            <summary>
                Holds information about the system's chipset.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.General.Structures.ChipsetInfoV1.Equals(NvAPIWrapper.Native.General.Structures.ChipsetInfoV1)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.General.Structures.ChipsetInfoV1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.General.Structures.ChipsetInfoV1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.General.Structures.ChipsetInfoV1.ToString">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV1.VendorId">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV1.DeviceId">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV1.VendorName">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV1.ChipsetName">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV1.Flags">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.General.Structures.ChipsetInfoV2">
            <summary>
                Holds information about the system's chipset.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.General.Structures.ChipsetInfoV2.Equals(NvAPIWrapper.Native.General.Structures.ChipsetInfoV2)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.General.Structures.ChipsetInfoV2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.General.Structures.ChipsetInfoV2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.General.Structures.ChipsetInfoV2.ToString">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV2.VendorId">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV2.DeviceId">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV2.VendorName">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV2.ChipsetName">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV2.Flags">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.General.Structures.ChipsetInfoV3">
            <summary>
                Holds information about the system's chipset.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.General.Structures.ChipsetInfoV3.Equals(NvAPIWrapper.Native.General.Structures.ChipsetInfoV3)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.General.Structures.ChipsetInfoV3.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.General.Structures.ChipsetInfoV3.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.General.Structures.ChipsetInfoV3.ToString">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV3.VendorId">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV3.DeviceId">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV3.VendorName">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV3.ChipsetName">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV3.Flags">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV3.SubSystemVendorId">
            <summary>
                Chipset subsystem vendor identification
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV3.SubSystemDeviceId">
            <summary>
                Chipset subsystem device identification
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV3.SubSystemVendorName">
            <summary>
                Chipset subsystem vendor name
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.General.Structures.ChipsetInfoV4">
            <summary>
                Holds information about the system's chipset.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.General.Structures.ChipsetInfoV4.Equals(NvAPIWrapper.Native.General.Structures.ChipsetInfoV4)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.General.Structures.ChipsetInfoV4.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.General.Structures.ChipsetInfoV4.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.General.Structures.ChipsetInfoV4.ToString">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV4.VendorId">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV4.DeviceId">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV4.VendorName">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV4.ChipsetName">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV4.Flags">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV4.SubSystemVendorId">
            <summary>
                Chipset subsystem vendor identification
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV4.SubSystemDeviceId">
            <summary>
                Chipset subsystem device identification
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV4.SubSystemVendorName">
            <summary>
                Chipset subsystem vendor name
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV4.HostBridgeVendorId">
            <summary>
                Host bridge vendor identification
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV4.HostBridgeDeviceId">
            <summary>
                Host bridge device identification
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV4.HostBridgeSubSystemVendorId">
            <summary>
                Host bridge subsystem vendor identification
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.ChipsetInfoV4.HostBridgeSubSystemDeviceId">
            <summary>
                Host bridge subsystem device identification
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.General.Structures.LidDockParameters">
            <summary>
                Holds information about the lid and dock
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.General.Structures.LidDockParameters.Equals(NvAPIWrapper.Native.General.Structures.LidDockParameters)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.General.Structures.LidDockParameters.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.General.Structures.LidDockParameters.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.LidDockParameters.CurrentLidState">
            <summary>
                Gets current lid state
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.LidDockParameters.CurrentDockState">
            <summary>
                Gets current dock state
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.LidDockParameters.CurrentLidPolicy">
            <summary>
                Gets current lid policy
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.LidDockParameters.CurrentDockPolicy">
            <summary>
                Gets current dock policy
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.LidDockParameters.ForcedLidMechanismPresent">
            <summary>
                Gets forced lid mechanism present
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.LidDockParameters.ForcedDockMechanismPresent">
            <summary>
                Gets forced dock mechanism present
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.General.Structures.Rectangle">
            <summary>
                Represents a rectangle coordinates
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.General.Structures.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.General.Structures.Rectangle" />
            </summary>
            <param name="x">The horizontal location value.</param>
            <param name="y">The vertical location value.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.Rectangle.X">
            <summary>
                Gets the horizontal location value
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.Rectangle.Y">
            <summary>
                Gets the vertical location value
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.Rectangle.Width">
            <summary>
                Gets the rectangle width value
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.Rectangle.Height">
            <summary>
                Gets the rectangle height value
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.Rectangle.X2">
            <summary>
                Gets the horizontal left edge value
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.General.Structures.Rectangle.Y2">
            <summary>
                Gets the vertical bottom edge value
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPUApi">
            <summary>
                Contains GPU static functions
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.EnumLogicalGPUs">
            <summary>
                This function returns an array of logical GPU handles.
                Each handle represents one or more GPUs acting in concert as a single graphics device.
                At least one GPU must be present in the system and running an NVIDIA display driver.
                All logical GPUs handles get invalidated on a GPU topology change, so the calling application is required to
                re-enum
                the logical GPU handles to get latest physical handle mapping after every GPU topology change activated by a call
                to SetGpuTopologies().
                To detect if SLI rendering is enabled, use Direct3DApi.GetCurrentSLIState().
            </summary>
            <returns>Array of logical GPU handles.</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.EnumPhysicalGPUs">
            <summary>
                This function returns an array of physical GPU handles.
                Each handle represents a physical GPU present in the system.
                That GPU may be part of an SLI configuration, or may not be visible to the OS directly.
                At least one GPU must be present in the system and running an NVIDIA display driver.
                Note: In drivers older than 105.00, all physical GPU handles get invalidated on a mode-set. So the calling
                applications need to re-enum the handles after every mode-set. With drivers 105.00 and up, all physical GPU handles
                are constant. Physical GPU handles are constant as long as the GPUs are not physically moved and the SBIOS VGA
                order is unchanged.
                For GPU handles in TCC MODE please use EnumTCCPhysicalGPUs()
            </summary>
            <returns></returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.EnumTCCPhysicalGPUs">
            <summary>
                This function returns an array of physical GPU handles that are in TCC Mode.
                Each handle represents a physical GPU present in the system in TCC Mode.
                That GPU may not be visible to the OS directly.
                NOTE: Handles enumerated by this API are only valid for NvAPIs that are tagged as TCC_SUPPORTED If handle is passed
                to any other API, it will fail with Status.InvalidHandle
                For WDDM GPU handles please use EnumPhysicalGPUs()
            </summary>
            <returns>An array of physical GPU handles that are in TCC Mode.</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">See NVIDIAApiException.Status for the reason of the exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetAGPAperture(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function returns the AGP aperture in megabytes.
            </summary>
            <param name="gpuHandle">Physical GPU handle to get information about</param>
            <returns>AGP aperture in megabytes</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: display is not valid</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetArchitectInfo(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the architect information for the passed physical GPU handle.
            </summary>
            <param name="gpuHandle">The GPU handle to retrieve information for.</param>
            <returns>The GPU architect information.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetBoardInfo(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This API Retrieves the Board information (a unique GPU Board Serial Number) stored in the InfoROM.
            </summary>
            <param name="gpuHandle">Physical GPU Handle</param>
            <returns>Board Information</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: Miscellaneous error occurred</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: Handle passed is not a physical GPU handle</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ApiNotInitialized: NVAPI not initialized</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetBusId(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                Returns the identification of the bus associated with this GPU.
            </summary>
            <param name="gpuHandle">GPU handle to get information about</param>
            <returns>Id of the bus</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetBusSlotId(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                Returns the identification of the bus slot associated with this GPU.
            </summary>
            <param name="gpuHandle">GPU handle to get information about</param>
            <returns>Identification of the bus slot associated with this GPU</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: gpuHandle is NULL</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetBusType(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function returns the type of bus associated with this GPU.
                TCC_SUPPORTED
            </summary>
            <param name="gpuHandle">GPU handle to get information about</param>
            <returns>Type of bus associated with this GPU</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: gpuHandle is NULL</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetCurrentAGPRate(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function returns the current AGP Rate (0 = AGP not present, 1 = 1x, 2 = 2x, etc.).
            </summary>
            <param name="gpuHandle">Physical GPU handle to get information about</param>
            <returns>Current AGP rate</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: display is not valid</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetCurrentPCIEDownStreamWidth(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function returns the number of PCIE lanes being used for the PCIE interface downstream from the GPU.
            </summary>
            <param name="gpuHandle">Physical GPU handle to get information about</param>
            <returns>PCIE lanes being used for the PCIE interface downstream</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: display is not valid</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetDriverModel(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the driver model for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <returns>The driver model of the GPU.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetECCConfigurationInfo(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function returns ECC memory configuration information.
            </summary>
            <param name="gpuHandle">
                handle identifying the physical GPU for which ECC configuration information is to be
                retrieved.
            </param>
            <returns>An instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.ECCConfigurationInfoV1" /></returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetECCErrorInfo(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function returns ECC memory error information.
            </summary>
            <param name="gpuHandle">A handle identifying the physical GPU for which ECC error information is to be retrieved.</param>
            <returns>An instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.ECCErrorInfoV1" /></returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetECCStatusInfo(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function returns ECC memory status information.
            </summary>
            <param name="gpuHandle">A handle identifying the physical GPU for which ECC status information is to be retrieved.</param>
            <returns>An instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.ECCStatusInfoV1" /></returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetFoundry(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the GPU manufacturing foundry of the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to retrieve this information from.</param>
            <returns>The GPU manufacturing foundry of the GPU.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetFrameBufferWidthAndLocation(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,System.UInt32@,System.UInt32@)">
            <summary>
                [PRIVATE]
                Gets the current frame buffer width and location for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <param name="width">The frame buffer width.</param>
            <param name="location">The frame buffer location.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetFullName(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function retrieves the full GPU name as an ASCII string - for example, "Quadro FX 1400".
            </summary>
            <param name="gpuHandle">Physical GPU handle to get information about</param>
            <returns>Full GPU name as an ASCII string</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">See NVIDIAApiException.Status for the reason of the exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetGPUCoreCount(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                Retrieves the total number of cores defined for a GPU.
                Returns 0 on architectures that don't define GPU cores.
            </summary>
            <param name="gpuHandle">Physical GPU handle to get information about</param>
            <returns>Total number of cores</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: display is not valid</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NotSupported: API call is not supported on current architecture</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetGPUIDFromPhysicalGPU(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the GPUID of the passed GPU handle.
            </summary>
            <param name="gpuHandle">The GPU handle to get the GPUID for.</param>
            <returns>The GPU's GPUID.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetGPUType(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function returns the GPU type (integrated or discrete).
                TCC_SUPPORTED
            </summary>
            <param name="gpuHandle">GPU handle to get information about</param>
            <returns>GPU type</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: gpuHandle is NULL</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetIRQ(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function returns the interrupt number associated with this GPU.
            </summary>
            <param name="gpuHandle">GPU handle to get information about</param>
            <returns>Interrupt number associated with this GPU</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: gpuHandle is NULL</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetLogicalFrameBufferWidthAndLocation(NvAPIWrapper.Native.GPU.Structures.LogicalGPUHandle,System.UInt32@,System.UInt32@)">
            <summary>
                [PRIVATE]
                Gets the current frame buffer width and location for the passed logical GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the logical GPU to perform the operation on.</param>
            <param name="width">The frame buffer width.</param>
            <param name="location">The frame buffer location.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetLogicalGPUFromPhysicalGPU(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function returns the logical GPU handle associated with specified physical GPU handle.
                At least one GPU must be present in the system and running an NVIDIA display driver.
            </summary>
            <param name="gpuHandle">GPU handle to get information about</param>
            <returns>Logical GPU handle associated with specified physical GPU handle</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: gpuHandle is NULL</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetMemoryInfo(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function retrieves the available driver memory footprint for the specified GPU.
                If the GPU is in TCC Mode, only dedicatedVideoMemory will be returned.
            </summary>
            <param name="physicalGPUHandle">Handle of the physical GPU for which the memory information is to be extracted.</param>
            <returns>The memory footprint available in the driver.</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIANotSupportedException">This operation is not supported.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetPartitionCount(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the number of GPC (Graphic Processing Clusters) of the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <returns>The number of GPC units for the GPU.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetPCIEInfo(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets additional information about the PCIe interface and configuration for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <returns>PCIe information and configurations.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetPCIIdentifiers(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
                This function returns the PCI identifiers associated with this GPU.
                TCC_SUPPORTED
            </summary>
            <param name="gpuHandle">GPU handle to get information about</param>
            <param name="deviceId">The internal PCI device identifier for the GPU.</param>
            <param name="subSystemId">The internal PCI subsystem identifier for the GPU.</param>
            <param name="revisionId">The internal PCI device-specific revision identifier for the GPU.</param>
            <param name="extDeviceId">The external PCI device identifier for the GPU.</param>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: gpuHandle or an argument is NULL</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetPhysicalFrameBufferSize(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function returns the physical size of frame buffer in KB.  This does NOT include any system RAM that may be
                dedicated for use by the GPU.
                TCC_SUPPORTED
            </summary>
            <param name="gpuHandle">GPU handle to get information about</param>
            <returns>Physical size of frame buffer in KB</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetPhysicalGPUFromGPUID(System.UInt32)">
            <summary>
                [PRIVATE]
                Gets a physical GPU handle from the passed GPUID
            </summary>
            <param name="gpuId">The GPUID to get the physical handle for.</param>
            <returns>The retrieved physical GPU handle.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetPhysicalGPUsFromLogicalGPU(NvAPIWrapper.Native.GPU.Structures.LogicalGPUHandle)">
            <summary>
                This function returns the physical GPU handles associated with the specified logical GPU handle.
                At least one GPU must be present in the system and running an NVIDIA display driver.
            </summary>
            <param name="gpuHandle">Logical GPU handle to get information about</param>
            <returns>An array of physical GPU handles</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: gpuHandle is not valid</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedLogicalGPUHandle: gpuHandle was not a logical GPU handle</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetQuadroStatus(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function retrieves the Quadro status for the GPU (true if Quadro, false if GeForce)
            </summary>
            <param name="gpuHandle">GPU handle to get information about</param>
            <returns>true if Quadro, false if GeForce</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: Miscellaneous error occurred</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetRAMBankCount(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the number of RAM banks for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to retrieve this information from.</param>
            <returns>The number of RAM memory banks.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetRAMBusWidth(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the RAM bus width for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to retrieve this information from.</param>
            <returns>The RAM memory bus width.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetRAMMaker(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the RAM maker for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to retrieve this information from.</param>
            <returns>The RAM memory maker.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetRAMType(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the RAM type for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to retrieve this information from.</param>
            <returns>The RAM memory type.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetROPCount(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the ROP count for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to retrieve this information from.</param>
            <returns>The number of ROP units.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetShaderPipeCount(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the number of shader pipe lines for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to retrieve this information from.</param>
            <returns>The number of shader pipelines.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetShaderSubPipeCount(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function retrieves the number of Shader SubPipes on the GPU
                On newer architectures, this corresponds to the number of SM units
            </summary>
            <param name="gpuHandle">GPU handle to get information about</param>
            <returns>Number of Shader SubPipes on the GPU</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetShortName(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the GPU short name (code name) for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to retrieve this information from.</param>
            <returns>The GPU short name.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetSystemType(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function identifies whether the GPU is a notebook GPU or a desktop GPU.
            </summary>
            <param name="gpuHandle">GPU handle to get information about</param>
            <returns>GPU system type</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: gpuHandle is NULL</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetTotalSMCount(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the SM count for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to retrieve this information from.</param>
            <returns>The number of SM units.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetTotalSPCount(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the SP count for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to retrieve this information from.</param>
            <returns>The number of SP units.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetTotalTPCCount(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the TPC count for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to retrieve this information from.</param>
            <returns>The number of TPC units.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetVBIOSOEMRevision(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function returns the OEM revision of the video BIOS associated with this GPU.
            </summary>
            <param name="gpuHandle">GPU handle to get information about</param>
            <returns>OEM revision of the video BIOS</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetVBIOSRevision(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function returns the revision of the video BIOS associated with this GPU.
                TCC_SUPPORTED
            </summary>
            <param name="gpuHandle">GPU handle to get information about</param>
            <returns>Revision of the video BIOS</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetVBIOSVersionString(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function returns the full video BIOS version string in the form of xx.xx.xx.xx.yy where xx numbers come from
                GetVbiosRevision() and yy comes from GetVbiosOEMRevision().
            </summary>
            <param name="gpuHandle">Physical GPU handle to get information about</param>
            <returns>Full video BIOS version string</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: display is not valid</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetVirtualFrameBufferSize(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function returns the virtual size of frame buffer in KB. This includes the physical RAM plus any system RAM
                that has been dedicated for use by the GPU.
            </summary>
            <param name="gpuHandle">Physical GPU handle to get information about</param>
            <returns>Virtual size of frame buffer in KB</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: display is not valid</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetVPECount(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the VPE count for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to retrieve this information from.</param>
            <returns>The number of VPE units.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.I2CRead``1(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,``0@)">
            <summary>
                Reads data from I2C bus
            </summary>
            <param name="gpuHandle">The physical GPU to access I2C bus.</param>
            <param name="i2cInfo">The information required for the operation. Will be filled with data after retrieval.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.I2CRead(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.Interfaces.GPU.II2CInfo@)">
            <summary>
                Reads data from I2C bus
            </summary>
            <param name="gpuHandle">The physical GPU to access I2C bus.</param>
            <param name="i2cInfo">The information required for the operation. Will be filled with data after retrieval.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.I2CWrite(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.Interfaces.GPU.II2CInfo)">
            <summary>
                Writes data to I2C bus
            </summary>
            <param name="gpuHandle">The physical GPU to access I2C bus.</param>
            <param name="i2cInfo">The information required for the operation.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.ResetECCErrorInfo(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,System.Boolean,System.Boolean)">
            <summary>
                This function resets ECC memory error counters.
            </summary>
            <param name="gpuHandle">A handle identifying the physical GPU for which ECC error information is to be cleared.</param>
            <param name="resetCurrent">Reset the current ECC error counters.</param>
            <param name="resetAggregated">Reset the aggregate ECC error counters.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.SetECCConfiguration(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,System.Boolean,System.Boolean)">
            <summary>
                This function updates the ECC memory configuration setting.
            </summary>
            <param name="gpuHandle">A handle identifying the physical GPU for which to update the ECC configuration setting.</param>
            <param name="isEnable">The new ECC configuration setting.</param>
            <param name="isEnableImmediately">Request that the new setting take effect immediately.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetActiveOutputs(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function is the same as GetAllOutputs() but returns only the set of GPU output identifiers that are actively
                driving display devices.
            </summary>
            <param name="gpuHandle">Physical GPU handle to get information about</param>
            <returns>Active output identifications as a flag</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: display is not valid</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetAllDisplayIds(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This API returns display IDs for all possible outputs on the GPU.
                For DPMST connector, it will return display IDs for all the video sinks in the topology.
            </summary>
            <param name="gpuHandle">Physical GPU handle to get information about</param>
            <returns>An array of display identifications and their attributes</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIANotSupportedException">This operation is not supported.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">See NVIDIAApiException.Status for the reason of the exception.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetConnectedDisplayIds(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.ConnectedIdsFlag)">
            <summary>
                Due to space limitation GetConnectedOutputs() can return maximum 32 devices, but this is no longer true for DPMST.
                GetConnectedDisplayIds() will return all the connected display devices in the form of displayIds for the associated
                gpuHandle.
                This function can accept set of flags to request cached, un-cached, sli and lid to get the connected devices.
                Default value for flags will be cached.
            </summary>
            <param name="gpuHandle">Physical GPU handle to get information about</param>
            <param name="flags">ConnectedIdsFlag flags</param>
            <returns>An array of display identifications and their attributes</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIANotSupportedException">This operation is not supported.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: gpuHandle is invalid</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetDisplayIdFromGPUAndOutputId(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.OutputId)">
            <summary>
                This API converts a Physical GPU handle and output ID to a display ID.
            </summary>
            <param name="gpuHandle">Handle to the physical GPU</param>
            <param name="outputId">Connected display output identification on the target GPU - must only have one bit set</param>
            <returns>Display identification</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ApiNotInitialized: NVAPI not initialized</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: miscellaneous error occurred</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: Invalid input parameter.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetEDID(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.OutputId,System.Int32,System.Int32)">
            <summary>
                This function returns the EDID data for the specified GPU handle and connection bit mask.
                outputId should have exactly 1 bit set to indicate a single display.
            </summary>
            <param name="gpuHandle">Physical GPU handle to check outputs</param>
            <param name="outputId">Output identification</param>
            <param name="offset">EDID offset</param>
            <param name="readIdentification">EDID read identification for multi part read, or zero for first run</param>
            <returns>Whole or a part of the EDID data</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIANotSupportedException">This operation is not supported.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">
                Status.InvalidArgument: gpuHandle or edid is invalid, outputId has 0 or > 1 bits
                set
            </exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.DataNotFound: The requested display does not contain an EDID.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetEDID(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.OutputId)">
            <summary>
                This function returns the EDID data for the specified GPU handle and connection bit mask.
                outputId should have exactly 1 bit set to indicate a single display.
            </summary>
            <param name="gpuHandle">Physical GPU handle to check outputs</param>
            <param name="outputId">Output identification</param>
            <returns>Whole or a part of the EDID data</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIANotSupportedException">This operation is not supported.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">
                Status.InvalidArgument: gpuHandle or edid is invalid, outputId has 0 or > 1 bits
                set
            </exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.DataNotFound: The requested display does not contain an EDID.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetGPUAndOutputIdFromDisplayId(System.UInt32,NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle@)">
            <summary>
                This API converts a display ID to a Physical GPU handle and output ID.
            </summary>
            <param name="displayId">Display identification of display to retrieve GPU and outputId for</param>
            <param name="gpuHandle">Handle to the physical GPU</param>
            <returns>Connected display output identification on the target GPU will only have one bit set.</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ApiNotInitialized: NVAPI not initialized</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: Miscellaneous error occurred</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: Invalid input parameter</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">
                Status.IdOutOfRange: The DisplayId corresponds to a display which is not within
                the normal outputId range.
            </exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetLogicalGPUFromDisplay(NvAPIWrapper.Native.Display.Structures.DisplayHandle)">
            <summary>
                This function returns the logical GPU handle associated with the specified display.
                At least one GPU must be present in the system and running an NVIDIA display driver.
                display can be DisplayHandle.DefaultHandle or a handle enumerated from EnumNVidiaDisplayHandle().
            </summary>
            <param name="display">Display handle to get information about</param>
            <returns>Logical GPU handle associated with the specified display</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: display is not valid</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetOutputType(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.OutputId)">
            <summary>
                This function returns the output type. User can either specify both 'physical GPU handle and outputId (exactly 1
                bit set)' or a valid displayId in the outputId parameter.
            </summary>
            <param name="gpuHandle">GPU handle to get information about</param>
            <param name="outputId">Output identification of the output to get information about</param>
            <returns>Type of the output</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: gpuHandle is NULL</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetOutputType(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,System.UInt32)">
            <summary>
                This function returns the output type. User can either specify both 'physical GPU handle and outputId (exactly 1
                bit set)' or a valid displayId in the outputId parameter.
            </summary>
            <param name="gpuHandle">GPU handle to get information about</param>
            <param name="displayId">Display identification of the divide to get information about</param>
            <returns>Type of the output</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: gpuHandle is NULL</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetPhysicalGPUFromDisplayId(System.UInt32)">
            <summary>
                This API retrieves the Physical GPU handle of the connected display
            </summary>
            <param name="displayId">Display identification of display to retrieve GPU handle</param>
            <returns>Handle to the physical GPU</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ApiNotInitialized: NVAPI not initialized</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: Miscellaneous error occurred</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: Invalid input parameter</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetPhysicalGPUFromUnAttachedDisplay(NvAPIWrapper.Native.Display.Structures.UnAttachedDisplayHandle)">
            <summary>
                This function returns a physical GPU handle associated with the specified unattached display.
                The source GPU is a physical render GPU which renders the frame buffer but may or may not drive the scan out.
                At least one GPU must be present in the system and running an NVIDIA display driver.
            </summary>
            <param name="display">Display handle to get information about</param>
            <returns>Physical GPU handle associated with the specified unattached display.</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: display is not valid</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetPhysicalGPUsFromDisplay(NvAPIWrapper.Native.Display.Structures.DisplayHandle)">
            <summary>
                This function returns an array of physical GPU handles associated with the specified display.
                At least one GPU must be present in the system and running an NVIDIA display driver.
                If the display corresponds to more than one physical GPU, the first GPU returned is the one with the attached
                active output.
            </summary>
            <param name="display">Display handle to get information about</param>
            <returns>An array of physical GPU handles</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: display is not valid</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.SetEDID(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.OutputId,NvAPIWrapper.Native.Interfaces.GPU.IEDID)">
            <summary>
                Thus function sets the EDID data for the specified GPU handle and connection bit mask.
                User can either send (Gpu handle and output id) or only display Id in variable outputId parameter and gpuHandle
                parameter can be default handle.
                Note: The EDID will be cached across the boot session and will be enumerated to the OS in this call. To remove the
                EDID set size of EDID to zero. OS and NVAPI connection status APIs will reflect the newly set or removed EDID
                dynamically.
                This feature will NOT be supported on the following boards: GeForce, Quadro VX, Tesla
            </summary>
            <param name="gpuHandle">Physical GPU handle to check outputs</param>
            <param name="outputId">Output identification</param>
            <param name="edid">EDID information</param>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIANotSupportedException">This operation is not supported.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">
                Status.InvalidArgument: gpuHandle or edid is invalid, outputId has 0 or > 1 bits
                set
            </exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NotSupported: For the above mentioned GPUs</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.SetEDID(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,System.UInt32,NvAPIWrapper.Native.Interfaces.GPU.IEDID)">
            <summary>
                Thus function sets the EDID data for the specified GPU handle and connection bit mask.
                User can either send (Gpu handle and output id) or only display Id in variable outputId parameter and gpuHandle
                parameter can be default handle.
                Note: The EDID will be cached across the boot session and will be enumerated to the OS in this call. To remove the
                EDID set size of EDID to zero. OS and NVAPI connection status APIs will reflect the newly set or removed EDID
                dynamically.
                This feature will NOT be supported on the following boards: GeForce, Quadro VX, Tesla
            </summary>
            <param name="gpuHandle">Physical GPU handle to check outputs</param>
            <param name="displayId">Output identification</param>
            <param name="edid">EDID information</param>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIANotSupportedException">This operation is not supported.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">
                Status.InvalidArgument: gpuHandle or edid is invalid, outputId has 0 or > 1 bits
                set
            </exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NotSupported: For the above mentioned GPUs</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.ValidateOutputCombination(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.OutputId)">
            <summary>
                This function determines if a set of GPU outputs can be active simultaneously.  While a GPU may have 'n' outputs,
                typically they cannot all be active at the same time due to internal resource sharing.
                Given a physical GPU handle and a mask of candidate outputs, this call will return true if all of the specified
                outputs can be driven simultaneously. It will return false if they cannot.
            </summary>
            <param name="gpuHandle">Physical GPU handle to check outputs</param>
            <param name="outputIds">Output identification combination</param>
            <returns>true if all of the specified outputs can be driven simultaneously. It will return false if they cannot.</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: display is not valid</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.ClientIlluminationDevicesGetControl(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                Gets the control information about illumination devices on the given GPU.
            </summary>
            <param name="gpuHandle">The physical GPU handle.</param>
            <returns>An instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceControlParametersV1" />.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.ClientIlluminationDevicesGetInfo(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                Returns static information about illumination devices on the given GPU.
            </summary>
            <param name="gpuHandle">The physical GPU handle.</param>
            <returns>An instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceInfoParametersV1" />.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.ClientIlluminationDevicesSetControl(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceControlParametersV1)">
            <summary>
                Sets the control information about illumination devices on the given GPU.
            </summary>
            <param name="gpuHandle">The physical GPU handle.</param>
            <param name="deviceControlParameters">The new control illumination devices control information.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.ClientIlluminationZonesGetControl(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.IlluminationZoneControlValuesType)">
            <summary>
                Gets the control information about illumination zones on the given GPU.
            </summary>
            <param name="gpuHandle">The physical GPU handle.</param>
            <param name="valuesType">The type of settings to retrieve.</param>
            <returns>An instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlParametersV1" />.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.ClientIlluminationZonesGetInfo(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                Returns static information about illumination zones on the given GPU.
            </summary>
            <param name="gpuHandle">The physical GPU handle.</param>
            <returns>An instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneInfoParametersV1" />.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.ClientIlluminationZonesSetControl(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlParametersV1)">
            <summary>
                Sets the control information about illumination zones on the given GPU.
            </summary>
            <param name="gpuHandle">The physical GPU handle.</param>
            <param name="zoneControlParameters">The new control illumination zones control information.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetIllumination(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.IlluminationAttribute)">
            <summary>
                Reports value of the specified illumination attribute brightness.
            </summary>
            <param name="gpuHandle">The physical GPU handle.</param>
            <param name="attribute">The attribute to get the value of.</param>
            <returns>Brightness value in percentage.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.QueryIlluminationSupport(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.IlluminationAttribute)">
            <summary>
                Queries a illumination attribute support status.
            </summary>
            <param name="gpuHandle">The physical GPU handle.</param>
            <param name="attribute">The attribute to get the support status of.</param>
            <returns>true if the attribute is supported on this GPU; otherwise false.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.SetIllumination(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.IlluminationAttribute,System.UInt32)">
            <summary>
                Sets the value of the specified illumination attribute brightness.
            </summary>
            <param name="gpuHandle">The physical GPU handle.</param>
            <param name="attribute">The attribute to set the value of.</param>
            <param name="valueInPercentage">Brightness value in percentage.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.EnableOverclockedPStates(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Enables the overclocked performance states
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetAllClockFrequencies(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.Interfaces.GPU.IClockFrequencies)">
            <summary>
                This function retrieves the clock frequencies information from an specific physical GPU and fills the structure
            </summary>
            <param name="physicalGPUHandle">
                Handle of the physical GPU for which the clock frequency information is to be
                retrieved.
            </param>
            <param name="clockFrequencyOptions">
                The structure that holds options for the operations and should be filled with the
                results, use null to return current clock frequencies
            </param>
            <returns>The device clock frequencies information.</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIANotSupportedException">This operation is not supported.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetClockBoostLock(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE] - [Pascal Only]
                Gets the clock boost lock for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <returns>The GPU clock boost lock.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetClockBoostMask(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE] - [Pascal Only]
                Gets the clock boost mask for passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <returns>The GPI clock boost mask.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetClockBoostRanges(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE] - [Pascal Only]
                Gets the clock boost ranges for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <returns>The GPU clock boost ranges.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetClockBoostTable(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE] - [Pascal Only]
                Gets the clock boost table for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <returns>The GPU clock boost table.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetCoreVoltageBoostPercent(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE] - [Pascal Only]
                Gets the core voltage boost percentage for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <returns>The voltage boost percentage.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetCurrentPerformanceState(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function returns the current performance state (P-State).
            </summary>
            <param name="gpuHandle">GPU handle to get information about</param>
            <returns>The current performance state.</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: gpuHandle is NULL</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetCurrentVoltage(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE] - [Pascal Only]
                Gets the current voltage status for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <returns>The voltage status of the GPU.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetPerformanceStates(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.GetPerformanceStatesInfoFlags)">
            <summary>
                This function retrieves all available performance states (P-States) information.
                P-States are GPU active/executing performance capability and power consumption states.
            </summary>
            <param name="physicalGPUHandle">GPU handle to get information about.</param>
            <param name="flags">Flag to get specific information about a performance state.</param>
            <returns>Retrieved performance states information</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: gpuHandle is NULL</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetPerformanceStates20(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function retrieves all available performance states (P-States) 2.0 information.
                P-States are GPU active/executing performance capability and power consumption states.
            </summary>
            <param name="physicalGPUHandle">GPU handle to get information about.</param>
            <returns>Retrieved performance states 2.0 information</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: gpuHandle is NULL</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetVFPCurve(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE] - [Pascal Only]
                Gets the GPU boost frequency curve controls for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <returns>The retrieved VFP curve.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.PerformancePoliciesGetInfo(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the performance policies current information for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <returns>The performance policies information.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.PerformancePoliciesGetStatus(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the performance policies status for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <returns>The performance policies status of the GPU.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.SetClockBoostLock(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostLockV2)">
            <summary>
                [PRIVATE] - [Pascal Only]
                Sets the clock boost lock status for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <param name="clockBoostLock">The new clock boost lock status.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.SetClockBoostTable(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostTableV1)">
            <summary>
                [PRIVATE] - [Pascal Only]
                Sets the clock boost table for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <param name="clockBoostTable">The new clock table.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.SetCoreVoltageBoostPercent(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.Structures.PrivateVoltageBoostPercentV1)">
            <summary>
                [PRIVATE] - [Pascal Only]
                Sets the core voltage boost percentage
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <param name="boostPercent">The voltage boost percentages.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.SetPerformanceStates20(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20Info)">
            <summary>
                [PRIVATE]
                This function sets the performance states (P-States) 2.0 information.
                P-States are GPU active/executing performance capability and power consumption states.
            </summary>
            <param name="physicalGPUHandle">GPU handle to get information about.</param>
            <param name="performanceStates20Info">Performance status 2.0 information to set</param>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: gpuHandle is NULL</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.ClientPowerPoliciesGetInfo(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the current power policies information for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <returns>The current power policies information.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.ClientPowerPoliciesGetStatus(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the power policies status for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <returns>The power policies status.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.ClientPowerPoliciesSetStatus(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.Structures.PrivatePowerPoliciesStatusV1)">
            <summary>
                [PRIVATE]
                Sets the power policies status for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <param name="policiesStatus">The new power limiter policy.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.ClientPowerTopologyGetStatus(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the power topology status for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <returns>The power topology status.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetCoolerPolicyTable(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.CoolerPolicy,System.UInt32,System.UInt32@)">
            <summary>
                [PRIVATE]
                Gets the cooler policy table for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <param name="policy">The cooler policy to get the table for.</param>
            <param name="index">The cooler index.</param>
            <param name="count">Number of policy table entries retrieved.</param>
            <returns>The cooler policy table for the GPU.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetCoolerSettings(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.CoolerTarget)">
            <summary>
                [PRIVATE]
                Gets the cooler settings for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <param name="coolerTarget">The cooler targets to get settings.</param>
            <returns>The cooler settings.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetCurrentFanSpeedLevel(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the current fan speed level for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <returns>The current fan speed level.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetCurrentThermalLevel(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the current thermal level for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <returns>The current thermal level.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetTachReading(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function returns the fan speed tachometer reading for the specified physical GPU.
            </summary>
            <param name="gpuHandle">Physical GPU handle to get tachometer reading from</param>
            <returns>The GPU fan speed in revolutions per minute.</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ExpectedPhysicalGPUHandle: gpuHandle was not a physical GPU handle.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetThermalPoliciesInfo(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the current thermal policies information for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <returns>The current thermal policies information.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetThermalPoliciesStatus(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the thermal policies status for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <returns>The thermal policies status.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetThermalSettings(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.ThermalSettingsTarget)">
            <summary>
                This function retrieves the thermal information of all thermal sensors or specific thermal sensor associated with
                the selected GPU. To retrieve info for all sensors, set sensorTarget to ThermalSettingsTarget.All.
            </summary>
            <param name="physicalGPUHandle">Handle of the physical GPU for which the memory information is to be extracted.</param>
            <param name="sensorTarget">Specifies the requested thermal sensor target.</param>
            <returns>The device thermal sensors information.</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIANotSupportedException">This operation is not supported.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.RestoreCoolerPolicyTable(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.CoolerPolicy,System.UInt32[])">
            <summary>
                [PRIVATE]
                Restores the cooler policy table to default for the passed GPU handle and cooler index.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <param name="policy">The cooler policy to restore to default.</param>
            <param name="indexes">The indexes of the coolers to restore their policy tables to default.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.RestoreCoolerSettings(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,System.UInt32[])">
            <summary>
                [PRIVATE]
                Restores the cooler settings to default for the passed GPU handle and cooler index.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <param name="indexes">The indexes of the coolers to restore their settings to default.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.SetCoolerLevels(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,System.UInt32,NvAPIWrapper.Native.GPU.Structures.PrivateCoolerLevelsV1,System.UInt32)">
            <summary>
                [PRIVATE]
                Sets the cooler levels for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <param name="index">The cooler index.</param>
            <param name="coolerLevels">The cooler level information.</param>
            <param name="levelsCount">The number of entries in the cooler level information.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.SetCoolerPolicyTable(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,System.UInt32,NvAPIWrapper.Native.GPU.Structures.PrivateCoolerPolicyTableV1,System.UInt32)">
            <summary>
                [PRIVATE]
                Sets the cooler policy table for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <param name="index">The cooler index.</param>
            <param name="coolerPolicyTable">The cooler policy table.</param>
            <param name="policyLevelsCount">The number of entries in the cooler policy table.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.SetThermalPoliciesStatus(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.Structures.PrivateThermalPoliciesStatusV2)">
            <summary>
                [PRIVATE]
                Sets the thermal policies status for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <param name="thermalPoliciesStatus">The new thermal limiter policy to apply.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.EnableDynamicPStates(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Enables the dynamic performance states
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetDynamicPerformanceStatesInfoEx(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                This function retrieves the dynamic performance states information from specific GPU
            </summary>
            <param name="physicalGPUHandle">Handle of the physical GPU for which the memory information is to be extracted.</param>
            <returns>The device utilizations information array.</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIANotSupportedException">This operation is not supported.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NvidiaDeviceNotFound: No NVIDIA GPU driving a display was found.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetPerformanceDecreaseInfo(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                Gets the reason behind the current decrease in performance.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <returns>A value indicating the reason of current performance decrease.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.GetUsages(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                [PRIVATE]
                Gets the GPU usage metrics for the passed GPU handle.
            </summary>
            <param name="gpuHandle">The handle of the GPU to perform the operation on.</param>
            <returns>The usage information for the selected GPU.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPUApi.QueryActiveApps(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                Queries active applications.
            </summary>
            <param name="gpuHandle">The physical GPU handle.</param>
            <returns>The list of active applications.</returns>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.ClockLockMode">
            <summary>
                Holds the possible clock lock modes
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ClockLockMode.None">
            <summary>
                No clock lock
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ClockLockMode.Manual">
            <summary>
                Manual clock lock
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.ClockType">
            <summary>
                Clock types to request
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ClockType.CurrentClock">
            <summary>
                Current clock frequencies
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ClockType.BaseClock">
            <summary>
                Base clock frequencies
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ClockType.BoostClock">
            <summary>
                Boost clock frequencies
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.ConnectedIdsFlag">
            <summary>
                Flags used for retrieving a list of display identifications
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectedIdsFlag.None">
            <summary>
                No specific flag
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectedIdsFlag.UnCached">
            <summary>
                Get un-cached connected devices
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectedIdsFlag.SLI">
            <summary>
                Get devices such that those can be selected in an SLI configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectedIdsFlag.LidState">
            <summary>
                Get devices such that to reflect the Lid State
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectedIdsFlag.Fake">
            <summary>
                Get devices that includes the fake connected monitors
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectedIdsFlag.ExcludeList">
            <summary>
                Excludes devices that are part of the multi stream topology
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.ConnectorType">
            <summary>
                Possible display connectors
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.VGA15Pin">
            <summary>
                VGA 15 Pin connector
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.TV_Composite">
            <summary>
                TV Composite
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.TV_SVideo">
            <summary>
                TV SVideo
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.TV_HDTVComponent">
            <summary>
                TV HDTV Component
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.TV_SCART">
            <summary>
                TV SCART
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.TV_CompositeSCARTOnEIAJ4120">
            <summary>
                TV Composite through SCART on EIAJ4120
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.TV_HDTV_EIAJ4120">
            <summary>
                TV HDTV EIAJ4120
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.PC_POD_HDTV_YPbPr">
            <summary>
                HDTV YPbPr through VESA Plug On Display
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.PC_POD_SVideo">
            <summary>
                SVideo through VESA Plug On Display
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.PC_POD_Composite">
            <summary>
                Composite through VESA Plug On Display
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.DVI_I_TV_SVideo">
            <summary>
                TV SVideo through DVI Integrated
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.DVI_I_TV_COMPOSITE">
            <summary>
                TV Composite through DVI Integrated
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.DVI_I">
            <summary>
                DVI Integrated
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.DVI_D">
            <summary>
                DVI Digital
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.ADC">
            <summary>
                Apple Display Connector
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.LFH_DVI_I1">
            <summary>
                DVI 1 through LFH
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.LFH_DVI_I2">
            <summary>
                DVI 2 through LFH
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.SPWG">
            <summary>
                SPWG pin-out connector
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.OEM">
            <summary>
                OEM connector
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.DisplayPortExternal">
            <summary>
                External DisplayPort
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.DisplayPortInternal">
            <summary>
                Internal DisplayPort
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.DisplayPortMiniExternal">
            <summary>
                External Mini DisplayPort
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.HDMI_Analog">
            <summary>
                HDMI Analog
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.HDMI_CMini">
            <summary>
                Mini HDMI
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.LFHDisplayPort1">
            <summary>
                DisplayPort 1 through LFH
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.LFHDisplayPort2">
            <summary>
                DisplayPort 2 through LFH
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.VirtualWFD">
            <summary>
                Virtual Wireless
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ConnectorType.Unknown">
            <summary>
                Unknown connector
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.CoolerController">
            <summary>
                Holds the list of possible cooler controllers
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.CoolerController.None">
            <summary>
                No cooler controller
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.CoolerController.ADI">
            <summary>
                ADI cooler controller
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.CoolerController.Internal">
            <summary>
                Internal cooler controller
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.CoolerControlMode">
            <summary>
                Holds possible cooler control modes
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.CoolerControlMode.None">
            <summary>
                No cooler control
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.CoolerControlMode.Toggle">
            <summary>
                Toggle based cooler control mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.CoolerControlMode.Variable">
            <summary>
                Variable cooler control mode
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.CoolerPolicy">
            <summary>
                Holds possible cooler policies
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.CoolerPolicy.None">
            <summary>
                No cooler policy
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.CoolerPolicy.Manual">
            <summary>
                Manual cooler control
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.CoolerPolicy.Performance">
            <summary>
                Performance optimized cooler policy
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.CoolerPolicy.TemperatureDiscrete">
            <summary>
                Discrete temperature based cooler policy
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.CoolerPolicy.TemperatureContinuous">
            <summary>
                Continues temperature based cooler policy
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.CoolerPolicy.Silent">
            <summary>
                Silent cooler policy
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.CoolerTarget">
            <summary>
                Holds a list of possible cooler targets
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.CoolerTarget.None">
            <summary>
                No cooler target
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.CoolerTarget.GPU">
            <summary>
                Cooler targets GPU
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.CoolerTarget.Memory">
            <summary>
                Cooler targets memory
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.CoolerTarget.PowerSupply">
            <summary>
                Cooler targets power supply
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.CoolerTarget.All">
            <summary>
                Cooler targets GPU, memory and power supply
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.CoolerType">
            <summary>
                Holds a list of possible cooler types
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.CoolerType.None">
            <summary>
                No cooler type
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.CoolerType.Fan">
            <summary>
                Air cooling
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.CoolerType.Water">
            <summary>
                Water cooling
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.CoolerType.LiquidNitrogen">
            <summary>
                Liquid nitrogen cooling
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.ECCConfiguration">
            <summary>
                Holds a list of possible ECC memory configurations
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ECCConfiguration.NotSupported">
            <summary>
                ECC memory configurations are not supported
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ECCConfiguration.Deferred">
            <summary>
                Changes require a POST to take effect
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ECCConfiguration.Immediate">
            <summary>
                Changes can optionally be made to take effect immediately
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.FanCoolersControlMode">
            <summary>
                Holds possible fan cooler control modes
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.FanCoolersControlMode.Auto">
            <summary>
                Automatic fan cooler control
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.FanCoolersControlMode.Manual">
            <summary>
                Manual fan cooler control
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.GetPerformanceStatesInfoFlags">
            <summary>
                Contains the flags used by the GPUApi.GetPerformanceStatesInfo() function
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GetPerformanceStatesInfoFlags.Current">
            <summary>
                Current performance states settings
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GetPerformanceStatesInfoFlags.Default">
            <summary>
                Default performance states settings
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GetPerformanceStatesInfoFlags.Maximum">
            <summary>
                Maximum range of performance states values
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GetPerformanceStatesInfoFlags.Minimum">
            <summary>
                Minimum range of performance states values
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.GPUBusType">
            <summary>
                Associated GPU bus types
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUBusType.Undefined">
            <summary>
                Bus type is undefined
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUBusType.PCI">
            <summary>
                PCI Bus
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUBusType.AGP">
            <summary>
                AGP Bus
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUBusType.PCIExpress">
            <summary>
                PCIExpress Bus
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUBusType.FPCI">
            <summary>
                FPCI Bus
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUBusType.AXI">
            <summary>
                AXI Bus
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.GPUFoundry">
            <summary>
                Holds a list of known GPU foundries
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUFoundry.Unknown">
            <summary>
                Unknown foundry
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUFoundry.TSMC">
            <summary>
                Taiwan Semiconductor Manufacturing Company Limited
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUFoundry.UMC">
            <summary>
                United Microelectronics
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUFoundry.IBM">
            <summary>
                International Business Machines Corporation
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUFoundry.SMIC">
            <summary>
                Semiconductor Manufacturing International Corporation
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUFoundry.CSM">
            <summary>
                Chartered Semiconductor Manufacturing
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUFoundry.Toshiba">
            <summary>
                Toshiba Corporation
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.GPUMemoryMaker">
            <summary>
                Holds a list of known memory makers
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUMemoryMaker.Unknown">
            <summary>
                Unknown memory maker
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUMemoryMaker.Samsung">
            <summary>
                Samsung Group
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUMemoryMaker.Qimonda">
            <summary>
                Qimonda AG
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUMemoryMaker.Elpida">
            <summary>
                Elpida Memory, Inc.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUMemoryMaker.Etron">
            <summary>
                Etron Technology, Inc.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUMemoryMaker.Nanya">
            <summary>
                Nanya Technology Corporation
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUMemoryMaker.Hynix">
            <summary>
                SK Hynix
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUMemoryMaker.Mosel">
            <summary>
                Mosel Vitelic Corporation
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUMemoryMaker.Winbond">
            <summary>
                Winbond Electronics Corporation
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUMemoryMaker.Elite">
            <summary>
                Elite Semiconductor Memory Technology Inc.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUMemoryMaker.Micron">
            <summary>
                Micron Technology, Inc.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.GPUMemoryType">
            <summary>
                Holds a list of known memory types
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUMemoryType.Unknown">
            <summary>
                Unknown memory type
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUMemoryType.SDRAM">
            <summary>
                Synchronous dynamic random-access memory
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUMemoryType.DDR1">
            <summary>
                Double Data Rate Synchronous Dynamic Random-Access Memory
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUMemoryType.DDR2">
            <summary>
                Double Data Rate 2 Synchronous Dynamic Random-Access Memory
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUMemoryType.GDDR2">
            <summary>
                Graphics Double Data Rate 2 Synchronous Dynamic Random-Access Memory
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUMemoryType.GDDR3">
            <summary>
                Graphics Double Data Rate 3 Synchronous Dynamic Random-Access Memory
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUMemoryType.GDDR4">
            <summary>
                Graphics Double Data Rate 4 Synchronous Dynamic Random-Access Memory
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUMemoryType.DDR3">
            <summary>
                Double Data Rate 3 Synchronous Dynamic Random-Access Memory
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUMemoryType.GDDR5">
            <summary>
                Graphics Double Data Rate 5 Synchronous Dynamic Random-Access Memory
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUMemoryType.LPDDR2">
            <summary>
                Lowe Power Double Data Rate 2 Synchronous Dynamic Random-Access Memory
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUMemoryType.GDDR5X">
            <summary>
                Graphics Double Data Rate 5X Synchronous Dynamic Random-Access Memory
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.GPUType">
            <summary>
                Possible GPU types
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUType.Unknown">
            <summary>
                Unknown GPU type
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUType.Integrated">
            <summary>
                Integrated GPU
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.GPUType.Discrete">
            <summary>
                Discrete GPU
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.I2CSpeed">
            <summary>
                Contains possible I2C bus speed values in kHz
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.I2CSpeed.Default">
            <summary>
                Current / Default frequency setting
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.I2CSpeed.I2C3KHz">
            <summary>
                3kHz
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.I2CSpeed.I2C10KHz">
            <summary>
                10kHz
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.I2CSpeed.I2C33KHz">
            <summary>
                33kHz
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.I2CSpeed.I2C100KHz">
            <summary>
                100kHz
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.I2CSpeed.I2C200KHz">
            <summary>
                200kHz
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.I2CSpeed.I2C400KHz">
            <summary>
                400kHz
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.IlluminationAttribute">
            <summary>
                Contains a list of valid illumination attributes
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.IlluminationAttribute.LogoBrightness">
            <summary>
                Logo brightness control
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.IlluminationAttribute.SLIBrightness">
            <summary>
                SLI bridge brightness control
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.IlluminationDeviceType">
            <summary>
                Contains a list of valid illumination zone device types
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.IlluminationDeviceType.Invalid">
            <summary>
                Invalid device type
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.IlluminationDeviceType.MCUV10">
            <summary>
                MCUV10 device
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.IlluminationPiecewiseLinearCycleType">
            <summary>
                Contains a list of valid cycle types for the piecewise linear control mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.IlluminationPiecewiseLinearCycleType.HalfHalf">
            <summary>
                Half half cycle mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.IlluminationPiecewiseLinearCycleType.FullHalf">
            <summary>
                Full half cycle mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.IlluminationPiecewiseLinearCycleType.FullRepeat">
            <summary>
                Full repeat cycle mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.IlluminationPiecewiseLinearCycleType.Invalid">
            <summary>
                Invalid cycle mode
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.IlluminationZoneControlMode">
            <summary>
                Contains a list of available illumination zone control modes
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.IlluminationZoneControlMode.ManualRGB">
            <summary>
                manual RGB control
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.IlluminationZoneControlMode.PiecewiseLinearRGB">
            <summary>
                Piecewise linear RGB control
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.IlluminationZoneControlMode.Invalid">
            <summary>
                Invalid control mode
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.IlluminationZoneControlValuesType">
            <summary>
                Contains a list of valid zone control value types to set or to retrieve
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.IlluminationZoneControlValuesType.CurrentlyActive">
            <summary>
                Currently active values
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.IlluminationZoneControlValuesType.Default">
            <summary>
                Default values
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.IlluminationZoneLocation">
            <summary>
                Contains a list of possible illumination zone locations
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.IlluminationZoneLocation.GPUTop">
            <summary>
                Located on the top of GPU
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.IlluminationZoneLocation.SLITop">
            <summary>
                Located on the top of SLI bridge
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.IlluminationZoneLocation.Invalid">
            <summary>
                Invalid zone location
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.IlluminationZoneType">
            <summary>
                Contains a list of valid illumination zone types
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.IlluminationZoneType.Invalid">
            <summary>
                Invalid zone type
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.IlluminationZoneType.RGB">
            <summary>
                RGB zone
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.IlluminationZoneType.FixedColor">
            <summary>
                Fixed color zone
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.MonitorConnectionType">
            <summary>
                Monitor connection types. This is reserved for future use and clients should not rely on this information.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.MonitorConnectionType.Uninitialized">
            <summary>
                Monitor not yet initialized
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.MonitorConnectionType.VGA">
            <summary>
                Connected through a VGA compatible connector
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.MonitorConnectionType.Component">
            <summary>
                Connected through a Component compatible connector
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.MonitorConnectionType.SVideo">
            <summary>
                Connected through a SVideo compatible connector
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.MonitorConnectionType.HDMI">
            <summary>
                Connected through a HDMI compatible connector
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.MonitorConnectionType.DVI">
            <summary>
                Connected through a LVDS compatible connector
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.MonitorConnectionType.LVDS">
            <summary>
                Connected through a DisplayPort compatible connector
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.MonitorConnectionType.DisplayPort">
            <summary>
                Connected through a DisplayPort compatible connector
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.MonitorConnectionType.Composite">
            <summary>
                Connected through a Composite compatible connector
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.MonitorConnectionType.Unknown">
            <summary>
                Connection type unknown
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.OutputId">
            <summary>
                GPU output IDs are identifiers for the GPU outputs that drive display devices. The GPU output might or might not be
                connected to a display, or be active. Each output is identified by a bit setting within a 32-bit unsigned integer.
                A GPU output mask consists of a 32-bit integer with several bits set, identifying more than one output from the
                same physical GPU.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Invalid">
            <summary>
                Invalid output if
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output1">
            <summary>
                Represents Output 1
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output2">
            <summary>
                Represents Output 2
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output3">
            <summary>
                Represents Output 3
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output4">
            <summary>
                Represents Output 4
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output5">
            <summary>
                Represents Output 5
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output6">
            <summary>
                Represents Output 6
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output7">
            <summary>
                Represents Output 7
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output8">
            <summary>
                Represents Output 8
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output9">
            <summary>
                Represents Output 9
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output10">
            <summary>
                Represents Output 10
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output11">
            <summary>
                Represents Output 11
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output12">
            <summary>
                Represents Output 12
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output13">
            <summary>
                Represents Output 13
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output14">
            <summary>
                Represents Output 14
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output15">
            <summary>
                Represents Output 15
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output16">
            <summary>
                Represents Output 16
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output17">
            <summary>
                Represents Output 17
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output18">
            <summary>
                Represents Output 18
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output19">
            <summary>
                Represents Output 19
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output20">
            <summary>
                Represents Output 20
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output21">
            <summary>
                Represents Output 21
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output22">
            <summary>
                Represents Output 22
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output23">
            <summary>
                Represents Output 23
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output24">
            <summary>
                Represents Output 24
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output25">
            <summary>
                Represents Output 25
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output26">
            <summary>
                Represents Output 26
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output27">
            <summary>
                Represents Output 27
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output28">
            <summary>
                Represents Output 28
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output29">
            <summary>
                Represents Output 29
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output30">
            <summary>
                Represents Output 30
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output31">
            <summary>
                Represents Output 31
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputId.Output32">
            <summary>
                Represents Output 32
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.OutputType">
            <summary>
                Connected output device types
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputType.Unknown">
            <summary>
                Unknown display device
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputType.CRT">
            <summary>
                CRT display device
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputType.DFP">
            <summary>
                Digital Flat Panel display device
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.OutputType.TV">
            <summary>
                TV display device
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.PCIeGeneration">
            <summary>
                Holds a list of known PCI-e generations and versions
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PCIeGeneration.PCIe1">
            <summary>
                PCI-e 1.0
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PCIeGeneration.PCIe1Minor1">
            <summary>
                PCI-e 1.1
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PCIeGeneration.PCIe2">
            <summary>
                PCI-e 2.0
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PCIeGeneration.PCIe3">
            <summary>
                PCI-e 3.0
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.PerformanceDecreaseReason">
            <summary>
                Holds a list possible reasons for performance decrease
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceDecreaseReason.None">
            <summary>
                No performance decrease
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceDecreaseReason.ThermalProtection">
            <summary>
                Thermal protection performance decrease
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceDecreaseReason.PowerControl">
            <summary>
                Power control performance decrease
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceDecreaseReason.AC_BATT">
            <summary>
                AC-BATT event performance decrease
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceDecreaseReason.ApiTriggered">
            <summary>
                API triggered performance decrease
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceDecreaseReason.InsufficientPower">
            <summary>
                Insufficient performance decrease (Power Connector Missing)
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceDecreaseReason.Unknown">
            <summary>
                Unknown
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.PerformanceLimit">
            <summary>
                Holds a list of known performance limitations
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceLimit.None">
            <summary>
                No performance limitation
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceLimit.PowerLimit">
            <summary>
                Limited by power usage
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceLimit.TemperatureLimit">
            <summary>
                Limited by temperature
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceLimit.VoltageLimit">
            <summary>
                Limited by voltage
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceLimit.Unknown8">
            <summary>
                Unknown limitation
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceLimit.NoLoadLimit">
            <summary>
                Limited due to no load
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.PerformanceStateId">
            <summary>
                Contains the list of valid performance state identifications
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceStateId.P0_3DPerformance">
            <summary>
                Performance state 0 (Maximum 3D Quality)
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceStateId.P1_3DPerformance">
            <summary>
                Performance state 1 (Maximum 3D Quality)
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceStateId.P2_Balanced">
            <summary>
                Performance state 2 (Balanced Performance)
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceStateId.P3_Balanced">
            <summary>
                Performance state 3 (Balanced Performance)
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceStateId.P4">
            <summary>
                Performance state 4
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceStateId.P5">
            <summary>
                Performance state 5
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceStateId.P6">
            <summary>
                Performance state 6
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceStateId.P7">
            <summary>
                Performance state 7
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceStateId.P8_HDVideoPlayback">
            <summary>
                Performance state 8 (HD Video Playback)
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceStateId.P9">
            <summary>
                Performance state 9
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceStateId.P10_DVDPlayback">
            <summary>
                Performance state 10 (DVD Video Playback)
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceStateId.P11">
            <summary>
                Performance state 11
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceStateId.P12_Idle">
            <summary>
                Performance state 12 (Idle - PowerSaving mode)
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceStateId.P13">
            <summary>
                Performance state 13
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceStateId.P14">
            <summary>
                Performance state 14
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceStateId.P15">
            <summary>
                Performance state 15
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceStateId.Undefined">
            <summary>
                Undefined performance state
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceStateId.All">
            <summary>
                All performance states
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.PerformanceStates20ClockType">
            <summary>
                Contains valid clock frequency types
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceStates20ClockType.Single">
            <summary>
                Single frequency clock
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceStates20ClockType.Range">
            <summary>
                Variable frequency clock
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.PerformanceVoltageDomain">
            <summary>
                Contains the list of possible voltage domains
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceVoltageDomain.Core">
            <summary>
                GPU Core
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PerformanceVoltageDomain.Undefined">
            <summary>
                Undefined voltage domain
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.PowerTopologyDomain">
            <summary>
                Holds a list of known power topology domain
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PowerTopologyDomain.GPU">
            <summary>
                The GPU
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PowerTopologyDomain.Board">
            <summary>
                The GPU board
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.PublicClockDomain">
            <summary>
                Contains the list of clocks available to public
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PublicClockDomain.Undefined">
            <summary>
                Undefined
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PublicClockDomain.Graphics">
            <summary>
                3D graphics clock
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PublicClockDomain.Memory">
            <summary>
                Memory clock
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PublicClockDomain.Processor">
            <summary>
                Processor clock
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.PublicClockDomain.Video">
            <summary>
                Video decoding clock
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.BoardInfo">
            <summary>
                Holds the board information (a unique GPU Board Serial Number) stored in the InfoROM
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.BoardInfo.SerialNumber">
            <summary>
                Board Serial Number
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.BoardInfo.Equals(NvAPIWrapper.Native.GPU.Structures.BoardInfo)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.BoardInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.BoardInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.BoardInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.BoardInfo.op_Equality(NvAPIWrapper.Native.GPU.Structures.BoardInfo,NvAPIWrapper.Native.GPU.Structures.BoardInfo)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.BoardInfo.op_Inequality(NvAPIWrapper.Native.GPU.Structures.BoardInfo,NvAPIWrapper.Native.GPU.Structures.BoardInfo)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.ClockDomainInfo">
            <summary>
                Holds information about the clock frequency of an specific clock domain
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ClockDomainInfo.IsPresent">
            <summary>
                Gets a boolean value that indicates if this clock domain is present on this GPU and with the requested clock type.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ClockDomainInfo.Frequency">
            <summary>
                Gets the clock frequency in kHz
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.ClockDomainInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV1">
            <summary>
                Holds clock frequencies currently associated with a physical GPU
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV1.Clocks">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV1.ClockType">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV1.GraphicsClock">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV1.MemoryClock">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV1.VideoDecodingClock">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV1.ProcessorClock">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV1.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV2">
            <summary>
                Holds clock frequencies associated with a physical GPU and an specified clock type
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV2.#ctor(NvAPIWrapper.Native.GPU.ClockType)">
            <summary>
                Creates a new ClockFrequenciesV2
            </summary>
            <param name="clockType">The type of the clock frequency being requested</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV2.Clocks">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV2.ClockType">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV2.GraphicsClock">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV2.MemoryClock">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV2.VideoDecodingClock">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV2.ProcessorClock">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV2.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV3">
            <summary>
                Holds clock frequencies associated with a physical GPU and an specified clock type
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV3.#ctor(NvAPIWrapper.Native.GPU.ClockType)">
            <summary>
                Creates a new ClockFrequenciesV3
            </summary>
            <param name="clockType">The type of the clock frequency being requested</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV3.Clocks">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV3.ClockType">
            <summary>
                Gets the type of clock frequencies provided with this object
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV3.GraphicsClock">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV3.MemoryClock">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV3.VideoDecodingClock">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV3.ProcessorClock">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.ClockFrequenciesV3.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV1">
            <summary>
                Holds information about the system's display driver memory.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV1.DedicatedVideoMemoryInkB">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV1.AvailableDedicatedVideoMemoryInkB">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV1.SystemVideoMemoryInkB">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV1.SharedSystemMemoryInkB">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV1.CurrentAvailableDedicatedVideoMemoryInkB">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV1.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV2">
            <summary>
                Holds information about the system's display driver memory.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV2.DedicatedVideoMemoryInkB">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV2.AvailableDedicatedVideoMemoryInkB">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV2.SystemVideoMemoryInkB">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV2.SharedSystemMemoryInkB">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV2.CurrentAvailableDedicatedVideoMemoryInkB">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV2.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV3">
            <summary>
                Holds information about the system's display driver memory.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV3.DedicatedVideoMemoryInkB">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV3.AvailableDedicatedVideoMemoryInkB">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV3.SystemVideoMemoryInkB">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV3.SharedSystemMemoryInkB">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV3.CurrentAvailableDedicatedVideoMemoryInkB">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV3.DedicatedVideoMemoryEvictionsSize">
            <summary>
                Size(in kb) of the total size of memory released as a result of the evictions.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV3.DedicatedVideoMemoryEvictionCount">
            <summary>
                Indicates the number of eviction events that caused an allocation to be removed from dedicated video memory to free
                GPU video memory to make room for other allocations.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.DisplayDriverMemoryInfoV3.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.DisplayIdsV2">
            <summary>
                Represents a display identification and its attributes
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayIdsV2.DisplayId">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.DisplayIdsV2.Equals(NvAPIWrapper.Native.GPU.Structures.DisplayIdsV2)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.DisplayIdsV2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.DisplayIdsV2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayIdsV2.ConnectionType">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayIdsV2.IsDynamic">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayIdsV2.IsMultiStreamRootNode">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayIdsV2.IsActive">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayIdsV2.IsCluster">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayIdsV2.IsOSVisible">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayIdsV2.IsWFD">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayIdsV2.IsConnected">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DisplayIdsV2.IsPhysicallyConnected">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.DynamicPerformanceStatesInfoV1">
            <summary>
                Holds information about the dynamic performance states (such as GPU utilization domain)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DynamicPerformanceStatesInfoV1.IsDynamicPerformanceStatesEnabled">
            <summary>
                Gets a boolean value indicating if the dynamic performance state is enabled
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DynamicPerformanceStatesInfoV1.Domains">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DynamicPerformanceStatesInfoV1.GPU">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DynamicPerformanceStatesInfoV1.FrameBuffer">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DynamicPerformanceStatesInfoV1.VideoEngine">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DynamicPerformanceStatesInfoV1.BusInterface">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.DynamicPerformanceStatesInfoV1.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.DynamicPerformanceStatesInfoV1.UtilizationDomainInfo">
            <summary>
                Holds information about a dynamic performance state utilization domain
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DynamicPerformanceStatesInfoV1.UtilizationDomainInfo.IsPresent">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.DynamicPerformanceStatesInfoV1.UtilizationDomainInfo.Percentage">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.DynamicPerformanceStatesInfoV1.UtilizationDomainInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.ECCConfigurationInfoV1">
            <summary>
                Contains information about the ECC memory configurations
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ECCConfigurationInfoV1.IsEnabled">
            <summary>
                Gets a boolean value indicating if the ECC memory is enabled
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ECCConfigurationInfoV1.IsEnabledByDefault">
            <summary>
                Gets a boolean value indicating if the ECC memory is enabled by default
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.ECCErrorInfoV1">
            <summary>
                Contains information regarding the ECC Memory errors
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ECCErrorInfoV1.CurrentErrors">
            <summary>
                Gets the number of current errors
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ECCErrorInfoV1.AggregatedErrors">
            <summary>
                Gets the number of aggregated errors
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.ECCErrorInfoV1.ECCErrorInfo">
            <summary>
                Contains ECC memory error counters information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ECCErrorInfoV1.ECCErrorInfo.SingleBitErrors">
            <summary>
                Gets the number of single bit errors
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ECCErrorInfoV1.ECCErrorInfo.DoubleBitErrors">
            <summary>
                Gets the number of double bit errors
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.ECCStatusInfoV1">
            <summary>
                Contains information regarding the ECC Memory status
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ECCStatusInfoV1.IsSupported">
            <summary>
                Gets a boolean value indicating if the ECC memory is available and supported
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ECCStatusInfoV1.ConfigurationOptions">
            <summary>
                Gets the ECC memory configurations
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ECCStatusInfoV1.IsEnabled">
            <summary>
                Gets boolean value indicating if the ECC memory is currently enabled
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.EDIDV1">
            <summary>
                Holds whole or a part of the EDID information
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.Structures.EDIDV1.MaxDataSize">
            <summary>
                The maximum number of data bytes that this structure can hold
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.EDIDV1.Data">
            <summary>
                Gets whole or a part of the EDID data
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.EDIDV2">
            <summary>
                Holds whole or a part of the EDID information
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.Structures.EDIDV2.MaxDataSize">
            <summary>
                The maximum number of data bytes that this structure can hold
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.EDIDV2.TotalSize">
            <summary>
                Gets whole size of the EDID data
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.EDIDV2.Data">
            <summary>
                Gets whole or a part of the EDID data
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.EDIDV3">
            <summary>
                Holds whole or a part of the EDID information
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.Structures.EDIDV3.MaxDataSize">
            <summary>
                The maximum number of data bytes that this structure can hold
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.EDIDV3.Identification">
            <summary>
                Identification which always returned in a monotonically increasing counter. Across a split-EDID read we need to
                verify that all calls returned the same value. This counter is incremented if we get the updated EDID.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.EDIDV3.DataOffset">
            <summary>
                Gets data offset of this part of EDID data. Which 256-byte page of the EDID we want to read. Start at 0. If the
                read succeeds with TotalSize > MaxDataSize, call back again with offset+256 until we have read the entire buffer
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.EDIDV3.TotalSize">
            <summary>
                Gets whole size of the EDID data
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.EDIDV3.Data">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.GetIlluminationParameterV1">
            <summary>
                Holds necessary information to get an illumination attribute value
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.GetIlluminationParameterV1.#ctor(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.IlluminationAttribute)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.GetIlluminationParameterV1" />.
            </summary>
            <param name="gpuHandle">The physical gpu handle.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.GetIlluminationParameterV1.PhysicalGPUHandle">
            <summary>
                Gets the parameter physical gpu handle
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.GetIlluminationParameterV1.Attribute">
            <summary>
                Gets the parameter attribute
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.GetIlluminationParameterV1.ValueInPercentage">
            <summary>
                Gets the parameter value in percentage
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.I2CInfoV2">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.GPU.II2CInfo" />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.I2CInfoV2.OutputMask">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.I2CInfoV2.UseDDCPort">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.I2CInfoV2.Speed">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.I2CInfoV2.IsReadOperation">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.I2CInfoV2.DeviceAddress">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.I2CInfoV2.Data">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.I2CInfoV2.RegisterAddress">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.I2CInfoV2.PortId">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.I2CInfoV2.#ctor(NvAPIWrapper.Native.GPU.OutputId,System.Boolean,System.Byte,System.Byte[],System.Byte[],NvAPIWrapper.Native.GPU.I2CSpeed)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.I2CInfoV2" /> for write operations.
            </summary>
            <param name="outputMask">The target display output mask</param>
            <param name="useDDCPort">A boolean value indicating that the DDC port should be used instead of the communication port</param>
            <param name="deviceAddress">The device I2C slave address</param>
            <param name="registerAddress">The target I2C register address</param>
            <param name="data">The payload data</param>
            <param name="speed">The target speed of the transaction in kHz</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.I2CInfoV2.#ctor(NvAPIWrapper.Native.GPU.OutputId,System.Boolean,System.Byte,System.Byte[],System.UInt32,NvAPIWrapper.Native.GPU.I2CSpeed)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.I2CInfoV2" /> for read operations.
            </summary>
            <param name="outputMask">The target display output mask</param>
            <param name="useDDCPort">A boolean value indicating that the DDC port should be used instead of the communication port</param>
            <param name="deviceAddress">The device I2C slave address</param>
            <param name="registerAddress">The target I2C register address</param>
            <param name="readDataLength">The length of the buffer to allocate for the read operation.</param>
            <param name="speed">The target speed of the transaction in kHz</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.I2CInfoV2.FillDDCCIChecksum(System.Byte,System.Byte[],System.Byte[])">
            <summary>
                Calculates and fills the last byte of data to the checksum value required by the DDCCI protocol
            </summary>
            <param name="deviceAddress">The target device address.</param>
            <param name="registerAddress">The target register address.</param>
            <param name="data">The data to be sent and store the checksum.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.I2CInfoV2.Dispose">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.I2CInfoV3">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.GPU.II2CInfo" />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.I2CInfoV3.OutputMask">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.I2CInfoV3.UseDDCPort">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.I2CInfoV3.Speed">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.I2CInfoV3.IsReadOperation">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.I2CInfoV3.DeviceAddress">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.I2CInfoV3.PortId">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.I2CInfoV3.Data">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.I2CInfoV3.RegisterAddress">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.I2CInfoV3.#ctor(NvAPIWrapper.Native.GPU.OutputId,System.Nullable{System.Byte},System.Boolean,System.Byte,System.Byte[],System.Byte[],NvAPIWrapper.Native.GPU.I2CSpeed)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.I2CInfoV3" /> for write operations.
            </summary>
            <param name="outputMask">The target display output mask</param>
            <param name="portId">The port id on which device is connected</param>
            <param name="useDDCPort">A boolean value indicating that the DDC port should be used instead of the communication port</param>
            <param name="deviceAddress">The device I2C slave address</param>
            <param name="registerAddress">The target I2C register address</param>
            <param name="data">The payload data</param>
            <param name="speed">The target speed of the transaction in kHz</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.I2CInfoV3.#ctor(NvAPIWrapper.Native.GPU.OutputId,System.Nullable{System.Byte},System.Boolean,System.Byte,System.Byte[],System.UInt32,NvAPIWrapper.Native.GPU.I2CSpeed)">
            <summary>
                Creates an instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.I2CInfoV3" /> for read operations.
            </summary>
            <param name="outputMask">The target display output mask</param>
            <param name="portId">The port id on which device is connected</param>
            <param name="useDDCPort">A boolean value indicating that the DDC port should be used instead of the communication port</param>
            <param name="deviceAddress">The device I2C slave address</param>
            <param name="registerAddress">The target I2C register address</param>
            <param name="readDataLength">The length of the buffer to allocate for the read operation.</param>
            <param name="speed">The target speed of the transaction in kHz</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.I2CInfoV3.FillDDCCIChecksum(System.Byte,System.Byte[],System.Byte[])">
            <summary>
                Calculates and fills the last byte of data to the checksum value required by the DDCCI protocol
            </summary>
            <param name="deviceAddress">The target device address.</param>
            <param name="registerAddress">The target register address.</param>
            <param name="data">The data to be sent and store the checksum.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.I2CInfoV3.Dispose">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceControlParametersV1">
            <summary>
                Holds information regarding available devices illumination settings
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceControlParametersV1.#ctor(NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceControlV1[])">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceControlParametersV1" />.
            </summary>
            <param name="devices">The list of illumination settings of devices.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceControlParametersV1.Devices">
            <summary>
                Gets a list of available illumination settings of devices.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceControlV1">
            <summary>
                Holds information regarding a device illumination settings
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceControlV1.#ctor(NvAPIWrapper.Native.GPU.IlluminationDeviceType,NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceSyncV1)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceControlV1" />.
            </summary>
            <param name="deviceType">The device type.</param>
            <param name="syncInformation">The device sync information.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceControlV1.DeviceType">
            <summary>
                Gets the illumination device type
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceControlV1.SyncInformation">
            <summary>
                Gets the illumination synchronization information
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceInfoParametersV1">
            <summary>
                Holds information regarding available illumination devices
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceInfoParametersV1.Devices">
            <summary>
                Gets an array containing all available illumination devices
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceInfoV1">
            <summary>
                Holds information regarding a illumination device
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceInfoV1.DeviceType">
            <summary>
                Gets the illumination device type
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceInfoV1.ControlMode">
            <summary>
                Gets the illumination device control mode
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceInfoV1.MCUV10DeviceI2CIndex">
            <summary>
                Gets the I2C index for a MCUV10 device
            </summary>
            <exception cref="T:System.InvalidOperationException" accessor="get">Device type is not MCUV10.</exception>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceSyncV1">
            <summary>
                Holds information regarding the data necessary for synchronization.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceSyncV1.#ctor(System.Boolean,System.UInt64)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceSyncV1" />
            </summary>
            <param name="isSync">A boolean value indicating if synchronization is enabled.</param>
            <param name="timeStampInMS">The synchronization timestamp in ms</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceSyncV1.IsSync">
            <summary>
                Gets a boolean value indicating the need for synchronization.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationDeviceSyncV1.TimeStampInMS">
            <summary>
                Gets the timestamp in milliseconds required for synchronization.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataFixedColor">
            <summary>
                Holds information regarding a fixed color control data
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataFixedColor.#ctor(NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataManualFixedColor)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataFixedColor" />.
            </summary>
            <param name="manualFixedColor">The zone manual control data.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataFixedColor.#ctor(NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinearFixedColor)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataFixedColor" />.
            </summary>
            <param name="piecewiseLinearFixedColor">The zone piecewise linear control data.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataFixedColor.AsManual">
            <summary>
                Gets the control data as a manual control structure.
            </summary>
            <returns>An instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataManualFixedColor" /> containing manual settings.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataFixedColor.AsPiecewise">
            <summary>
                Gets the control data as a piecewise linear control structure.
            </summary>
            <returns>
                An instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinearFixedColor" /> containing piecewise
                settings.
            </returns>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataFixedColorParameters">
            <summary>
                Holds information regarding a fixed color
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataFixedColorParameters.#ctor(System.Byte)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataFixedColorParameters" />.
            </summary>
            <param name="brightnessInPercentage">The brightness percentage value of the zone.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataFixedColorParameters.BrightnessInPercentage">
            <summary>
                Gets the brightness percentage value of the zone.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataManualFixedColor">
            <summary>
                Holds information regarding a manual fixed color control method
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataManualFixedColor.#ctor(NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataFixedColorParameters)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataManualFixedColor" />.
            </summary>
            <param name="parameters">The fixed color parameters.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataManualFixedColor.Parameters">
            <summary>
                Gets the fixed color parameters
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataManualRGB">
            <summary>
                Holds information regarding a RGB control method
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataManualRGB.#ctor(NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataManualRGBParameters)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataManualRGB" />.
            </summary>
            <param name="parameters">The RGB parameters.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataManualRGB.Parameters">
            <summary>
                Gets the RGB parameters
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataManualRGBParameters">
            <summary>
                Holds information regarding a RGB color
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataManualRGBParameters.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataManualRGBParameters" />.
            </summary>
            <param name="red">The red component of color applied to the zone.</param>
            <param name="green">The green component of color applied to the zone.</param>
            <param name="blue">The blue component of color applied to the zone.</param>
            <param name="brightnessInPercentage">The brightness percentage value of the zone.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataManualRGBParameters.Red">
            <summary>
                Gets the red component of color applied to the zone.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataManualRGBParameters.Green">
            <summary>
                Gets the green component of color applied to the zone.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataManualRGBParameters.Blue">
            <summary>
                Gets the blue component of color applied to the zone.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataManualRGBParameters.BrightnessInPercentage">
            <summary>
                Gets the brightness percentage value of the zone.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinear">
            <summary>
                Holds information regarding a piecewise linear function settings
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinear.#ctor(NvAPIWrapper.Native.GPU.IlluminationPiecewiseLinearCycleType,System.Byte,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinear" />.
            </summary>
            <param name="cycleType">The type of cycle effect to apply.</param>
            <param name="groupPeriodRepeatCount">The number of times to repeat function within group period.</param>
            <param name="riseDurationInMS">The time in millisecond to transition from color A to color B.</param>
            <param name="fallDurationInMS">The time in millisecond to transition from color B to color A.</param>
            <param name="aDurationInMS">The time in millisecond to remain at color A before color A to color B transition.</param>
            <param name="bDurationInMS">The time in millisecond to remain at color B before color B to color A transition.</param>
            <param name="nextGroupIdleDurationInMS">
                The time in millisecond to remain idle before next group of repeated function
                cycles.
            </param>
            <param name="phaseOffsetInMS">The time in millisecond to offset the cycle relative to other zones.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinear.PhaseOffsetInMS">
            <summary>
                Gets the time in millisecond to offset the cycle relative to other zones.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinear.NextGroupIdleDurationInMS">
            <summary>
                Gets the time in millisecond to remain idle before next group of repeated function cycles.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinear.BDurationInMS">
            <summary>
                Gets the time in millisecond to remain at color B before color B to color A transition.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinear.ADurationInMS">
            <summary>
                Gets the time in millisecond to remain at color A before color A to color B transition.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinear.FallDurationInMS">
            <summary>
                Gets the time in millisecond to transition from color B to color A.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinear.RiseDurationInMS">
            <summary>
                Gets the time in millisecond to transition from color A to color B.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinear.GroupPeriodRepeatCount">
            <summary>
                Gets the number of times to repeat function within group period.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinear.CycleType">
            <summary>
                Gets the type of cycle effect to apply.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinearFixedColor">
            <summary>
                Holds information regarding a piecewise linear fixed color control method
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinearFixedColor.#ctor(NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataFixedColorParameters[],NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinear)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinearFixedColor" />.
            </summary>
            <param name="endPoints">The list of fixed color piecewise function endpoints.</param>
            <param name="piecewiseLinearData">The piecewise function settings.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinearFixedColor.PiecewiseLinearData">
            <summary>
                Gets the piecewise function settings
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinearFixedColor.EndPoints">
            <summary>
                Gets the list of fixed color piecewise function endpoints
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinearRGB">
            <summary>
                Holds information regarding a piecewise linear RGB control method
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinearRGB.#ctor(NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataManualRGBParameters[],NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinear)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinearRGB" />.
            </summary>
            <param name="endPoints">The list of RGB piecewise function endpoints.</param>
            <param name="piecewiseLinearData">The piecewise function settings.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinearRGB.PiecewiseLinearData">
            <summary>
                Gets the piecewise function settings
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinearRGB.EndPoints">
            <summary>
                Gets the list of RGB function endpoints
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataRGB">
            <summary>
                Holds information regarding a RGB control data
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataRGB.#ctor(NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataManualRGB)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataRGB" />.
            </summary>
            <param name="manualRGB">The zone manual control data.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataRGB.#ctor(NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinearRGB)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataRGB" />.
            </summary>
            <param name="piecewiseLinearRGB">The zone piecewise linear control data.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataRGB.AsManual">
            <summary>
                Gets the control data as a manual control structure.
            </summary>
            <returns>An instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataManualRGB" /> containing manual settings.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataRGB.AsPiecewise">
            <summary>
                Gets the control data as a piecewise linear control structure.
            </summary>
            <returns>
                An instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataPiecewiseLinearRGB" /> containing piecewise linear
                settings.
            </returns>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlParametersV1">
            <summary>
                Holds information regarding available zone control settings
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlParametersV1.#ctor(NvAPIWrapper.Native.GPU.IlluminationZoneControlValuesType)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlParametersV1" />.
            </summary>
            <param name="valuesType">The type of settings to represents.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlParametersV1.#ctor(NvAPIWrapper.Native.GPU.IlluminationZoneControlValuesType,NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlV1[])">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlParametersV1" />.
            </summary>
            <param name="valuesType">The type of settings to represents.</param>
            <param name="zoneControls">An array of zone control settings.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlParametersV1.ValuesType">
            <summary>
                Gets the type of settings to represents.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlParametersV1.ZoneControls">
            <summary>
                Gets an array of zone control settings
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlV1">
            <summary>
                Holds information regarding a zone control status
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlV1.#ctor(NvAPIWrapper.Native.GPU.IlluminationZoneControlMode,NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataRGB)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlV1" />.
            </summary>
            <param name="controlMode">The zone control mode.</param>
            <param name="rgbData">The zone control RGB data.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlV1.#ctor(NvAPIWrapper.Native.GPU.IlluminationZoneControlMode,NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataFixedColor)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlV1" />.
            </summary>
            <param name="controlMode">The zone control mode.</param>
            <param name="fixedColorData">The zone control fixed color data.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlV1.ZoneType">
            <summary>
                Gets the type of zone and the type of data needed to control this zone
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlV1.ControlMode">
            <summary>
                Gets the zone control mode
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlV1.AsRGBData">
            <summary>
                Gets the control data as a RGB data structure.
            </summary>
            <returns>An instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataRGB" /> containing RGB settings.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlV1.AsFixedColorData">
            <summary>
                Gets the control data as a fixed color data structure.
            </summary>
            <returns>An instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneControlDataFixedColor" /> containing fixed color settings.</returns>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneInfoParametersV1">
            <summary>
                Holds information regarding illumination zones
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneInfoParametersV1.Zones">
            <summary>
                Gets the list of illumination zones.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneInfoV1">
            <summary>
                Holds information regarding a illumination zone
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneInfoV1.DeviceIndex">
            <summary>
                Gets the index of the illumination device that controls this zone.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneInfoV1.ProviderIndex">
            <summary>
                Gets the provider index used for representing logical to physical zone mapping.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneInfoV1.ZoneLocation">
            <summary>
                Gets the location of the zone on the board.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IlluminationZoneInfoV1.ZoneType">
            <summary>
                Gets the zone type.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.LogicalGPUHandle">
            <summary>
                LogicalGPUHandle is a reference to one or more physical GPUs acting as a single logical device. A single GPU will
                have a single logical GPU handle and a single physical GPU handle. Two GPUs acting in an SLI configuration will
                have a single logical GPU handle and two physical GPU handles.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.Structures.LogicalGPUHandle.MaxLogicalGPUs">
            <summary>
                Maximum number of logical GPUs
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.LogicalGPUHandle.Equals(NvAPIWrapper.Native.GPU.Structures.LogicalGPUHandle)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.LogicalGPUHandle.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.LogicalGPUHandle.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.LogicalGPUHandle.ToString">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.LogicalGPUHandle.op_Equality(NvAPIWrapper.Native.GPU.Structures.LogicalGPUHandle,NvAPIWrapper.Native.GPU.Structures.LogicalGPUHandle)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.LogicalGPUHandle.op_Inequality(NvAPIWrapper.Native.GPU.Structures.LogicalGPUHandle,NvAPIWrapper.Native.GPU.Structures.LogicalGPUHandle)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.LogicalGPUHandle.MemoryAddress">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.LogicalGPUHandle.IsNull">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20BaseVoltageEntryV1">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20VoltageEntry" />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20BaseVoltageEntryV1.#ctor(NvAPIWrapper.Native.GPU.PerformanceVoltageDomain,System.UInt32,NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ParameterDelta)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20BaseVoltageEntryV1" />.
            </summary>
            <param name="domain">The voltage domain.</param>
            <param name="value">The value in micro volt.</param>
            <param name="valueDelta">The base value delta.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20BaseVoltageEntryV1.#ctor(NvAPIWrapper.Native.GPU.PerformanceVoltageDomain,NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ParameterDelta)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20BaseVoltageEntryV1" />.
            </summary>
            <param name="domain">The voltage domain.</param>
            <param name="valueDelta">The base value delta.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20BaseVoltageEntryV1.DomainId">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20BaseVoltageEntryV1.IsEditable">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20BaseVoltageEntryV1.ValueInMicroVolt">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20BaseVoltageEntryV1.ValueDeltaInMicroVolt">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20ClockEntry" />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.#ctor(NvAPIWrapper.Native.GPU.PublicClockDomain,NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ParameterDelta)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1" />
            </summary>
            <param name="domain">The public clock domain.</param>
            <param name="valueDelta">The base value delta.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.#ctor(NvAPIWrapper.Native.GPU.PublicClockDomain,NvAPIWrapper.Native.GPU.PerformanceStates20ClockType,NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ParameterDelta)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1" />
            </summary>
            <param name="domain">The public clock domain.</param>
            <param name="clockType">The type of the clock frequency.</param>
            <param name="valueDelta">The base value delta.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.#ctor(NvAPIWrapper.Native.GPU.PublicClockDomain,NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ParameterDelta,NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.PerformanceStates20ClockDependentSingleFrequency)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1" />
            </summary>
            <param name="domain">The public clock domain.</param>
            <param name="valueDelta">The base value delta.</param>
            <param name="singleFrequency">The clock frequency value.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.#ctor(NvAPIWrapper.Native.GPU.PublicClockDomain,NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ParameterDelta,NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.PerformanceStates20ClockDependentFrequencyRange)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1" />
            </summary>
            <param name="domain">The public clock domain.</param>
            <param name="valueDelta">The base value delta.</param>
            <param name="frequencyRange">The clock frequency range value.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.DomainId">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.ClockType">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.IsEditable">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.FrequencyDeltaInkHz">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.NvAPIWrapper#Native#Interfaces#GPU#IPerformanceStates20ClockEntry#SingleFrequency">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.NvAPIWrapper#Native#Interfaces#GPU#IPerformanceStates20ClockEntry#FrequencyRange">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.SingleFrequency">
            <summary>
                Gets the range of clock frequency and related voltage information if present
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.FrequencyRange">
            <summary>
                Gets the fixed frequency of the clock
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.PerformanceStates20ClockDependentSingleFrequency">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20ClockDependentSingleFrequency" />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.PerformanceStates20ClockDependentSingleFrequency.FrequencyInkHz">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.PerformanceStates20ClockDependentSingleFrequency.#ctor(System.UInt32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.PerformanceStates20ClockDependentSingleFrequency" />.
            </summary>
            <param name="frequencyInkHz">The fixed frequency in kHz.</param>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.PerformanceStates20ClockDependentFrequencyRange">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20ClockDependentFrequencyRange" />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.PerformanceStates20ClockDependentFrequencyRange.#ctor(System.UInt32,System.UInt32,NvAPIWrapper.Native.GPU.PerformanceVoltageDomain,System.UInt32,System.UInt32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.PerformanceStates20ClockDependentFrequencyRange" />.
            </summary>
            <param name="minimumFrequency">The minimum frequency in kHz.</param>
            <param name="maximumFrequency">The maximum frequency in kHz.</param>
            <param name="voltageDomainId">The corresponding voltage domain identification number.</param>
            <param name="minimumVoltage">The minimum voltage in uV.</param>
            <param name="maximumVoltage">The maximum voltage in uV.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.PerformanceStates20ClockDependentFrequencyRange.MinimumFrequencyInkHz">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.PerformanceStates20ClockDependentFrequencyRange.MaximumFrequencyInkHz">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.PerformanceStates20ClockDependentFrequencyRange.VoltageDomainId">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.PerformanceStates20ClockDependentFrequencyRange.MinimumVoltageInMicroVolt">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1.PerformanceStates20ClockDependentFrequencyRange.MaximumVoltageInMicroVolt">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV1">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20Info" />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV1.#ctor(NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV1.PerformanceState20[],System.UInt32,System.UInt32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV1" />
            </summary>
            <param name="performanceStates">The list of performance states and their settings.</param>
            <param name="clocksCount">Number of clock frequencies per each performance state.</param>
            <param name="baseVoltagesCount">Number of base voltage per each performance state.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV1.GeneralVoltages">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV1.IsEditable">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV1.PerformanceStates">
            <summary>
                Gets an array of valid power states for the GPU
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV1.NvAPIWrapper#Native#Interfaces#GPU#IPerformanceStates20Info#PerformanceStates">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV1.Clocks">
            <summary>
                Gets a dictionary for valid power states and their clock frequencies
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV1.NvAPIWrapper#Native#Interfaces#GPU#IPerformanceStates20Info#Clocks">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV1.Voltages">
            <summary>
                Gets a dictionary for valid power states and their voltage settings
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV1.NvAPIWrapper#Native#Interfaces#GPU#IPerformanceStates20Info#Voltages">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV1.PerformanceState20">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceState20" />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV1.PerformanceState20.#ctor(NvAPIWrapper.Native.GPU.PerformanceStateId,NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ClockEntryV1[],NvAPIWrapper.Native.GPU.Structures.PerformanceStates20BaseVoltageEntryV1[])">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV1.PerformanceState20" />.
            </summary>
            <param name="stateId">The performance identification number.</param>
            <param name="clocks">The list of clock entries.</param>
            <param name="baseVoltages">The list of base voltages.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV1.PerformanceState20.StateId">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV1.PerformanceState20.IsEditable">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV2">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20Info" />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV2.#ctor(NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV1.PerformanceState20[],System.UInt32,System.UInt32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV2" />
            </summary>
            <param name="performanceStates">The list of performance states and their settings.</param>
            <param name="clocksCount">Number of clock frequencies per each performance state.</param>
            <param name="baseVoltagesCount">Number of base voltage per each performance state.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV2.#ctor(NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV1.PerformanceState20[],System.UInt32,System.UInt32,NvAPIWrapper.Native.GPU.Structures.PerformanceStates20BaseVoltageEntryV1[])">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV2" />
            </summary>
            <param name="performanceStates">The list of performance states and their settings.</param>
            <param name="clocksCount">Number of clock frequencies per each performance state.</param>
            <param name="baseVoltagesCount">Number of base voltage per each performance state.</param>
            <param name="generalVoltages">The list of general voltages and their settings.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV2.GeneralVoltages">
            <summary>
                Gets the list of general over-volting settings
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV2.NvAPIWrapper#Native#Interfaces#GPU#IPerformanceStates20Info#GeneralVoltages">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV2.IsEditable">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV2.PerformanceStates">
            <summary>
                Gets an array of valid power states for the GPU
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV2.NvAPIWrapper#Native#Interfaces#GPU#IPerformanceStates20Info#PerformanceStates">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV2.Clocks">
            <summary>
                Gets a dictionary for valid power states and their clock frequencies
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV2.Voltages">
            <summary>
                Gets a dictionary for valid power states and their voltage settings
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV2.NvAPIWrapper#Native#Interfaces#GPU#IPerformanceStates20Info#Clocks">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV2.NvAPIWrapper#Native#Interfaces#GPU#IPerformanceStates20Info#Voltages">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV3">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20Info" />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV3.#ctor(NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV1.PerformanceState20[],System.UInt32,System.UInt32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV3" />
            </summary>
            <param name="performanceStates">The list of performance states and their settings.</param>
            <param name="clocksCount">Number of clock frequencies per each performance state.</param>
            <param name="baseVoltagesCount">Number of base voltage per each performance state.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV3.#ctor(NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV1.PerformanceState20[],System.UInt32,System.UInt32,NvAPIWrapper.Native.GPU.Structures.PerformanceStates20BaseVoltageEntryV1[])">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV3" />
            </summary>
            <param name="performanceStates">The list of performance states and their settings.</param>
            <param name="clocksCount">Number of clock frequencies per each performance state.</param>
            <param name="baseVoltagesCount">Number of base voltage per each performance state.</param>
            <param name="generalVoltages">The list of general voltages and their settings.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV3.GeneralVoltages">
            <summary>
                Gets the list of general over-volting settings
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV3.NvAPIWrapper#Native#Interfaces#GPU#IPerformanceStates20Info#GeneralVoltages">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV3.IsEditable">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV3.PerformanceStates">
            <summary>
                Gets an array of valid power states for the GPU
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV3.NvAPIWrapper#Native#Interfaces#GPU#IPerformanceStates20Info#PerformanceStates">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV3.Clocks">
            <summary>
                Gets a dictionary for valid power states and their clock frequencies
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV3.Voltages">
            <summary>
                Gets a dictionary for valid power states and their voltage settings
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV3.NvAPIWrapper#Native#Interfaces#GPU#IPerformanceStates20Info#Clocks">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20InfoV3.NvAPIWrapper#Native#Interfaces#GPU#IPerformanceStates20Info#Voltages">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ParameterDelta">
            <summary>
                Hold information regarding delta values and delta ranges for voltages or clock frequencies in their respective unit
                (uV or kHz)
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ParameterDelta.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ParameterDelta" />
            </summary>
            <param name="deltaValue">The delta value.</param>
            <param name="deltaMinimum">The delta range minimum value.</param>
            <param name="deltaMaximum">The delta range maximum value.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ParameterDelta.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ParameterDelta" />
            </summary>
            <param name="deltaValue">The delta value.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ParameterDelta.DeltaValue">
            <summary>
                Gets the delta value in the respective unit (uV or kHz)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ParameterDelta.DeltaRange">
            <summary>
                Gets the range of the valid delta values in the respective unit (uV or kHz)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ParameterDelta.PerformanceState20ParameterDeltaValueRange">
            <summary>
                Holds information regarding a range of values
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ParameterDelta.PerformanceState20ParameterDeltaValueRange.#ctor(System.Int32,System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ParameterDelta.PerformanceState20ParameterDeltaValueRange" />.
            </summary>
            <param name="minimum">The minimum value of delta range.</param>
            <param name="maximum">The maximum value of delta range.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ParameterDelta.PerformanceState20ParameterDeltaValueRange.Minimum">
            <summary>
                Gets the minimum value
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStates20ParameterDelta.PerformanceState20ParameterDeltaValueRange.Maximum">
            <summary>
                Gets the maximum value
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV1">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStatesInfo" />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV1.IsPerformanceMonitorEnable">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV1.IsCapableOfDynamicPerformance">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV1.IsDynamicPerformanceEnable">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV1.PerformanceStates">
            <summary>
                Gets an array of valid and available performance states information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV1.NvAPIWrapper#Native#Interfaces#GPU#IPerformanceStatesInfo#PerformanceStates">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV1.PerformanceStatesVoltages">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV1.PerformanceStatesClocks">
            <summary>
                Gets a dictionary of valid and available performance states and their clock information as an array
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV1.NvAPIWrapper#Native#Interfaces#GPU#IPerformanceStatesInfo#PerformanceStatesClocks">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV1.PerformanceState">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceState" />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV1.PerformanceState.StateId">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV1.PerformanceState.IsPCIELimited">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV1.PerformanceState.IsOverclocked">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV1.PerformanceState.IsOverclockable">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV1.PerformanceState.PerformanceStatesClock">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStatesClock" />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV1.PerformanceState.PerformanceStatesClock.DomainId">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV1.PerformanceState.PerformanceStatesClock.Frequency">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV2">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStatesInfo" />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV2.IsPerformanceMonitorEnable">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV2.IsCapableOfDynamicPerformance">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV2.IsDynamicPerformanceEnable">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV2.PerformanceStates">
            <summary>
                Gets an array of valid and available performance states information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV2.NvAPIWrapper#Native#Interfaces#GPU#IPerformanceStatesInfo#PerformanceStates">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV2.PerformanceStatesVoltages">
            <summary>
                Gets a dictionary of valid and available performance states and their voltage information as an array
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV2.NvAPIWrapper#Native#Interfaces#GPU#IPerformanceStatesInfo#PerformanceStatesVoltages">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV2.PerformanceStatesClocks">
            <summary>
                Gets a dictionary of valid and available performance states and their clock information as an array
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV2.NvAPIWrapper#Native#Interfaces#GPU#IPerformanceStatesInfo#PerformanceStatesClocks">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV2.PerformanceState">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceState" />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV2.PerformanceState.StateId">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV2.PerformanceState.IsPCIELimited">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV2.PerformanceState.IsOverclocked">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV2.PerformanceState.IsOverclockable">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV2.PerformanceState.PerformanceStatesVoltage">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStatesVoltage" />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV2.PerformanceState.PerformanceStatesVoltage.DomainId">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV2.PerformanceState.PerformanceStatesVoltage.Value">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV2.PerformanceState.PerformanceStatesClock">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStatesClock" />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV2.PerformanceState.PerformanceStatesClock.IsOverclockable">
            <summary>
                Gets a boolean value indicating if this clock domain is overclockable
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV2.PerformanceState.PerformanceStatesClock.DomainId">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV2.PerformanceState.PerformanceStatesClock.Frequency">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV3">
            <inheritdoc cref="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStatesInfo" />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV3.IsPerformanceMonitorEnable">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV3.IsCapableOfDynamicPerformance">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV3.IsDynamicPerformanceEnable">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV3.PerformanceStates">
            <summary>
                Gets an array of valid and available performance states information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV3.NvAPIWrapper#Native#Interfaces#GPU#IPerformanceStatesInfo#PerformanceStates">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV3.PerformanceStatesVoltages">
            <summary>
                Gets a dictionary of valid and available performance states and their voltage information as an array
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV3.NvAPIWrapper#Native#Interfaces#GPU#IPerformanceStatesInfo#PerformanceStatesVoltages">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV3.PerformanceStatesClocks">
            <summary>
                Gets a dictionary of valid and available performance states and their clock information as an array
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PerformanceStatesInfoV3.NvAPIWrapper#Native#Interfaces#GPU#IPerformanceStatesInfo#PerformanceStatesClocks">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle">
            <summary>
                PhysicalGPUHandle is a reference to a physical GPU. Each GPU in a multi-GPU board will have its own handle. GPUs
                are assigned a handle even if they are not in use by the OS.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle.PhysicalGPUs">
            <summary>
                Queryable number of physical GPUs
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle.MaxPhysicalGPUs">
            <summary>
                Maximum number of physical GPUs
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle.Equals(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle.ToString">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle.MemoryAddress">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle.IsNull">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle.op_Equality(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle.op_Inequality(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle.DefaultHandle">
            <summary>
                Gets default PhysicalGPUHandle with a null pointer
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateArchitectInfoV2">
            <summary>
                Contains information regarding a GPU architecture
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateArchitectInfoV2.Revision">
            <summary>
                Gets the GPU revision
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostLockV2">
            <summary>
                Contains information regarding the GPU clock boost locks
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostLockV2.ClockBoostLocks">
            <summary>
                Gets the list of clock boost locks
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostLockV2.#ctor(NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostLockV2.ClockBoostLock[])">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostLockV2" />
            </summary>
            <param name="clockBoostLocks">The list of clock boost locks</param>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostLockV2.ClockBoostLock">
            <summary>
                Contains information regarding a clock boost lock
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostLockV2.ClockBoostLock.ClockDomain">
            <summary>
                Gets the public clock domain
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostLockV2.ClockBoostLock.LockMode">
            <summary>
                Gets the clock lock mode
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostLockV2.ClockBoostLock.VoltageInMicroV">
            <summary>
                Gets the locked voltage in uV
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostLockV2.ClockBoostLock.#ctor(NvAPIWrapper.Native.GPU.PublicClockDomain,NvAPIWrapper.Native.GPU.ClockLockMode,System.UInt32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostLockV2.ClockBoostLock" />.
            </summary>
            <param name="clockDomain">The public clock domain.</param>
            <param name="lockMode">The clock lock mode.</param>
            <param name="voltageInMicroV">The locked voltage in uV.</param>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostMasksV1">
            <summary>
                Contains information regarding GPU clock boost masks
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostMasksV1.ClockBoostMasks">
            <summary>
                Gets a list of clock boost masks
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostMasksV1.ClockBoostMask">
            <summary>
                Contains information regarding a clock boost mask
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostMasksV1.ClockBoostMask.MemoryDelta">
            <summary>
                Memory clock frequency delta
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostMasksV1.ClockBoostMask.GPUDelta">
            <summary>
                GPU clock frequency delta
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostRangesV1">
            <summary>
                Contains information regarding GPU clock boost ranges
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostRangesV1.ClockBoostRanges">
            <summary>
                Gets a list of clock boost ranges
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostRangesV1.ClockBoostRange">
            <summary>
                Contains information regarding a clock boost range
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostRangesV1.ClockBoostRange.ClockType">
            <summary>
                Gets the clock type
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostRangesV1.ClockBoostRange.MaximumInkHz">
            <summary>
                Gets the maximum boost frequency in kHz
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostRangesV1.ClockBoostRange.MinimumInkHz">
            <summary>
                Gets the minimum boost frequency in kHz
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostRangesV1.ClockBoostRange.MaximumTemperature">
            <summary>
                Gets the maximum boost temperature
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostTableV1">
            <summary>
                Contains information regarding GPU clock boost table
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostTableV1.GPUDeltas">
            <summary>
                Gets a list of clock delta entries
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostTableV1.#ctor(NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostTableV1.GPUDelta[])">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostTableV1" />
            </summary>
            <param name="gpuDeltas">The list of GPU clock frequency delta entries.</param>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostTableV1.GPUDelta">
            <summary>
                Contains information regarding a GPU delta entry in the clock boost table
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostTableV1.GPUDelta.FrequencyDeltaInkHz">
            <summary>
                Gets the frequency delta in kHz
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PrivateClockBoostTableV1.GPUDelta.#ctor(System.Int32)">
            <summary>
                Creates a new instance of GPUDelta.
            </summary>
            <param name="frequencyDeltaInkHz">The clock frequency in kHz.</param>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerLevelsV1">
            <summary>
                Contains information regarding GPU cooler levels
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerLevelsV1.GetCoolerLevels(System.Int32)">
            <summary>
                Gets the list of cooler levels.
            </summary>
            <param name="count">The number of cooler levels to return.</param>
            <returns>An array of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerLevelsV1.CoolerLevel" /> instances.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerLevelsV1.#ctor(NvAPIWrapper.Native.GPU.Structures.PrivateCoolerLevelsV1.CoolerLevel[])">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerLevelsV1" />.
            </summary>
            <param name="levels">The list of cooler levels.</param>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerLevelsV1.CoolerLevel">
            <summary>
                Contains information regarding a cooler level
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerLevelsV1.CoolerLevel.#ctor(NvAPIWrapper.Native.GPU.CoolerPolicy,System.UInt32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerLevelsV1.CoolerLevel" />
            </summary>
            <param name="coolerPolicy">The cooler policy.</param>
            <param name="level">The cooler level in percentage.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerLevelsV1.CoolerLevel.#ctor(NvAPIWrapper.Native.GPU.CoolerPolicy)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerLevelsV1.CoolerLevel" />
            </summary>
            <param name="coolerPolicy">The cooler policy.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerLevelsV1.CoolerLevel.#ctor(System.UInt32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerLevelsV1.CoolerLevel" />
            </summary>
            <param name="level">The cooler level in percentage.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerLevelsV1.CoolerLevel.CurrentLevel">
            <summary>
                Gets the cooler level in percentage.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerLevelsV1.CoolerLevel.CoolerPolicy">
            <summary>
                Gets the cooler policy
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerPolicyTableV1">
            <summary>
                Contains information regarding GPU cooler policy table
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerPolicyTableV1.TableEntries(System.Int32)">
            <summary>
                Gets an array of policy table entries
            </summary>
            <param name="count">The number of table entries.</param>
            <returns>An array of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerPolicyTableV1.CoolerPolicyTableEntry" /> instances.</returns>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerPolicyTableV1.Policy">
            <summary>
                Gets the table cooler policy
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerPolicyTableV1.#ctor(NvAPIWrapper.Native.GPU.CoolerPolicy,NvAPIWrapper.Native.GPU.Structures.PrivateCoolerPolicyTableV1.CoolerPolicyTableEntry[])">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerPolicyTableV1" />
            </summary>
            <param name="policy">The table cooler policy.</param>
            <param name="policyTableEntries">An array of table entries.</param>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerPolicyTableV1.CoolerPolicyTableEntry">
            <summary>
                Contains information regarding a clock boost mask
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerPolicyTableV1.CoolerPolicyTableEntry.EntryId">
            <summary>
                Gets the entry identification number
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerPolicyTableV1.CoolerPolicyTableEntry.CurrentLevel">
            <summary>
                Gets the current level in percentage
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerPolicyTableV1.CoolerPolicyTableEntry.DefaultLevel">
            <summary>
                Gets the default level in percentage
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerPolicyTableV1.CoolerPolicyTableEntry.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerPolicyTableV1.CoolerPolicyTableEntry" />.
            </summary>
            <param name="entryId">The entry identification number.</param>
            <param name="currentLevel">The current level in percentage.</param>
            <param name="defaultLevel">The default level in percentage.</param>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerSettingsV1">
            <summary>
                Contains information regarding GPU cooler settings
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerSettingsV1.CoolerSettings">
            <summary>
                Gets the list of cooler settings
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerSettingsV1.CoolerSetting">
            <summary>
                Contains information regarding a cooler settings
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerSettingsV1.CoolerSetting.CurrentLevel">
            <summary>
                Gets the current cooler level in percentage.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerSettingsV1.CoolerSetting.DefaultMinimumLevel">
            <summary>
                Gets the default minimum cooler level in percentage.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerSettingsV1.CoolerSetting.DefaultMaximumLevel">
            <summary>
                Gets the default maximum cooler level in percentage.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerSettingsV1.CoolerSetting.CurrentMinimumLevel">
            <summary>
                Gets the current minimum cooler level in percentage.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerSettingsV1.CoolerSetting.CurrentMaximumLevel">
            <summary>
                Gets the current maximum cooler level in percentage.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerSettingsV1.CoolerSetting.CoolerType">
            <summary>
                Gets the cooler type.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerSettingsV1.CoolerSetting.CoolerController">
            <summary>
                Gets the cooler controller.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerSettingsV1.CoolerSetting.DefaultPolicy">
            <summary>
                Gets the cooler default policy.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerSettingsV1.CoolerSetting.CurrentPolicy">
            <summary>
                Gets the cooler current policy.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerSettingsV1.CoolerSetting.Target">
            <summary>
                Gets the cooler target.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateCoolerSettingsV1.CoolerSetting.ControlMode">
            <summary>
                Gets the cooler control mode.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivatePCIeInfoV2">
            <summary>
                Contains information regarding GPU PCI-e connection configurations
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivatePCIeInfoV2.PCIePerformanceStateInfos">
            <summary>
                Gets the list of performance state PCI-e configurations information
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivatePCIeInfoV2.PCIePerformanceStateInfo">
            <summary>
                Contains information regarding a performance state PCI-e connection
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivatePCIeInfoV2.PCIePerformanceStateInfo.TransferRateInMTps">
            <summary>
                Gets the PCI-e transfer rate in Mega Transfers per Second
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivatePCIeInfoV2.PCIePerformanceStateInfo.Generation">
            <summary>
                Gets the PCI-e generation
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivatePCIeInfoV2.PCIePerformanceStateInfo.Lanes">
            <summary>
                Gets the PCI-e down stream lanes
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivatePCIeInfoV2.PCIePerformanceStateInfo.Version">
            <summary>
                Gets the PCI-e version
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivatePerformanceInfoV1">
            <summary>
                Contains information regarding GPU performance limitations
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivatePerformanceInfoV1.IsPowerLimitSupported">
            <summary>
                Gets a boolean value indicating if performance limit by power usage is supported.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivatePerformanceInfoV1.IsTemperatureLimitSupported">
            <summary>
                Gets a boolean value indicating if performance limit by temperature is supported.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivatePerformanceInfoV1.IsVoltageLimitSupported">
            <summary>
                Gets a boolean value indicating if performance limit by voltage usage is supported.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivatePerformanceInfoV1.IsNoLoadLimitSupported">
            <summary>
                Gets a boolean value indicating if performance limit by detecting no load is supported.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivatePerformanceStatusV1">
            <summary>
                Contains information regarding GPU performance limitations status
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivatePerformanceStatusV1.PerformanceLimit">
            <summary>
                Gets the current effective performance limitation
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivatePowerPoliciesInfoV1">
            <summary>
                Contains information regarding GPU power policies
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivatePowerPoliciesInfoV1.PowerPolicyInfoEntries">
            <summary>
                Gets a list of power policy entries
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivatePowerPoliciesInfoV1.PowerPolicyInfoEntry">
            <summary>
                Contains information regarding a GPU power policy entry
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivatePowerPoliciesInfoV1.PowerPolicyInfoEntry.PerformanceStateId">
            <summary>
                Gets the performance state identification number
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivatePowerPoliciesInfoV1.PowerPolicyInfoEntry.MinimumPowerInPCM">
            <summary>
                Gets the minimum power limit in per cent mille
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivatePowerPoliciesInfoV1.PowerPolicyInfoEntry.DefaultPowerInPCM">
            <summary>
                Gets the default power limit in per cent mille
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivatePowerPoliciesInfoV1.PowerPolicyInfoEntry.MaximumPowerInPCM">
            <summary>
                Gets the maximum power limit in per cent mille
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivatePowerPoliciesStatusV1">
            <summary>
                Contains information regarding GPU power policies status
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivatePowerPoliciesStatusV1.PowerPolicyStatusEntries">
            <summary>
                Gets a list of power policy status entries
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PrivatePowerPoliciesStatusV1.#ctor(NvAPIWrapper.Native.GPU.Structures.PrivatePowerPoliciesStatusV1.PowerPolicyStatusEntry[])">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PrivatePowerPoliciesStatusV1" />
            </summary>
            <param name="powerPoliciesStatusEntries">The list of power policy status entries.</param>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivatePowerPoliciesStatusV1.PowerPolicyStatusEntry">
            <summary>
                Contains information regarding a power policies status entry
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivatePowerPoliciesStatusV1.PowerPolicyStatusEntry.PerformanceStateId">
            <summary>
                Gets the performance state identification number
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PrivatePowerPoliciesStatusV1.PowerPolicyStatusEntry.#ctor(System.UInt32)">
            <summary>
                Creates a new instance of PowerPolicyStatusEntry.
            </summary>
            <param name="powerTargetInPCM">The power limit target in per cent mille.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivatePowerPoliciesStatusV1.PowerPolicyStatusEntry.PowerTargetInPCM">
            <summary>
                Gets the power limit target in per cent mille
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivatePowerTopologiesStatusV1">
            <summary>
                Contains information regarding GPU power topology status
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivatePowerTopologiesStatusV1.PowerPolicyStatusEntries">
            <summary>
                Gets a list of power topology status entries
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivatePowerTopologiesStatusV1.PowerTopologiesStatusEntry">
            <summary>
                Contains information regarding a power topology status entry
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivatePowerTopologiesStatusV1.PowerTopologiesStatusEntry.Domain">
            <summary>
                Gets the power topology domain
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivatePowerTopologiesStatusV1.PowerTopologiesStatusEntry.PowerUsageInPCM">
            <summary>
                Gets the power usage in per cent mille
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateThermalPoliciesInfoV2">
            <summary>
                Contains information regarding GPU thermal policies
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateThermalPoliciesInfoV2.ThermalPoliciesInfoEntries">
            <summary>
                Gets a list of thermal policy entries
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateThermalPoliciesInfoV2.ThermalPoliciesInfoEntry">
            <summary>
                Contains information regarding a thermal policies entry
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateThermalPoliciesInfoV2.ThermalPoliciesInfoEntry.Controller">
            <summary>
                Gets the thermal controller
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateThermalPoliciesInfoV2.ThermalPoliciesInfoEntry.MinimumTemperature">
            <summary>
                Gets the minimum temperature limit target
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateThermalPoliciesInfoV2.ThermalPoliciesInfoEntry.DefaultTemperature">
            <summary>
                Gets the default temperature limit target
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateThermalPoliciesInfoV2.ThermalPoliciesInfoEntry.MaximumTemperature">
            <summary>
                Gets the maximum temperature limit target
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateThermalPoliciesStatusV2">
            <summary>
                Contains information regarding GPU thermal policies status
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateThermalPoliciesStatusV2.ThermalPoliciesStatusEntries">
            <summary>
                Gets a list of thermal policy status entries
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PrivateThermalPoliciesStatusV2.#ctor(NvAPIWrapper.Native.GPU.Structures.PrivateThermalPoliciesStatusV2.ThermalPoliciesStatusEntry[])">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PrivateThermalPoliciesStatusV2" />
            </summary>
            <param name="policiesStatusEntries">The list of thermal policy status entries</param>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateThermalPoliciesStatusV2.ThermalPoliciesStatusEntry">
            <summary>
                Contains information regarding a thermal policies status entry
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PrivateThermalPoliciesStatusV2.ThermalPoliciesStatusEntry.#ctor(NvAPIWrapper.Native.GPU.ThermalController,System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PrivateThermalPoliciesStatusV2.ThermalPoliciesStatusEntry" />
            </summary>
            <param name="controller">The thermal controller</param>
            <param name="targetTemperature">The target temperature.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PrivateThermalPoliciesStatusV2.ThermalPoliciesStatusEntry.#ctor(NvAPIWrapper.Native.GPU.PerformanceStateId,NvAPIWrapper.Native.GPU.ThermalController,System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PrivateThermalPoliciesStatusV2.ThermalPoliciesStatusEntry" />
            </summary>
            <param name="performanceStateId">The performance state identification number</param>
            <param name="controller">The thermal controller</param>
            <param name="targetTemperature">The target temperature.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateThermalPoliciesStatusV2.ThermalPoliciesStatusEntry.Controller">
            <summary>
                Gets the thermal controller
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateThermalPoliciesStatusV2.ThermalPoliciesStatusEntry.PerformanceStateId">
            <summary>
                Gets the performance state identification number
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateThermalPoliciesStatusV2.ThermalPoliciesStatusEntry.TargetTemperature">
            <summary>
                Gets the target temperature
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateUsagesInfoV1">
            <summary>
                Holds information about the GPU usage statistics
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateUsagesInfoV1.Domains">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateUsagesInfoV1.GPU">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateUsagesInfoV1.FrameBuffer">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateUsagesInfoV1.VideoEngine">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateUsagesInfoV1.BusInterface">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PrivateUsagesInfoV1.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateUsagesInfoV1.UsagesInfoEntry">
            <summary>
                Holds information about the usage statistics for a domain
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateUsagesInfoV1.UsagesInfoEntry.IsPresent">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateUsagesInfoV1.UsagesInfoEntry.Percentage">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PrivateUsagesInfoV1.UsagesInfoEntry.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateVFPCurveV1">
            <summary>
                Contains information regarding GPU boost frequency curve
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateVFPCurveV1.GPUCurveEntries">
            <summary>
                Gets the list of GPU curve entries
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateVFPCurveV1.MemoryCurveEntries">
            <summary>
                Gets the list of memory curve entries
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateVFPCurveV1.VFPCurveEntry">
            <summary>
                Contains information regarding a boost frequency curve entry
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateVFPCurveV1.VFPCurveEntry.FrequencyInkHz">
            <summary>
                Gets the frequency in kHz
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateVFPCurveV1.VFPCurveEntry.VoltageInMicroV">
            <summary>
                Gets the voltage in uV
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateVoltageBoostPercentV1">
            <summary>
                Contains information regarding GPU voltage boost percentage
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateVoltageBoostPercentV1.Percent">
            <summary>
                Gets the voltage boost in percentage
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.PrivateVoltageBoostPercentV1.#ctor(System.UInt32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.PrivateVoltageBoostPercentV1" />
            </summary>
            <param name="percent">The voltage boost in percentage</param>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.PrivateVoltageStatusV1">
            <summary>
                Contains information regarding GPU voltage boost status
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.PrivateVoltageStatusV1.ValueInMicroVolt">
            <summary>
                Gets the value in uV
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.QueryIlluminationSupportParameterV1">
            <summary>
                Holds necessary information to get an illumination attribute support status
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.QueryIlluminationSupportParameterV1.#ctor(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.IlluminationAttribute)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.QueryIlluminationSupportParameterV1" />.
            </summary>
            <param name="gpuHandle">The physical gpu handle.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.QueryIlluminationSupportParameterV1.PhysicalGPUHandle">
            <summary>
                Gets the parameter physical gpu handle
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.QueryIlluminationSupportParameterV1.Attribute">
            <summary>
                Gets the parameter attribute
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.QueryIlluminationSupportParameterV1.IsSupported">
            <summary>
                Gets a boolean value indicating if this attribute is supported and controllable via this GPU
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.SetIlluminationParameterV1">
            <summary>
                Holds necessary information to set an illumination attribute value
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.SetIlluminationParameterV1.#ctor(NvAPIWrapper.Native.GPU.Structures.PhysicalGPUHandle,NvAPIWrapper.Native.GPU.IlluminationAttribute,System.UInt32)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Native.GPU.Structures.SetIlluminationParameterV1" />.
            </summary>
            <param name="gpuHandle">The physical gpu handle.</param>
            <param name="attribute">The attribute.</param>
            <param name="valueInPercentage">The attribute value in percentage.</param>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.SetIlluminationParameterV1.PhysicalGPUHandle">
            <summary>
                Gets the parameter physical gpu handle
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.SetIlluminationParameterV1.Attribute">
            <summary>
                Gets the parameter attribute
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.SetIlluminationParameterV1.ValueInPercentage">
            <summary>
                Gets the parameter value in percentage
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.ThermalSettingsV1">
            <summary>
                Holds a list of thermal sensor information settings (temperature values)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ThermalSettingsV1.Sensors">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.ThermalSettingsV1.ThermalSensor">
            <summary>
                Holds information about a single thermal sensor
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ThermalSettingsV1.ThermalSensor.Controller">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ThermalSettingsV1.ThermalSensor.DefaultMinimumTemperature">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ThermalSettingsV1.ThermalSensor.DefaultMaximumTemperature">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ThermalSettingsV1.ThermalSensor.CurrentTemperature">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ThermalSettingsV1.ThermalSensor.Target">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.ThermalSettingsV1.ThermalSensor.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.ThermalSettingsV2">
            <summary>
                Holds a list of thermal sensor information settings (temperature values)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ThermalSettingsV2.Sensors">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.ThermalSettingsV2.ThermalSensor">
            <summary>
                Holds information about a single thermal sensor
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ThermalSettingsV2.ThermalSensor.Controller">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ThermalSettingsV2.ThermalSensor.DefaultMinimumTemperature">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ThermalSettingsV2.ThermalSensor.DefaultMaximumTemperature">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ThermalSettingsV2.ThermalSensor.CurrentTemperature">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.ThermalSettingsV2.ThermalSensor.Target">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.GPU.Structures.ThermalSettingsV2.ThermalSensor.ToString">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.Structures.IUtilizationStatus">
            <summary>
                Holds information about the GPU utilization domains
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IUtilizationStatus.BusInterface">
            <summary>
                Gets the Bus interface (BUS) utilization
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IUtilizationStatus.Domains">
            <summary>
                Gets all valid utilization domains and information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IUtilizationStatus.FrameBuffer">
            <summary>
                Gets the frame buffer (FB) utilization
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IUtilizationStatus.GPU">
            <summary>
                Gets the graphic engine (GPU) utilization
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.GPU.Structures.IUtilizationStatus.VideoEngine">
            <summary>
                Gets the Video engine (VID) utilization
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.SystemType">
            <summary>
                GPU systems
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.SystemType.Unknown">
            <summary>
                Unknown type
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.SystemType.Laptop">
            <summary>
                Laptop GPU
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.SystemType.Desktop">
            <summary>
                Desktop GPU
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.ThermalController">
            <summary>
                List of possible thermal sensor controllers
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalController.None">
            <summary>
                No Thermal Controller
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalController.GPU">
            <summary>
                GPU acting as thermal controller
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalController.ADM1032">
            <summary>
                ADM1032 Thermal Controller
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalController.MAX6649">
            <summary>
                MAX6649 Thermal Controller
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalController.MAX1617">
            <summary>
                MAX1617 Thermal Controller
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalController.LM99">
            <summary>
                LM99 Thermal Controller
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalController.LM89">
            <summary>
                LM89 Thermal Controller
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalController.LM64">
            <summary>
                LM64 Thermal Controller
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalController.ADT7473">
            <summary>
                ADT7473 Thermal Controller
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalController.SBMAX6649">
            <summary>
                SBMAX6649 Thermal Controller
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalController.VideoBiosEvent">
            <summary>
                VideoBios acting as thermal controller
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalController.OperatingSystem">
            <summary>
                Operating System acting as thermal controller
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalController.Unknown">
            <summary>
                Unknown Thermal Controller
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.ThermalSettingsTarget">
            <summary>
                List of possible thermal targets
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalSettingsTarget.None">
            <summary>
                None
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalSettingsTarget.GPU">
            <summary>
                GPU core temperature
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalSettingsTarget.Memory">
            <summary>
                GPU memory temperature
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalSettingsTarget.PowerSupply">
            <summary>
                GPU power supply temperature
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalSettingsTarget.Board">
            <summary>
                GPU board ambient temperature
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalSettingsTarget.VisualComputingBoard">
            <summary>
                Visual Computing Device Board temperature requires NvVisualComputingDeviceHandle
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalSettingsTarget.VisualComputingInlet">
            <summary>
                Visual Computing Device Inlet temperature requires NvVisualComputingDeviceHandle
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalSettingsTarget.VisualComputingOutlet">
            <summary>
                Visual Computing Device Outlet temperature requires NvVisualComputingDeviceHandle
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalSettingsTarget.All">
            <summary>
                Used for retrieving all thermal settings
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.ThermalSettingsTarget.Unknown">
            <summary>
                Unknown thermal target
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.GPU.UtilizationDomain">
            <summary>
                Valid utilization domain
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.UtilizationDomain.GPU">
            <summary>
                GPU utilization domain
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.UtilizationDomain.FrameBuffer">
            <summary>
                Frame buffer utilization domain
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.UtilizationDomain.VideoEngine">
            <summary>
                Video engine utilization domain
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.GPU.UtilizationDomain.BusInterface">
            <summary>
                Bus interface utilization domain
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Helpers.ExtensionMethods.Accepts(System.Delegate,System.Int32)">
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.Display.IColorData">
            <summary>
                Contains data corresponding to color information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IColorData.ColorDepth">
            <summary>
                Gets the color data color depth
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IColorData.DynamicRange">
            <summary>
                Gets the color data dynamic range
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IColorData.ColorFormat">
            <summary>
                Gets the color data color format
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IColorData.Colorimetry">
            <summary>
                Gets the color data color space
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IColorData.SelectionPolicy">
            <summary>
                Gets the color data selection policy
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IColorData.DesktopColorDepth">
            <summary>
                Gets the color data desktop color depth
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.Display.IDisplayColorData">
            <summary>
                Holds information regarding a display color space configurations
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IDisplayColorData.FirstColorCoordinate">
            <summary>
                Gets the first primary color space coordinate (e.g. Red for RGB) [(0.0, 0.0)-(1.0, 1.0)]
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IDisplayColorData.SecondColorCoordinate">
            <summary>
                Gets the second primary color space coordinate (e.g. Green for RGB) [(0.0, 0.0)-(1.0, 1.0)]
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IDisplayColorData.ThirdColorCoordinate">
            <summary>
                Gets the third primary color space coordinate (e.g. Blue for RGB) [(0.0, 0.0)-(1.0, 1.0)]
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IDisplayColorData.WhiteColorCoordinate">
            <summary>
                Gets the white color space coordinate [(0.0, 0.0)-(1.0, 1.0)]
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.Display.IDisplayDVCInfo">
            <summary>
                Holds the Digital Vibrance Control information regarding the saturation level.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IDisplayDVCInfo.CurrentLevel">
            <summary>
                Gets the current saturation level
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IDisplayDVCInfo.DefaultLevel">
            <summary>
                Gets the default saturation level
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IDisplayDVCInfo.MaximumLevel">
            <summary>
                Gets the maximum valid saturation level
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IDisplayDVCInfo.MinimumLevel">
            <summary>
                Gets the minimum valid saturation level
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.Display.IHDMISupportInfo">
            <summary>
                Contains information about the HDMI capabilities of the GPU, output and the display device attached
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IHDMISupportInfo.EDID861ExtensionRevision">
            <summary>
                Gets the display's EDID 861 Extension Revision
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IHDMISupportInfo.IsGPUCapableOfHDMIOutput">
            <summary>
                Gets a boolean value indicating that the GPU is capable of HDMI output
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IHDMISupportInfo.IsHDMIMonitor">
            <summary>
                Gets a boolean value indicating that the display is connected via HDMI
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IHDMISupportInfo.IsMonitorCapableOfAdobeRGB">
            <summary>
                Gets a boolean value indicating that the connected display is capable of Adobe RGB if such data is available;
                otherwise null
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IHDMISupportInfo.IsMonitorCapableOfAdobeYCC601">
            <summary>
                Gets a boolean value indicating that the connected display is capable of Adobe YCC601 if such data is available;
                otherwise null
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IHDMISupportInfo.IsMonitorCapableOfBasicAudio">
            <summary>
                Gets a boolean value indicating that the connected display is capable of basic audio
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IHDMISupportInfo.IsMonitorCapableOfsYCC601">
            <summary>
                Gets a boolean value indicating that the connected display is capable of sYCC601 if such data is available;
                otherwise null
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IHDMISupportInfo.IsMonitorCapableOfUnderscan">
            <summary>
                Gets a boolean value indicating that the connected display is capable of underscan
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IHDMISupportInfo.IsMonitorCapableOfxvYCC601">
            <summary>
                Gets a boolean value indicating that the connected display is capable of xvYCC601
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IHDMISupportInfo.IsMonitorCapableOfxvYCC709">
            <summary>
                Gets a boolean value indicating that the connected display is capable of xvYCC709
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IHDMISupportInfo.IsMonitorCapableOfYCbCr422">
            <summary>
                Gets a boolean value indicating that the connected display is capable of YCbCr422
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IHDMISupportInfo.IsMonitorCapableOfYCbCr444">
            <summary>
                Gets a boolean value indicating that the connected display is capable of YCbCr444
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.Display.IHDRColorData">
            <summary>
                Contains information regarding HDR color data
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IHDRColorData.ColorDepth">
            <summary>
                Gets the HDR color depth if available; otherwise null
                For Dolby Vision only, should and will be ignored if HDR is on
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IHDRColorData.ColorFormat">
            <summary>
                Gets the HDR color format if available; otherwise null
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IHDRColorData.DynamicRange">
            <summary>
                Gets the HDR dynamic range if available; otherwise null
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IHDRColorData.HDRMode">
            <summary>
                Gets the HDR mode
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IHDRColorData.MasteringDisplayData">
            <summary>
                Gets the color space coordinates
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.Display.IPathInfo">
            <summary>
                Interface for all PathInfo structures
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IPathInfo.SourceId">
            <summary>
                Identifies sourceId used by Windows CCD. This can be optionally set.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IPathInfo.SourceModeInfo">
            <summary>
                Contains information about the source mode
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IPathInfo.TargetsInfo">
            <summary>
                Contains information about path targets
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.Display.IPathTargetInfo">
            <summary>
                Interface for all PathTargetInfo structures
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IPathTargetInfo.Details">
            <summary>
                Contains extra information. NULL for Non-NVIDIA Display.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Display.IPathTargetInfo.DisplayId">
            <summary>
                Display identification
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.DRS.IDRSApplication">
            <summary>
                Represents an application rule registered in a profile
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.DRS.IDRSApplication.ApplicationName">
            <summary>
                Gets the application name
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.DRS.IDRSApplication.FriendlyName">
            <summary>
                Gets the application friendly name
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.DRS.IDRSApplication.IsPredefined">
            <summary>
                Gets a boolean value indicating if this application is predefined as part of NVIDIA driver
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.DRS.IDRSApplication.LauncherName">
            <summary>
                Gets the application launcher name.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.General.IChipsetInfo">
            <summary>
                Interface for all ChipsetInfo structures
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.General.IChipsetInfo.ChipsetName">
            <summary>
                Chipset device name
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.General.IChipsetInfo.DeviceId">
            <summary>
                Chipset device identification
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.General.IChipsetInfo.Flags">
            <summary>
                Chipset information flags - obsolete
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.General.IChipsetInfo.VendorId">
            <summary>
                Chipset vendor identification
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.General.IChipsetInfo.VendorName">
            <summary>
                Chipset vendor name
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.GPU.IClockFrequencies">
            <summary>
                Interface for all ClockFrequencies structures
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IClockFrequencies.Clocks">
            <summary>
                Gets all valid clocks
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IClockFrequencies.ClockType">
            <summary>
                Gets the type of clock frequencies provided with this object
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IClockFrequencies.GraphicsClock">
            <summary>
                Gets graphics engine clock
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IClockFrequencies.MemoryClock">
            <summary>
                Gets memory decoding clock
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IClockFrequencies.ProcessorClock">
            <summary>
                Gets processor clock
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IClockFrequencies.VideoDecodingClock">
            <summary>
                Gets video decoding clock
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.GPU.IDisplayDriverMemoryInfo">
            <summary>
                Interface for all DisplayDriverMemoryInfo structures
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IDisplayDriverMemoryInfo.AvailableDedicatedVideoMemoryInkB">
            <summary>
                Size(in kb) of the available physical frame buffer for allocating video memory surfaces.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IDisplayDriverMemoryInfo.CurrentAvailableDedicatedVideoMemoryInkB">
            <summary>
                Size(in kb) of the current available physical frame buffer for allocating video memory surfaces.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IDisplayDriverMemoryInfo.DedicatedVideoMemoryInkB">
            <summary>
                Size(in kb) of the physical frame buffer.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IDisplayDriverMemoryInfo.SharedSystemMemoryInkB">
            <summary>
                Size(in kb) of shared system memory that driver is allowed to commit for surfaces across all allocations.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IDisplayDriverMemoryInfo.SystemVideoMemoryInkB">
            <summary>
                Size(in kb) of system memory the driver allocates at load time.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.GPU.IDisplayIds">
            <summary>
                Interface for all DisplayIds structures
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IDisplayIds.ConnectionType">
            <summary>
                Gets connection type. This is reserved for future use and clients should not rely on this information. Instead get
                the GPU connector type from NvAPI_GPU_GetConnectorInfo/NvAPI_GPU_GetConnectorInfoEx
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IDisplayIds.DisplayId">
            <summary>
                Gets a unique identifier for each device
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IDisplayIds.IsActive">
            <summary>
                Indicates if the display is being actively driven
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IDisplayIds.IsCluster">
            <summary>
                Indicates if the display is the representative display
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IDisplayIds.IsConnected">
            <summary>
                Indicates if the display is connected
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IDisplayIds.IsDynamic">
            <summary>
                Indicates if the display is part of MST topology and it's a dynamic
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IDisplayIds.IsMultiStreamRootNode">
            <summary>
                Indicates if the display identification belongs to a multi stream enabled connector (root node). Note that when
                multi stream is enabled and a single multi stream capable monitor is connected to it, the monitor will share the
                display id with the RootNode.
                When there is more than one monitor connected in a multi stream topology, then the root node will have a separate
                displayId.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IDisplayIds.IsOSVisible">
            <summary>
                Indicates if the display is reported to the OS
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IDisplayIds.IsPhysicallyConnected">
            <summary>
                Indicates if the display is a physically connected display; Valid only when IsConnected is true
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IDisplayIds.IsWFD">
            <summary>
                Indicates if the display is wireless
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.GPU.IEDID">
            <summary>
                Interface for all EDID structures
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IEDID.Data">
            <summary>
                Gets whole or a part of the EDID data
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.GPU.II2CInfo">
            <summary>
                Contains an I2C packet transmitted or to be transmitted
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.II2CInfo.Data">
            <summary>
                Gets the payload data
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.II2CInfo.DeviceAddress">
            <summary>
                Gets the device I2C slave address
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.II2CInfo.IsReadOperation">
            <summary>
                Gets a boolean value indicating that this instance contents information about a read operation
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.II2CInfo.OutputMask">
            <summary>
                Gets the target display output mask
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.II2CInfo.PortId">
            <summary>
                Gets the port id on which device is connected
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.II2CInfo.RegisterAddress">
            <summary>
                Gets the target I2C register address
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.II2CInfo.Speed">
            <summary>
                Gets the target speed of the transaction in kHz
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.II2CInfo.UseDDCPort">
            <summary>
                Gets a boolean value indicating that the DDC port should be used instead of the communication port
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceState">
            <summary>
                Holds information regarding a performance state
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceState.IsOverclockable">
            <summary>
                Gets a boolean value indicating if this performance state is overclockable
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceState.IsOverclocked">
            <summary>
                Gets a boolean value indicating if this performance state is currently overclocked
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceState.IsPCIELimited">
            <summary>
                Gets a boolean value indicating if this performance state is limited to use PCIE generation 1 or PCIE generation 2
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceState.StateId">
            <summary>
                Gets the performance state identification
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceState20">
            <summary>
                Holds information regarding a performance state v2
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceState20.IsEditable">
            <summary>
                Gets a boolean value indicating if this performance state is editable
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceState20.StateId">
            <summary>
                Gets the performance state identification
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20ClockDependentFrequencyRange">
            <summary>
                Holds information regarding the frequency range of a clock domain as well as the dependent voltage domain and the
                range of the voltage
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20ClockDependentFrequencyRange.MaximumFrequencyInkHz">
            <summary>
                Gets the maximum clock frequency in kHz
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20ClockDependentFrequencyRange.MaximumVoltageInMicroVolt">
            <summary>
                Gets the dependent voltage domain's maximum voltage in uV
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20ClockDependentFrequencyRange.MinimumFrequencyInkHz">
            <summary>
                Gets the minimum clock frequency in kHz
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20ClockDependentFrequencyRange.MinimumVoltageInMicroVolt">
            <summary>
                Gets the dependent voltage domain's minimum voltage in uV
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20ClockDependentFrequencyRange.VoltageDomainId">
            <summary>
                Gets the dependent voltage domain identification
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20ClockDependentSingleFrequency">
            <summary>
                Holds information regarding the clock frequency of a fixed frequency clock domain
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20ClockDependentSingleFrequency.FrequencyInkHz">
            <summary>
                Gets the clock frequency of a clock domain in kHz
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20ClockEntry">
            <summary>
                Holds information regarding a clock domain of a performance states
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20ClockEntry.ClockType">
            <summary>
                Gets the type of clock frequency
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20ClockEntry.DomainId">
            <summary>
                Gets the domain identification
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20ClockEntry.FrequencyDeltaInkHz">
            <summary>
                Gets the current base frequency delta value and the range for a valid delta value
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20ClockEntry.FrequencyRange">
            <summary>
                Gets the fixed frequency of the clock
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20ClockEntry.IsEditable">
            <summary>
                Gets a boolean value indicating if this clock is editable
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20ClockEntry.SingleFrequency">
            <summary>
                Gets the range of clock frequency and related voltage information if present
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20Info">
            <summary>
                Holds information regarding the valid power states and their clock and voltage settings as well as general
                over-volting settings
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20Info.Clocks">
            <summary>
                Gets a dictionary for valid power states and their clock frequencies
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20Info.GeneralVoltages">
            <summary>
                Gets the list of general over-volting settings
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20Info.IsEditable">
            <summary>
                Gets a boolean value indicating if performance states are editable
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20Info.PerformanceStates">
            <summary>
                Gets an array of valid power states for the GPU
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20Info.Voltages">
            <summary>
                Gets a dictionary for valid power states and their voltage settings
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20VoltageEntry">
            <summary>
                Holds information regarding the voltage of a voltage domain
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20VoltageEntry.DomainId">
            <summary>
                Gets the voltage domain identification
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20VoltageEntry.IsEditable">
            <summary>
                Gets a boolean value indicating this voltage domain is editable
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20VoltageEntry.ValueDeltaInMicroVolt">
            <summary>
                Gets the base voltage delta and the range of valid values for the delta value
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStates20VoltageEntry.ValueInMicroVolt">
            <summary>
                Gets the current value of this voltage domain in uV
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStatesClock">
            <summary>
                Holds information regarding a clock domain of a performance state
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStatesClock.DomainId">
            <summary>
                Gets the clock domain identification
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStatesClock.Frequency">
            <summary>
                Gets the clock frequency in kHz
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStatesInfo">
            <summary>
                Holds information regarding performance states status of a GPU
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStatesInfo.IsCapableOfDynamicPerformance">
            <summary>
                Gets a boolean value indicating if the device is capable of dynamic performance state switching
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStatesInfo.IsDynamicPerformanceEnable">
            <summary>
                Gets a boolean value indicating if the dynamic performance state switching is enable
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStatesInfo.IsPerformanceMonitorEnable">
            <summary>
                Gets a boolean value indicating if the performance monitoring is enable
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStatesInfo.PerformanceStates">
            <summary>
                Gets an array of valid and available performance states information
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStatesInfo.PerformanceStatesClocks">
            <summary>
                Gets a dictionary of valid and available performance states and their clock information as an array
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStatesInfo.PerformanceStatesVoltages">
            <summary>
                Gets a dictionary of valid and available performance states and their voltage information as an array
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStatesVoltage">
            <summary>
                Holds information regarding a voltage domain of a performance state
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStatesVoltage.DomainId">
            <summary>
                Gets the voltage domain identification
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IPerformanceStatesVoltage.Value">
            <summary>
                Gets the voltage in mV
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.GPU.IThermalSensor">
            <summary>
                Provides information about a single thermal sensor
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IThermalSensor.Controller">
            <summary>
                Internal, ADM1032, MAX6649...
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IThermalSensor.CurrentTemperature">
            <summary>
                Current temperature value of the thermal sensor in degree Celsius
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IThermalSensor.DefaultMaximumTemperature">
            <summary>
                Maximum default temperature value of the thermal sensor in degree Celsius
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IThermalSensor.DefaultMinimumTemperature">
            <summary>
                Minimum default temperature value of the thermal sensor in degree Celsius
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IThermalSensor.Target">
            <summary>
                Thermal sensor targeted - GPU, memory, chipset, power supply, Visual Computing Device, etc
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.GPU.IThermalSettings">
            <summary>
                Holds a list of thermal sensors
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IThermalSettings.Sensors">
            <summary>
                Gets a list of requested thermal sensor information
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.GPU.IUtilizationDomainInfo">
            <summary>
                Holds information about a utilization domain
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IUtilizationDomainInfo.IsPresent">
            <summary>
                Gets a boolean value that indicates if this utilization domain is present on this GPU.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.GPU.IUtilizationDomainInfo.Percentage">
            <summary>
                Gets the percentage of time where the domain is considered busy in the last 1 second interval.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.IAllocatable">
            <summary>
                Marker interface for all types that should be allocated before passing to the managed code
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.IHandle">
            <summary>
                Interface for all pointer based handles
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.IHandle.IsNull">
            <summary>
                Returns true if the handle is null and not pointing to a valid location in the memory
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.IHandle.MemoryAddress">
            <summary>
                Gets the address of the handle in the memory
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.IInitializable">
            <summary>
                Marker interface for all types that should be filled with information before passing to un-managed code
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.Mosaic.IDisplaySettings">
            <summary>
                Interface for all DisplaySettings structures
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Mosaic.IDisplaySettings.BitsPerPixel">
            <summary>
                Bits per pixel
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Mosaic.IDisplaySettings.Frequency">
            <summary>
                Display frequency
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Mosaic.IDisplaySettings.FrequencyInMillihertz">
            <summary>
                Display frequency in x1k
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Mosaic.IDisplaySettings.Height">
            <summary>
                Per-display height
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Mosaic.IDisplaySettings.Width">
            <summary>
                Per-display width
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.Mosaic.IGridTopology">
            <summary>
                Interface for all GridTopology structures
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Mosaic.IGridTopology.AcceleratePrimaryDisplay">
            <summary>
                Enable SLI acceleration on the primary display while in single-wide mode (For Immersive Gaming only). Will not be
                persisted. Value undefined on get.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Mosaic.IGridTopology.ApplyWithBezelCorrectedResolution">
            <summary>
                When enabling and doing the mode-set, do we switch to the bezel-corrected resolution
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Mosaic.IGridTopology.BaseMosaicPanoramic">
            <summary>
                Enable as Base Mosaic (Panoramic) instead of Mosaic SLI (for NVS and Quadro-boards only)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Mosaic.IGridTopology.Columns">
            <summary>
                Number of columns
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Mosaic.IGridTopology.Displays">
            <summary>
                Topology displays; Displays are done as [(row * columns) + column]
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Mosaic.IGridTopology.DisplaySettings">
            <summary>
                Display settings
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Mosaic.IGridTopology.DriverReloadAllowed">
            <summary>
                If necessary, reloading the driver is permitted (for Vista and above only). Will not be persisted. Value undefined
                on get.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Mosaic.IGridTopology.ImmersiveGaming">
            <summary>
                Enable as immersive gaming instead of Mosaic SLI (for Quadro-boards only)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Mosaic.IGridTopology.Rows">
            <summary>
                Number of rows
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.Mosaic.IGridTopologyDisplay">
            <summary>
                Interface for all GridTopologyDisplay structures
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Mosaic.IGridTopologyDisplay.CloneGroup">
            <summary>
                Gets the clone group identification; Reserved, must be 0
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Mosaic.IGridTopologyDisplay.DisplayId">
            <summary>
                Gets the display identification
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Mosaic.IGridTopologyDisplay.OverlapX">
            <summary>
                Gets the horizontal overlap (+overlap, -gap)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Mosaic.IGridTopologyDisplay.OverlapY">
            <summary>
                Gets the vertical overlap (+overlap, -gap)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Mosaic.IGridTopologyDisplay.PixelShiftType">
            <summary>
                Gets the type of display pixel shift
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Mosaic.IGridTopologyDisplay.Rotation">
            <summary>
                Gets the rotation of display
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Interfaces.Mosaic.ISupportedTopologiesInfo">
            <summary>
                Interface for all SupportedTopologiesInfo structures
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Mosaic.ISupportedTopologiesInfo.DisplaySettings">
            <summary>
                List of per display settings possible
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Interfaces.Mosaic.ISupportedTopologiesInfo.TopologyBriefs">
            <summary>
                List of supported topologies with only brief details
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.MosaicApi">
            <summary>
                Contains mosaic and topology static functions
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.MosaicApi.EnableCurrentTopology(System.Boolean)">
            <summary>
                This API enables or disables the current Mosaic topology based on the setting of the incoming 'enable' parameter.
                An "enable" setting enables the current (previously set) Mosaic topology.
                Note that when the current Mosaic topology is retrieved, it must have an isPossible value of true or an error will
                occur.
                A "disable" setting disables the current Mosaic topology.
                The topology information will persist, even across reboots.
                To re-enable the Mosaic topology, call this function again with the enable parameter set to true.
            </summary>
            <param name="enable">true to enable the current Mosaic topo, false to disable it.</param>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NotSupported: Mosaic is not supported with the existing hardware.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: One or more arguments passed in are invalid.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.TopologyNotPossible: The current topology is not currently possible.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ModeChangeFailed: There was an error changing the display mode.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: Miscellaneous error occurred.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.MosaicApi.EnumDisplayGrids">
            <summary>
                Enumerates the current active grid topologies. This includes Mosaic, IG, and Panoramic topologies, as well as
                single displays.
            </summary>
            <returns>The list of active grid topologies.</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: One or more arguments passed in are invalid.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ApiNotInitialized: The NvAPI API needs to be initialized first.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NoImplementation: This entry point not available.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: Miscellaneous error occurred.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIANotSupportedException">This operation is not supported.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.MosaicApi.EnumDisplayModes(NvAPIWrapper.Native.Interfaces.Mosaic.IGridTopology)">
            <summary>
                Determines the set of available display modes for a given grid topology.
            </summary>
            <param name="gridTopology">The grid topology to use.</param>
            <returns></returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: One or more arguments passed in are invalid.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ApiNotInitialized: The NvAPI API needs to be initialized first.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NoImplementation: This entry point not available.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: Miscellaneous error occurred.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIANotSupportedException">This operation is not supported.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.MosaicApi.GetCurrentTopology(NvAPIWrapper.Native.Mosaic.Structures.TopologyBrief@,NvAPIWrapper.Native.Interfaces.Mosaic.IDisplaySettings@,System.Int32@,System.Int32@)">
            <summary>
                This API returns information for the current Mosaic topology.
                This includes topology, display settings, and overlap values.
                You can call NvAPI_Mosaic_GetTopoGroup() with the topology if you require more information.
                If there isn't a current topology, then TopologyBrief.Topology will be Topology.None.
            </summary>
            <param name="topoBrief">The current Mosaic topology</param>
            <param name="displaySettings">The current per-display settings</param>
            <param name="overlapX">The pixel overlap between horizontal displays</param>
            <param name="overlapY">The pixel overlap between vertical displays</param>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NotSupported: Mosaic is not supported with the existing hardware.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: One or more arguments passed in are invalid.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ApiNotInitialized: The NvAPI API needs to be initialized first.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NoImplementation: This entry point not available.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: Miscellaneous error occurred.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIANotSupportedException">This operation is not supported.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.MosaicApi.GetOverlapLimits(NvAPIWrapper.Native.Mosaic.Structures.TopologyBrief,NvAPIWrapper.Native.Interfaces.Mosaic.IDisplaySettings,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                This API returns the X and Y overlap limits required if the given Mosaic topology and display settings are to be
                used.
            </summary>
            <param name="topoBrief">
                The topology for getting limits This must be one of the topo briefs returned from
                GetSupportedTopoInfo().
            </param>
            <param name="displaySettings">
                The display settings for getting the limits. This must be one of the settings returned
                from GetSupportedTopoInfo().
            </param>
            <param name="minOverlapX">X overlap minimum</param>
            <param name="maxOverlapX">X overlap maximum</param>
            <param name="minOverlapY">Y overlap minimum</param>
            <param name="maxOverlapY">Y overlap maximum</param>
            <exception cref="T:System.ArgumentException">displaySettings is of invalid type.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NotSupported: Mosaic is not supported with the existing hardware.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: One or more arguments passed in are invalid.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ApiNotInitialized: The NvAPI API needs to be initialized first.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NoImplementation: This entry point not available.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: Miscellaneous error occurred.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.MosaicApi.GetSupportedTopologiesInfo(NvAPIWrapper.Native.Mosaic.TopologyType)">
            <summary>
                This API returns information on the topologies and display resolutions supported by Mosaic mode.
                NOTE: Not all topologies returned can be set immediately. Some of the topologies returned might not be valid for
                one reason or another.  It could be due to mismatched or missing displays.  It could also be because the required
                number of GPUs is not found.
                Once you get the list of supported topologies, you can call GetTopologyGroup() with one of the Mosaic topologies if
                you need more information about it.
                It is possible for this function to return NVAPI_OK with no topologies listed in the return structure.  If this is
                the case, it means that the current hardware DOES support Mosaic, but with the given configuration no valid
                topologies were found.  This most likely means that SLI was not enabled for the hardware. Once enabled, you should
                see valid topologies returned from this function.
            </summary>
            <param name="topologyType">The type of topologies the caller is interested in getting.</param>
            <returns>Information about what topologies and display resolutions are supported for Mosaic.</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NotSupported: Mosaic is not supported with the existing hardware.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: TopologyType is invalid.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ApiNotInitialized: The NvAPI API needs to be initialized first.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NoImplementation: This entry-point not available.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: Miscellaneous error occurred.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIANotSupportedException">This operation is not supported.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.MosaicApi.GetTopologyGroup(NvAPIWrapper.Native.Mosaic.Structures.TopologyBrief)">
            <summary>
                This API returns a structure filled with the details of the specified Mosaic topology.
                If the pTopoBrief passed in matches the current topology, then information in the brief and group structures will
                reflect what is current. Thus the brief would have the current 'enable' status, and the group would have the
                current overlap values. If there is no match, then the returned brief has an 'enable' status of FALSE (since it is
                obviously not enabled), and the overlap values will be 0.
            </summary>
            <param name="topoBrief">
                The topology for getting the details. This must be one of the topology briefs returned from
                GetSupportedTopoInfo().
            </param>
            <returns>The topology details matching the brief</returns>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NotSupported: Mosaic is not supported with the existing hardware.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: One or more arguments passed in are invalid.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ApiNotInitialized: The NvAPI API needs to be initialized first.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NoImplementation: This entry point not available.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: Miscellaneous error occurred.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.MosaicApi.SetCurrentTopology(NvAPIWrapper.Native.Mosaic.Structures.TopologyBrief,NvAPIWrapper.Native.Interfaces.Mosaic.IDisplaySettings,System.Int32,System.Int32,System.Boolean)">
            <summary>
                This API sets the Mosaic topology and performs a mode switch using the given display settings.
            </summary>
            <param name="topoBrief">
                The topology to set. This must be one of the topologies returned from GetSupportedTopoInfo(),
                and it must have an isPossible value of true.
            </param>
            <param name="displaySettings">
                The per display settings to be used in the Mosaic mode. This must be one of the settings
                returned from GetSupportedTopoInfo().
            </param>
            <param name="overlapX">
                The pixel overlap to use between horizontal displays (use positive a number for overlap, or a
                negative number to create a gap.) If the overlap is out of bounds for what is possible given the topo and display
                setting, the overlap will be clamped.
            </param>
            <param name="overlapY">
                The pixel overlap to use between vertical displays (use positive a number for overlap, or a
                negative number to create a gap.) If the overlap is out of bounds for what is possible given the topo and display
                setting, the overlap will be clamped.
            </param>
            <param name="enable">
                If true, the topology being set will also be enabled, meaning that the mode set will occur. If
                false, you don't want to be in Mosaic mode right now, but want to set the current Mosaic topology so you can enable
                it later with EnableCurrentTopo()
            </param>
            <exception cref="T:System.ArgumentException">displaySettings is of invalid type.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NotSupported: Mosaic is not supported with the existing hardware.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: One or more arguments passed in are invalid.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ApiNotInitialized: The NvAPI API needs to be initialized first.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NoImplementation: This entry point not available.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: Miscellaneous error occurred.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.MosaicApi.SetDisplayGrids(NvAPIWrapper.Native.Interfaces.Mosaic.IGridTopology[],NvAPIWrapper.Native.Mosaic.SetDisplayTopologyFlag)">
            <summary>
                Sets a new display topology, replacing any existing topologies that use the same displays.
                This function will look for an SLI configuration that will allow the display topology to work.
                To revert to a single display, specify that display as a 1x1 grid.
            </summary>
            <param name="gridTopologies">The topology details to set.</param>
            <param name="flags">One of the SetDisplayTopologyFlag flags</param>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.TopologyNotPossible: One or more of the display grids are not valid.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NoActiveSLITopology: No matching GPU topologies could be found.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: One or more arguments passed in are invalid.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ApiNotInitialized: The NvAPI API needs to be initialized first.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NoImplementation: This entry point not available.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: Miscellaneous error occurred.</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.MosaicApi.ValidateDisplayGrids(NvAPIWrapper.Native.Interfaces.Mosaic.IGridTopology[],NvAPIWrapper.Native.Mosaic.SetDisplayTopologyFlag)">
            <summary>
                Determines if a list of grid topologies is valid. It will choose an SLI configuration in the same way that
                SetDisplayGrids() does.
                On return, each element in the pTopoStatus array will contain any errors or warnings about each grid topology. If
                any error flags are set, then the topology is not valid. If any warning flags are set, then the topology is valid,
                but sub-optimal.
                If the ALLOW_INVALID flag is set, then it will continue to validate the grids even if no SLI configuration will
                allow all of the grids. In this case, a grid grid with no matching GPU topology will have the error flags
                NO_GPU_TOPOLOGY or NOT_SUPPORTED set.
                If the ALLOW_INVALID flag is not set and no matching SLI configuration is found, then it will skip the rest of the
                validation and throws a NVIDIAApiException with Status.NoActiveSLITopology.
            </summary>
            <param name="gridTopologies">The array of grid topologies to verify.</param>
            <param name="flags">One of the SetDisplayTopologyFlag flags</param>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NoActiveSLITopology: No matching GPU topologies could be found.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.InvalidArgument: One or more arguments passed in are invalid.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.ApiNotInitialized: The NvAPI API needs to be initialized first.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.NoImplementation: This entry point not available.</exception>
            <exception cref="T:NvAPIWrapper.Native.Exceptions.NVIDIAApiException">Status.Error: Miscellaneous error occurred.</exception>
        </member>
        <member name="T:NvAPIWrapper.Native.Mosaic.DisplayCapacityProblem">
            <summary>
                Possible display problems in a topology validation process
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.DisplayCapacityProblem.NoProblem">
            <summary>
                No problem
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.DisplayCapacityProblem.DisplayOnInvalidGPU">
            <summary>
                Display is connected to the wrong GPU
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.DisplayCapacityProblem.DisplayOnWrongConnector">
            <summary>
                Display is connected to the wrong connector
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.DisplayCapacityProblem.NoCommonTimings">
            <summary>
                Timing configuration is missing
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.DisplayCapacityProblem.NoEDIDAvailable">
            <summary>
                EDID information is missing
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.DisplayCapacityProblem.MismatchedOutputType">
            <summary>
                Output type combination is not valid
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.DisplayCapacityProblem.NoDisplayConnected">
            <summary>
                There is no display connected
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.DisplayCapacityProblem.NoGPUTopology">
            <summary>
                GPU is missing
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.DisplayCapacityProblem.NotSupported">
            <summary>
                Not supported
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.DisplayCapacityProblem.NoSLIBridge">
            <summary>
                SLI Bridge is missing
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.DisplayCapacityProblem.ECCEnabled">
            <summary>
                ECC is enable
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.DisplayCapacityProblem.GPUTopologyNotSupported">
            <summary>
                Topology is not supported by GPU
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Mosaic.DisplayTopologyWarning">
            <summary>
                Possible display problems in a topology validation process
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.DisplayTopologyWarning.NoWarning">
            <summary>
                No warning
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.DisplayTopologyWarning.DisplayPosition">
            <summary>
                Display position is problematic
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.DisplayTopologyWarning.DriverReloadRequired">
            <summary>
                Driver reload is required for this changes
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Mosaic.PixelShiftType">
            <summary>
                Possible pixel shift types for a display
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.PixelShiftType.NoPixelShift">
            <summary>
                No pixel shift will be applied to this display.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.PixelShiftType.TopLeft2X2Pixels">
            <summary>
                This display will be used to scan-out top left pixels in 2x2 PixelShift configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.PixelShiftType.BottomRight2X2Pixels">
            <summary>
                This display will be used to scan-out bottom right pixels in 2x2 PixelShift configuration
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Mosaic.SetDisplayTopologyFlag">
            <summary>
                Possible flags for setting a display topology
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.SetDisplayTopologyFlag.NoFlag">
            <summary>
                No special flag
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.SetDisplayTopologyFlag.CurrentGPUTopology">
            <summary>
                Do not change the current GPU topology. If the NO_DRIVER_RELOAD bit is not specified, then it may still require a
                driver reload.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.SetDisplayTopologyFlag.NoDriverReload">
            <summary>
                Do not allow a driver reload. That is, stick with the same master GPU as well as the same SLI configuration.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.SetDisplayTopologyFlag.MaximizePerformance">
            <summary>
                When choosing a GPU topology, choose the topology with the best performance.
                Without this flag, it will choose the topology that uses the smallest number of GPUs.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.SetDisplayTopologyFlag.AllowInvalid">
            <summary>
                Do not return an error if no configuration will work with all of the grids.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV1">
            <summary>
                Holds a display setting
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV1.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a new DisplaySettingsV1
            </summary>
            <param name="width">Per-display width</param>
            <param name="height">Per-display height</param>
            <param name="bitsPerPixel">Bits per pixel</param>
            <param name="frequency">Display frequency</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV1.Equals(NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV1)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV1.Equals(NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV2)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV1.op_Equality(NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV1,NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV1)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV1.op_Inequality(NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV1,NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV1)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV1.Width">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV1.Height">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV1.BitsPerPixel">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV1.Frequency">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV1.FrequencyInMillihertz">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV2">
            <summary>
                Holds a display setting
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV2.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
                Creates a new DisplaySettingsV2
            </summary>
            <param name="width">Per-display width</param>
            <param name="height">Per-display height</param>
            <param name="bitsPerPixel">Bits per pixel</param>
            <param name="frequency">Display frequency</param>
            <param name="frequencyInMillihertz">Display frequency in x1k</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV2.Equals(NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV2)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV2.Equals(NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV1)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV2.op_Equality(NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV2,NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV2)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV2.op_Inequality(NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV2,NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV2)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV2.Width">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV2.Height">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV2.BitsPerPixel">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV2.Frequency">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV2.FrequencyInMillihertz">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Mosaic.Structures.DisplayTopologyStatus">
            <summary>
                Holds information about a topology validity status
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Structures.DisplayTopologyStatus.MaxDisplays">
            <summary>
                Maximum number of displays for this structure
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.DisplayTopologyStatus.Errors">
            <summary>
                Gets all error flags for this topology
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.DisplayTopologyStatus.Warnings">
            <summary>
                Gets all warning flags for this topology
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.DisplayTopologyStatus.Displays">
            <summary>
                Gets per display statuses
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Mosaic.Structures.DisplayTopologyStatus.Display">
            <summary>
                Holds information about a display validity status in a topology
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.DisplayTopologyStatus.Display.DisplayId">
            <summary>
                Gets the Display identification of this display.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.DisplayTopologyStatus.Display.Errors">
            <summary>
                Gets all error flags for this display
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.DisplayTopologyStatus.Display.Warnings">
            <summary>
                Gets all warning flags for this display
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.DisplayTopologyStatus.Display.SupportsRotation">
            <summary>
                Indicates if this display can be rotated
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV1">
            <summary>
                Holds information about a display in a grid topology
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV1.#ctor(System.UInt32,System.Int32,System.Int32,NvAPIWrapper.Native.Display.Rotate,System.UInt32)">
            <summary>
                Creates a new GridTopologyDisplayV1
            </summary>
            <param name="displayId">Display identification</param>
            <param name="overlapX">Horizontal overlap (+overlap, -gap)</param>
            <param name="overlapY">Vertical overlap (+overlap, -gap)</param>
            <param name="rotation">Rotation of display</param>
            <param name="cloneGroup">Clone group identification; Reserved, must be 0</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV1.Equals(NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV1)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV1.op_Equality(NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV1,NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV1)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV1.op_Inequality(NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV1,NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV1)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV1.DisplayId">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV1.OverlapX">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV1.OverlapY">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV1.Rotation">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV1.CloneGroup">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV1.PixelShiftType">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV2">
            <summary>
                Holds information about a display in a grid topology
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV2.#ctor(System.UInt32,System.Int32,System.Int32,NvAPIWrapper.Native.Display.Rotate,System.UInt32,NvAPIWrapper.Native.Mosaic.PixelShiftType)">
            <summary>
                Creates a new GridTopologyDisplayV2
            </summary>
            <param name="displayId">Display identification</param>
            <param name="overlapX">Horizontal overlap (+overlap, -gap)</param>
            <param name="overlapY">Vertical overlap (+overlap, -gap)</param>
            <param name="rotation">Rotation of display</param>
            <param name="cloneGroup">Clone group identification; Reserved, must be 0</param>
            <param name="pixelShiftType">Type of the pixel shift enabled display</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV2.Equals(NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV2)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV2.op_Equality(NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV2,NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV2)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV2.op_Inequality(NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV2,NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV2)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV2.DisplayId">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV2.OverlapX">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV2.OverlapY">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV2.Rotation">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV2.CloneGroup">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV2.PixelShiftType">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV1">
            <summary>
                Holds information about a grid topology
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV1.MaxDisplays">
            <summary>
                Maximum number of displays in a topology
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV1.#ctor(System.Int32,System.Int32,NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV1[],NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV1,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Creates a new GridTopologyV1
            </summary>
            <param name="rows">Number of rows</param>
            <param name="columns">Number of columns</param>
            <param name="displays">Topology displays; Displays are done as [(row * columns) + column]</param>
            <param name="displaySettings">Display settings</param>
            <param name="applyWithBezelCorrectedResolution">
                When enabling and doing the modeset, do we switch to the
                bezel-corrected resolution
            </param>
            <param name="immersiveGaming">Enable as immersive gaming instead of Mosaic SLI (for Quadro-boards only)</param>
            <param name="baseMosaicPanoramic">
                Enable as Base Mosaic (Panoramic) instead of Mosaic SLI (for NVS and Quadro-boards
                only)
            </param>
            <param name="driverReloadAllowed">
                If necessary, reloading the driver is permitted (for Vista and above only). Will not
                be persisted.
            </param>
            <param name="acceleratePrimaryDisplay">
                Enable SLI acceleration on the primary display while in single-wide mode (For
                Immersive Gaming only). Will not be persisted.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">Total number of topology displays is below or equal to zero</exception>
            <exception cref="T:System.ArgumentException">Number of displays doesn't match the arrangement</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV1.Equals(NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV1)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV1.Rows">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV1.Columns">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV1.Displays">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV1.DisplaySettings">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV1.ApplyWithBezelCorrectedResolution">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV1.ImmersiveGaming">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV1.BaseMosaicPanoramic">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV1.DriverReloadAllowed">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV1.AcceleratePrimaryDisplay">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV2">
            <summary>
                Holds information about a grid topology
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV2.MaxDisplays">
            <summary>
                Maximum number of displays in a topology
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV2.#ctor(System.Int32,System.Int32,NvAPIWrapper.Native.Mosaic.Structures.GridTopologyDisplayV2[],NvAPIWrapper.Native.Mosaic.Structures.DisplaySettingsV1,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Creates a new GridTopologyV2
            </summary>
            <param name="rows">Number of rows</param>
            <param name="columns">Number of columns</param>
            <param name="displays">Topology displays; Displays are done as [(row * columns) + column]</param>
            <param name="displaySettings">Display settings</param>
            <param name="applyWithBezelCorrectedResolution">
                When enabling and doing the mode-set, do we switch to the
                bezel-corrected resolution
            </param>
            <param name="immersiveGaming">Enable as immersive gaming instead of Mosaic SLI (for Quadro-boards only)</param>
            <param name="baseMosaicPanoramic">
                Enable as Base Mosaic (Panoramic) instead of Mosaic SLI (for NVS and Quadro-boards
                only)
            </param>
            <param name="driverReloadAllowed">
                If necessary, reloading the driver is permitted (for Vista and above only). Will not
                be persisted.
            </param>
            <param name="acceleratePrimaryDisplay">
                Enable SLI acceleration on the primary display while in single-wide mode (For
                Immersive Gaming only). Will not be persisted.
            </param>
            <param name="pixelShift">Enable Pixel shift</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Total number of topology displays is below or equal to zero</exception>
            <exception cref="T:System.ArgumentException">Number of displays doesn't match the arrangement</exception>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV2.Equals(NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV2)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV2.Rows">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV2.Columns">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV2.Displays">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV2.DisplaySettings">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV2.ApplyWithBezelCorrectedResolution">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV2.ImmersiveGaming">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV2.BaseMosaicPanoramic">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV2.DriverReloadAllowed">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV2.AcceleratePrimaryDisplay">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.GridTopologyV2.PixelShift">
            <summary>
                Enable Pixel shift
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Mosaic.Structures.SupportedTopologiesInfoV1">
            <summary>
                Holds information about supported topologies
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Structures.SupportedTopologiesInfoV1.MaxSettings">
            <summary>
                Maximum number of display settings possible to retrieve
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.SupportedTopologiesInfoV1.Equals(NvAPIWrapper.Native.Mosaic.Structures.SupportedTopologiesInfoV1)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.SupportedTopologiesInfoV1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.SupportedTopologiesInfoV1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.SupportedTopologiesInfoV1.TopologyBriefs">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.SupportedTopologiesInfoV1.DisplaySettings">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Mosaic.Structures.SupportedTopologiesInfoV2">
            <summary>
                Holds information about supported topologies
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Structures.SupportedTopologiesInfoV2.MaxSettings">
            <summary>
                Maximum number of display settings possible to retrieve
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.SupportedTopologiesInfoV2.Equals(NvAPIWrapper.Native.Mosaic.Structures.SupportedTopologiesInfoV2)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.SupportedTopologiesInfoV2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.SupportedTopologiesInfoV2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.SupportedTopologiesInfoV2.TopologyBriefs">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.SupportedTopologiesInfoV2.DisplaySettings">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Mosaic.Structures.TopologyBrief">
            <summary>
                Holds brief information about a topology
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.TopologyBrief.#ctor(NvAPIWrapper.Native.Mosaic.Topology)">
            <summary>
                Creates a new TopologyBrief
            </summary>
            <param name="topology">The topology</param>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.TopologyBrief.Equals(NvAPIWrapper.Native.Mosaic.Structures.TopologyBrief)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.TopologyBrief.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.TopologyBrief.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.TopologyBrief.op_Equality(NvAPIWrapper.Native.Mosaic.Structures.TopologyBrief,NvAPIWrapper.Native.Mosaic.Structures.TopologyBrief)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.TopologyBrief.op_Inequality(NvAPIWrapper.Native.Mosaic.Structures.TopologyBrief,NvAPIWrapper.Native.Mosaic.Structures.TopologyBrief)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.TopologyBrief.Topology">
            <summary>
                The topology
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.TopologyBrief.IsEnable">
            <summary>
                Indicates if the topology is enable
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.TopologyBrief.IsPossible">
            <summary>
                Indicates if the topology is possible
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails">
            <summary>
                Holds extra details about a topology
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.MaxLayoutRows">
            <summary>
                Maximum number of rows in a topology detail
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.MaxLayoutColumns">
            <summary>
                Maximum number of columns in a topology detail
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.Equals(NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.op_Equality(NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails,NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.op_Inequality(NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails,NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.LogicalGPUHandle">
            <summary>
                Logical GPU for this topology
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.ValidityFlags">
            <summary>
                Indicates topology validity. TopologyValidity.Valid means topology is valid with the current hardware.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.Rows">
            <summary>
                Number of displays in a row
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.Columns">
            <summary>
                Number of displays in a column
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.Layout">
            <summary>
                Gets a 2D array of layout cells containing information about the display layout of the topology
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.LayoutCell">
            <summary>
                Holds information about a topology display
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.LayoutCell.Equals(NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.LayoutCell)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.LayoutCell.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.LayoutCell.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.LayoutCell.op_Equality(NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.LayoutCell,NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.LayoutCell)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.LayoutCell.op_Inequality(NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.LayoutCell,NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.LayoutCell)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.LayoutCell.PhysicalGPUHandle">
            <summary>
                Physical GPU to be used in the topology (0 if GPU missing)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.LayoutCell.DisplayOutputId">
            <summary>
                Connected display target (0 if no display connected)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.LayoutCell.OverlapX">
            <summary>
                Pixels of overlap on left of target: (+overlap, -gap)
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.TopologyDetails.LayoutCell.OverlapY">
            <summary>
                Pixels of overlap on top of target: (+overlap, -gap)
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Mosaic.Structures.TopologyGroup">
            <summary>
                This structure defines a group of topologies that work together to create one overall layout.  All of the supported
                topologies are represented with this structure.
                For example, a 'Passive Stereo' topology would be represented with this structure, and would have separate topology
                details for the left and right eyes. The count would be 2. A 'Basic' topology is also represented by this
                structure, with a count of 1.
                The structure is primarily used internally, but is exposed to applications in a read-only fashion because there are
                some details in it that might be useful (like the number of rows/cols, or connected display information).  A user
                can get the filled-in structure by calling NvAPI_Mosaic_GetTopoGroup().
                You can then look at the detailed values within the structure.  There are no entry points which take this structure
                as input (effectively making it read-only).
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Structures.TopologyGroup.MaxTopologyPerGroup">
            <summary>
                Maximum number of topologies per each group
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.TopologyGroup.Brief">
            <summary>
                The brief details of this topology
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Mosaic.Structures.TopologyGroup.TopologyDetails">
            <summary>
                Information about the topologies within this group
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.TopologyGroup.Equals(NvAPIWrapper.Native.Mosaic.Structures.TopologyGroup)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.TopologyGroup.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.TopologyGroup.op_Equality(NvAPIWrapper.Native.Mosaic.Structures.TopologyGroup,NvAPIWrapper.Native.Mosaic.Structures.TopologyGroup)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.TopologyGroup.op_Inequality(NvAPIWrapper.Native.Mosaic.Structures.TopologyGroup,NvAPIWrapper.Native.Mosaic.Structures.TopologyGroup)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Mosaic.Structures.TopologyGroup.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:NvAPIWrapper.Native.Mosaic.Topology">
            <summary>
                Complete list of supported Mosaic topologies.
                Using a "Basic" topology combines multiple monitors to create a single desktop.
                Using a "Passive" topology combines multiples monitors to create a passive stereo desktop.
                In passive stereo, two identical topologies combine - one topology is used for the right eye and the other
                identical topology (targeting different displays) is used for the left eye.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.None">
            <summary>
                Not a Mosaic Topology
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.Basic_1X2">
            <summary>
                1x2 Basic Topology Configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.Basic_2X1">
            <summary>
                2x1 Basic Topology Configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.Basic_1X3">
            <summary>
                1x3 Basic Topology Configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.Basic_3X1">
            <summary>
                3x1 Basic Topology Configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.Basic_1X4">
            <summary>
                4x1 Basic Topology Configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.Basic_4X1">
            <summary>
                4x1 Basic Topology Configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.Basic_2X2">
            <summary>
                2x2 Basic Topology Configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.Basic_2X3">
            <summary>
                2x3 Basic Topology Configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.Basic_2X4">
            <summary>
                2x4 Basic Topology Configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.Basic_3X2">
            <summary>
                3x2 Basic Topology Configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.Basic_4X2">
            <summary>
                4x2 Basic Topology Configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.Basic_1X5">
            <summary>
                1x5 Basic Topology Configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.Basic_1X6">
            <summary>
                1x6 Basic Topology Configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.Basic_7X1">
            <summary>
                7x1 Basic Topology Configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.PassiveStereo_1X2">
            <summary>
                1x2 Passive Stereo Configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.PassiveStereo_2X1">
            <summary>
                2x1 Passive Stereo Configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.PassiveStereo_1X3">
            <summary>
                1x3 Passive Stereo Configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.PassiveStereo_3X1">
            <summary>
                3x1 Passive Stereo Configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.PassiveStereo_1X4">
            <summary>
                1x4 Passive Stereo Configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.PassiveStereo_4X1">
            <summary>
                4x1 Passive Stereo Configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.PassiveStereo_2X2">
            <summary>
                2x2 Passive Stereo Configuration
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.Topology.Max">
            <summary>
                Indicator for the max number of possible configuration, DO NOT USE
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Mosaic.TopologyType">
            <summary>
                These values refer to the different types of Mosaic topologies that are possible. When getting the supported Mosaic
                topologies, you can specify one of these types to narrow down the returned list to only those that match the given
                type.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.TopologyType.All">
            <summary>
                All mosaic topologies
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.TopologyType.Basic">
            <summary>
                Basic Mosaic topologies
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.TopologyType.PassiveStereo">
            <summary>
                Passive Stereo topologies
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.TopologyType.ScaledClone">
            <summary>
                Not supported at this time
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.TopologyType.PassiveStereoScaledClone">
            <summary>
                Not supported at this time
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Mosaic.TopologyValidity">
            <summary>
                These bits are used to describe the validity of a topo
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.TopologyValidity.Valid">
            <summary>
                The topology is valid
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.TopologyValidity.MissingGPU">
            <summary>
                Not enough SLI GPUs were found to fill the entire topology. PhysicalGPUHandle will be null for these.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.TopologyValidity.MissingDisplay">
            <summary>
                Not enough displays were found to fill the entire topology. Output identification will be 0 for these.
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Mosaic.TopologyValidity.MixedDisplayTypes">
            <summary>
                The topology is only possible with displays of the same output type. Check output identifications to make sure they
                are all CRTs, or all DFPs.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.StereoApi">
            <summary>
                Contains Stereo static functions
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.ActivateStereo(NvAPIWrapper.Native.Stereo.Structures.StereoHandle)">
            <summary>
                This API activates stereo for the device interface corresponding to the given stereo handle.
                Activating stereo is possible only if stereo was enabled previously in the registry.
                If stereo is not activated, then calls to functions that require that stereo is activated have no effect,
                and will return the appropriate error code.
            </summary>
            <param name="handle">Stereo handle corresponding to the device interface.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.CaptureJpegImage(NvAPIWrapper.Native.Stereo.Structures.StereoHandle,System.UInt32)">
            <summary>
                This API captures the current stereo image in JPEG stereo format with the given quality.
                Only the last capture call per flip will be effective.
            </summary>
            <param name="handle">Stereo handle that corresponds to the device interface.</param>
            <param name="quality">Quality of the JPEG image to be captured. Integer value between 0 and 100.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.CapturePngImage(NvAPIWrapper.Native.Stereo.Structures.StereoHandle)">
            <summary>
                This API captures the current stereo image in PNG stereo format.
                Only the last capture call per flip will be effective.
            </summary>
            <param name="handle">Stereo handle that corresponds to the device interface.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.CreateConfigurationProfileRegistryKey(NvAPIWrapper.Native.Stereo.StereoRegistryProfileType)">
            <summary>
                Creates new configuration registry key for current application.
                If there is no configuration profile prior to the function call,
                this API tries to create a new configuration profile registry key
                for a given application and fill it with the default values.
                If an application already has a configuration profile registry key, the API does nothing.
                The name of the key is automatically set to the name of the executable that calls this function.
                Because of this, the executable should have a distinct and unique name.
                If the application is using only one version of DirectX, then the default profile type will be appropriate.
                If the application is using more than one version of DirectX from the same executable,
                it should use the appropriate profile type for each configuration profile.
            </summary>
            <param name="registryProfileType">Type of profile the application wants to create.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.CreateHandleFromIUnknown(System.IntPtr)">
            <summary>
                This API creates a stereo handle that is used in subsequent calls related to a given device interface.
                This must be called before any other NvAPI_Stereo_ function for that handle.
                Multiple devices can be used at one time using multiple calls to this function (one per each device).
                HOW TO USE: After the Direct3D device is created, create the stereo handle.
                On call success:
                -# Use all other functions that have stereo handle as first parameter.
                -# After the device interface that corresponds to the the stereo handle is destroyed,
                the application should call NvAPI_DestroyStereoHandle() for that stereo handle.
            </summary>
            <param name="d3dDevice">Pointer to IUnknown interface that is IDirect3DDevice9* in DX9, ID3D10Device*.</param>
            <returns>Newly created stereo handle.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.D3D1XCreateSwapChain(NvAPIWrapper.Native.Stereo.Structures.StereoHandle,System.IntPtr,NvAPIWrapper.Native.Stereo.StereoSwapChainMode)">
            <summary>
                This API allows the user to create a mono or a stereo swap chain.
                NOTE: NvAPI_D3D1x_CreateSwapChain is a wrapper of the method IDXGIFactory::CreateSwapChain which
                additionally notifies the D3D driver of the mode in which the swap chain is to be
                created.
            </summary>
            <param name="handle">
                Stereo handle that corresponds to the device interface. The device that will write 2D images to
                the swap chain.
            </param>
            <param name="dxgiSwapChainDescription">
                A pointer to the swap-chain description (DXGI_SWAP_CHAIN_DESC). This parameter
                cannot be NULL.
            </param>
            <param name="swapChainMode">The stereo mode fot the swap chain.</param>
            <returns>A pointer to the swap chain created.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.D3D9CreateSwapChain(NvAPIWrapper.Native.Stereo.Structures.StereoHandle,System.IntPtr,NvAPIWrapper.Native.Stereo.StereoSwapChainMode)">
            <summary>
                This API allows the user to create a mono or a stereo swap chain.
                NOTE: NvAPI_D3D9_CreateSwapChain is a wrapper of the method IDirect3DDevice9::CreateAdditionalSwapChain which
                additionally notifies the D3D driver if the swap chain creation mode must be stereo or mono.
            </summary>
            <param name="handle">Stereo handle that corresponds to the device interface.</param>
            <param name="d3dPresentParameters">A pointer to the swap-chain description (DXGI). This parameter cannot be NULL.</param>
            <param name="swapChainMode">The stereo mode for the swap chain.</param>
            <returns>A pointer to the swap chain created.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.DeactivateStereo(NvAPIWrapper.Native.Stereo.Structures.StereoHandle)">
            <summary>
                This API deactivates stereo for the given device interface.
                If stereo is not activated, then calls to functions that require that stereo is activated have no effect,
                and will return the appropriate error code.
            </summary>
            <param name="handle">Stereo handle that corresponds to the device interface.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.DecreaseConvergence(NvAPIWrapper.Native.Stereo.Structures.StereoHandle)">
            <summary>
                This API decreases convergence for the given device interface (just like the Ctrl+F5 hot-key).
            </summary>
            <param name="handle">Stereo handle that corresponds to the device interface.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.DecreaseSeparation(NvAPIWrapper.Native.Stereo.Structures.StereoHandle)">
            <summary>
                This API decreases separation for the given device interface (just like the Ctrl+F3 hot-key).
            </summary>
            <param name="handle">Stereo handle that corresponds to the device interface.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.DeleteConfigurationProfileRegistryKey(NvAPIWrapper.Native.Stereo.StereoRegistryProfileType)">
            <summary>
                Removes configuration registry key for current application.
                If an application already has a configuration profile prior to this function call,
                the function attempts to remove the application's configuration profile registry key from the registry.
                If there is no configuration profile registry key prior to the function call,
                the function does nothing and does not report an error.
            </summary>
            <param name="registryProfileType">Type of profile that the application wants to delete.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.DeleteConfigurationProfileValue(NvAPIWrapper.Native.Stereo.StereoRegistryProfileType,NvAPIWrapper.Native.Stereo.StereoRegistryIdentification)">
            <summary>
                This API removes the given value from the application's configuration profile registry key.
                If there is no such value, the function does nothing and does not report an error.
            </summary>
            <param name="registryProfileType">The type of profile the application wants to access.</param>
            <param name="registryId">ID of the value that is being deleted.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.DestroyHandle(NvAPIWrapper.Native.Stereo.Structures.StereoHandle)">
            <summary>
                This API destroys the stereo handle created with one of the NvAPI_Stereo_CreateHandleFrom() functions.
                This should be called after the device corresponding to the handle has been destroyed.
            </summary>
            <param name="handle">Stereo handle that is to be destroyed.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.DisableStereo">
            <summary>
                This API disables stereo mode in the registry.
                Calls to this function affect the entire system.
                If stereo is not enabled, then calls to functions that require that stereo is enabled have no effect,
                and will return the appropriate error code.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.EnableStereo">
            <summary>
                This APU enables stereo mode in the registry.
                Calls to this function affect the entire system.
                If stereo is not enabled, then calls to functions that require that stereo is enabled have no effect,
                and will return the appropriate error code.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.GetConvergence(NvAPIWrapper.Native.Stereo.Structures.StereoHandle)">
            <summary>
                This API gets the current convergence value.
            </summary>
            <param name="handle">Stereo handle that corresponds to the device interface.</param>
            <returns>Current convergence value</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.GetDefaultProfile">
            <summary>
                This API retrieves the current default stereo profile.
            </summary>
            <returns>Default stereo profile name.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.GetEyeSeparation(NvAPIWrapper.Native.Stereo.Structures.StereoHandle)">
            <summary>
                This API returns eye separation as a ratio of [between eye distance]/[physical screen width].
            </summary>
            <param name="handle">Stereo handle that corresponds to the device interface.</param>
            <returns>Eye separation</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.GetFrustumAdjustMode(NvAPIWrapper.Native.Stereo.Structures.StereoHandle)">
            <summary>
                This API gets the current frustum adjust mode value.
            </summary>
            <param name="handle">Stereo handle that corresponds to the device interface.</param>
            <returns>Current frustum value</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.GetSeparation(NvAPIWrapper.Native.Stereo.Structures.StereoHandle)">
            <summary>
                This API gets current separation value (in percents).
            </summary>
            <param name="handle">Stereo handle that corresponds to the device interface.</param>
            <returns>Current separation percentage</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.GetStereoSupport(System.IntPtr)">
            <summary>
                This API checks what kind of stereo support is currently supported on a particular display.
                If the the display is prohibited from showing stereo (e.g. secondary in a multi-mon setup), we will
                return 0 for all stereo modes (full screen exclusive, automatic windowed, persistent windowed).
                Otherwise, we will check which stereo mode is supported. On 120Hz display, this will be what
                the user chooses in control panel. On HDMI 1.4 display, persistent windowed mode is always assumed to be
                supported. Note that this function does not check if the CURRENT RESOLUTION/REFRESH RATE can support
                stereo. For HDMI 1.4, it is the application's responsibility to change the resolution/refresh rate to one that is
                3D compatible. For 120Hz, the driver will ALWAYS force 120Hz anyway.
            </summary>
            <param name="monitorHandle">Monitor that app is going to run on</param>
            <returns>An instance of <see cref="T:NvAPIWrapper.Native.Stereo.Structures.StereoCapabilitiesV1" /> structure.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.GetSurfaceCreationMode(NvAPIWrapper.Native.Stereo.Structures.StereoHandle)">
            <summary>
                This API gets surface creation mode for this device interface.
            </summary>
            <param name="handle">Stereo handle that corresponds to the device interface.</param>
            <returns>The current creation mode for this device interface.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.IncreaseConvergence(NvAPIWrapper.Native.Stereo.Structures.StereoHandle)">
            <summary>
                This API increases convergence for given the device interface (just like the Ctrl+F6 hot-key).
            </summary>
            <param name="handle">Stereo handle that corresponds to the device interface.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.IncreaseSeparation(NvAPIWrapper.Native.Stereo.Structures.StereoHandle)">
            <summary>
                This API increases separation for the given device interface (just like the Ctrl+F4 hot-key).
            </summary>
            <param name="handle">Stereo handle that corresponds to the device interface.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.InitActivation(NvAPIWrapper.Native.Stereo.Structures.StereoHandle,NvAPIWrapper.Native.Stereo.StereoActivationFlag)">
            <summary>
                This API allows an application to enable stereo viewing, without the need of a GUID/Key pair
                This API cannot be used to enable stereo viewing on 3DTV.
                HOW TO USE:    Call this function immediately after device creation, then follow with a reset. \n
                Very generically:
                Create Device->Create Stereo Handle->InitActivation->Reset Device
            </summary>
            <param name="handle">Stereo handle corresponding to the device interface.</param>
            <param name="activationFlag">Flags to enable or disable delayed activation.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.IsStereoActivated(NvAPIWrapper.Native.Stereo.Structures.StereoHandle)">
            <summary>
                This API checks if stereo is activated for the given device interface.
            </summary>
            <param name="handle">Stereo handle that corresponds to the device interface.</param>
            <returns>Address where result of the inquiry will be placed.</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.IsStereoEnabled">
            <summary>
                This API checks if stereo mode is enabled in the registry.
            </summary>
            <returns>true if the stereo is enable; otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.IsWindowedModeSupported">
            <summary>
                This API returns availability of windowed mode stereo
            </summary>
            <returns>true if windowed mode is supported; otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.ReverseStereoBlitControl(NvAPIWrapper.Native.Stereo.Structures.StereoHandle,System.Boolean)">
            <summary>
                This API turns on/off reverse stereo blit.
                After reversed stereo blit control is turned on, blits from the stereo surface will
                produce the right-eye image in the left side of the destination surface and the left-eye
                image in the right side of the destination surface.
                In DirectX 9, the destination surface must be created as the render target, and StretchRect must be used.
                Conditions:
                - DstWidth == 2*SrcWidth
                - DstHeight == SrcHeight
                - Src surface is the stereo surface.
                - SrcRect must be {0,0,SrcWidth,SrcHeight}
                - DstRect must be {0,0,DstWidth,DstHeight}
                In DirectX 10, ResourceCopyRegion must be used.
                Conditions:
                - DstWidth == 2*SrcWidth
                - DstHeight == SrcHeight
                - dstX == 0,
                - dstY == 0,
                - dstZ == 0,
                - SrcBox: left=top=front==0; right==SrcWidth; bottom==SrcHeight; back==1;
            </summary>
            <param name="handle">Stereo handle corresponding to the device interface.</param>
            <param name="turnOn">A boolean value to enable or disable blit control</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.SetActiveEye(NvAPIWrapper.Native.Stereo.Structures.StereoHandle,NvAPIWrapper.Native.Stereo.StereoActiveEye)">
            <summary>
                This API sets the back buffer to left or right in Direct stereo mode.
            </summary>
            <param name="handle">Stereo handle that corresponds to the device interface.</param>
            <param name="activeEye">Defines active eye in Direct stereo mode</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.SetConfigurationProfileValue(NvAPIWrapper.Native.Stereo.StereoRegistryProfileType,NvAPIWrapper.Native.Stereo.StereoRegistryIdentification,System.Single)">
            <summary>
                This API sets the given parameter value under the application's registry key.
                If the value does not exist under the application's registry key, the value will be created under the key.
            </summary>
            <param name="registryProfileType">The type of profile the application wants to access.</param>
            <param name="registryId">ID of the value that is being set.</param>
            <param name="value">Value that is being set.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.SetConfigurationProfileValue(NvAPIWrapper.Native.Stereo.StereoRegistryProfileType,NvAPIWrapper.Native.Stereo.StereoRegistryIdentification,System.Int32)">
            <summary>
                This API sets the given parameter value under the application's registry key.
                If the value does not exist under the application's registry key, the value will be created under the key.
            </summary>
            <param name="registryProfileType">The type of profile the application wants to access.</param>
            <param name="registryId">ID of the value that is being set.</param>
            <param name="value">Value that is being set.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.SetConvergence(NvAPIWrapper.Native.Stereo.Structures.StereoHandle,System.Single)">
            <summary>
                This API sets convergence to the given value.
            </summary>
            <param name="handle">Stereo handle that corresponds to the device interface.</param>
            <param name="convergence">New value for convergence.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.SetDefaultProfile(System.String)">
            <summary>
                This API defines the stereo profile used by the driver in case the application has no associated profile.
                To take effect, this API must be called before D3D device is created. Calling once a device has been created will
                not affect the current device.
            </summary>
            <param name="profileName">Default profile name. </param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.SetDriverMode(NvAPIWrapper.Native.Stereo.StereoDriverMode)">
            <summary>
                This API sets the 3D stereo driver mode: Direct or Automatic
            </summary>
            <param name="driverMode">Defines the 3D stereo driver mode: Direct or Automatic</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.SetFrustumAdjustMode(NvAPIWrapper.Native.Stereo.Structures.StereoHandle,NvAPIWrapper.Native.Stereo.StereoFrustumAdjustMode)">
            <summary>
                This API sets the current frustum adjust mode value.
            </summary>
            <param name="handle">Stereo handle that corresponds to the device interface.</param>
            <param name="frustumAdjustMode">New value for frustum adjust mode.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.WasLastDrawStereoizedDebug(NvAPIWrapper.Native.Stereo.Structures.StereoHandle)">
            <summary>
                This API checks if the last draw call was stereoized. It is a very expensive to call and should be used for
                debugging purpose *only*.
            </summary>
            <param name="handle">Stereo handle that corresponds to the device interface.</param>
            <returns>true if the last draw was a stereo draw; otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.SetNotificationMessage(NvAPIWrapper.Native.Stereo.Structures.StereoHandle,System.UInt64,System.UInt64)">
            <summary>
                This API is a Setup notification message that the stereo driver uses to notify the application
                when the user changes the stereo driver state.
                When the user changes the stereo state (Activated or Deactivated, separation or conversion)
                the stereo driver posts a defined message with the following parameters:
                lParam  is the current conversion. (Actual conversion is *(float*)&amp;lParam )
                wParam == MAKEWPARAM(l, h) where
                - l == 0 if stereo is deactivated
                - l == 1 if stereo is deactivated
                - h is the current separation. (Actual separation is float(h*100.f/0xFFFF)
                Call this API with NULL hWnd to prohibit notification.
            </summary>
            <param name="handle">Stereo handle corresponding to the device interface.</param>
            <param name="windowsHandle">
                Window handle that will be notified when the user changes the stereo driver state. Actual
                handle must be cast to an <see cref="T:System.UInt64" />.
            </param>
            <param name="messageId">MessageID of the message that will be posted to window</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.SetSeparation(NvAPIWrapper.Native.Stereo.Structures.StereoHandle,System.Single)">
            <summary>
                This API sets separation to given percentage.
            </summary>
            <param name="handle">Stereo handle that corresponds to the device interface.</param>
            <param name="separationPercentage">New value for separation percentage.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.SetSurfaceCreationMode(NvAPIWrapper.Native.Stereo.Structures.StereoHandle,NvAPIWrapper.Native.Stereo.StereoSurfaceCreateMode)">
            <summary>
                This API sets surface creation mode for this device interface.
            </summary>
            <param name="handle">Stereo handle that corresponds to the device interface.</param>
            <param name="surfaceCreateMode">New surface creation mode for this device interface.</param>
        </member>
        <member name="M:NvAPIWrapper.Native.StereoApi.TriggerActivation(NvAPIWrapper.Native.Stereo.Structures.StereoHandle)">
            <summary>
                This API allows an application to trigger creation of a stereo desktop,
                in case the creation was stopped on application launch.
            </summary>
            <param name="handle">Stereo handle that corresponds to the device interface.</param>
        </member>
        <member name="T:NvAPIWrapper.Native.Stereo.StereoActivationFlag">
            <summary>
                Holds a list of valid values for the stereo activation process
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Stereo.StereoActivationFlag.Immediate">
            <summary>
                Immediate activation
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Stereo.StereoActivationFlag.Delayed">
            <summary>
                Delayed activation
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Stereo.StereoActiveEye">
            <summary>
                Holds a list of valid values for back buffer mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Stereo.StereoActiveEye.None">
            <summary>
                No back buffer
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Stereo.StereoActiveEye.RightEye">
            <summary>
                Right eye back buffer mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Stereo.StereoActiveEye.LeftEye">
            <summary>
                Left eye back buffer mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Stereo.StereoActiveEye.Mono">
            <summary>
                Mono back buffer mode
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Stereo.StereoDriverMode">
            <summary>
                Holds a list of possible values for the driver stereo mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Stereo.StereoDriverMode.Automatic">
            <summary>
                Automatic stereo mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Stereo.StereoDriverMode.Direct">
            <summary>
                Direct stereo mode
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Stereo.StereoFrustumAdjustMode">
            <summary>
                Holds a list of valid frustum adjust modes
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Stereo.StereoFrustumAdjustMode.NoFrustumAdjust">
            <summary>
                No frustum adjustment
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Stereo.StereoFrustumAdjustMode.Stretch">
            <summary>
                Stretch frustum adjustment
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Stereo.StereoFrustumAdjustMode.ClearEdges">
            <summary>
                Clear edges frustum adjustment
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Stereo.StereoRegistryIdentification">
            <summary>
                Holds a list of valid identification for registry values
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Stereo.StereoRegistryIdentification.Convergence">
            <summary>
                Convergence value identification
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Stereo.StereoRegistryIdentification.FrustumAdjustMode">
            <summary>
                Frustum adjust mode value identification
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Stereo.StereoRegistryProfileType">
            <summary>
                Holds a list of valid application configuration registry profiles
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Stereo.StereoRegistryProfileType.DefaultProfile">
            <summary>
                The default profile
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Stereo.StereoRegistryProfileType.DirectX9Profile">
            <summary>
                The DirectX 9 specific profile
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Stereo.StereoRegistryProfileType.DirectX10Profile">
            <summary>
                The DirectX 10 specific profile
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Stereo.StereoSurfaceCreateMode">
            <summary>
                Holds a list of valid values for the stereo surface creation mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Stereo.StereoSurfaceCreateMode.Auto">
            <summary>
                Automatic surface creation
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Stereo.StereoSurfaceCreateMode.ForceStereo">
            <summary>
                Force stereo surface creation
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Stereo.StereoSurfaceCreateMode.ForceMono">
            <summary>
                Force mono surface creation
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Stereo.StereoSwapChainMode">
            <summary>
                Holds a list of valid flags for the swap chain mode
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Stereo.StereoSwapChainMode.Default">
            <summary>
                Automatic
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Stereo.StereoSwapChainMode.Stereo">
            <summary>
                Stereo
            </summary>
        </member>
        <member name="F:NvAPIWrapper.Native.Stereo.StereoSwapChainMode.Mono">
            <summary>
                Mono
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Stereo.Structures.StereoCapabilitiesV1">
            <summary>
                Holds information regarding the stereo capabilities of a monitor
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Stereo.Structures.StereoCapabilitiesV1.IsNoWindowedModeSupported">
            <summary>
                Gets a boolean value indicating if no windowed mode is supported
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Stereo.Structures.StereoCapabilitiesV1.IsAutomaticWindowedModeSupported">
            <summary>
                Gets a boolean value indicating if automatic windowed mode is supported
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Native.Stereo.Structures.StereoCapabilitiesV1.IsPersistentWindowedModeSupported">
            <summary>
                Gets a boolean value indicating if the persistent windowed mode is supported
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Native.Stereo.Structures.StereoHandle">
            <summary>
            Holds a handle representing a Device Stereo Session
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Native.Stereo.Structures.StereoHandle.Equals(NvAPIWrapper.Native.Stereo.Structures.StereoHandle)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Stereo.Structures.StereoHandle.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Stereo.Structures.StereoHandle.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Stereo.Structures.StereoHandle.ToString">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Stereo.Structures.StereoHandle.MemoryAddress">
            <inheritdoc />
        </member>
        <member name="P:NvAPIWrapper.Native.Stereo.Structures.StereoHandle.IsNull">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Native.Stereo.Structures.StereoHandle.op_Equality(NvAPIWrapper.Native.Stereo.Structures.StereoHandle,NvAPIWrapper.Native.Stereo.Structures.StereoHandle)">
            <summary>
                Checks for equality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:NvAPIWrapper.Native.Stereo.Structures.StereoHandle.op_Inequality(NvAPIWrapper.Native.Stereo.Structures.StereoHandle,NvAPIWrapper.Native.Stereo.Structures.StereoHandle)">
            <summary>
                Checks for inequality between two objects of same type
            </summary>
            <param name="left">The first object</param>
            <param name="right">The second object</param>
            <returns>true, if both objects are not equal, otherwise false</returns>
        </member>
        <member name="P:NvAPIWrapper.Native.Stereo.Structures.StereoHandle.DefaultHandle">
            <summary>
                Gets default StereoHandle with a null pointer
            </summary>
        </member>
        <member name="T:NvAPIWrapper.NVIDIA">
            <summary>
                .Net friendly version of system and general functions of NVAPI library
            </summary>
        </member>
        <member name="P:NvAPIWrapper.NVIDIA.ChipsetInfo">
            <summary>
                Gets information about the system's chipset.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.NVIDIA.DriverBranchVersion">
            <summary>
                Gets NVIDIA driver branch version as string
            </summary>
        </member>
        <member name="P:NvAPIWrapper.NVIDIA.DriverVersion">
            <summary>
                Gets NVIDIA driver version
            </summary>
        </member>
        <member name="P:NvAPIWrapper.NVIDIA.InterfaceVersionString">
            <summary>
                Gets NVAPI interface version as string
            </summary>
        </member>
        <member name="P:NvAPIWrapper.NVIDIA.LidAndDockParameters">
            <summary>
                Gets the current lid and dock information.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.NVIDIA.Initialize">
            <summary>
                Initializes the NvAPI library (if not already initialized) but always increments the ref-counter.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.NVIDIA.RestartDisplayDriver">
            <summary>
                PRIVATE - Requests to restart the display driver
            </summary>
        </member>
        <member name="M:NvAPIWrapper.NVIDIA.Unload">
            <summary>
                Decrements the ref-counter and when it reaches ZERO, unloads NVAPI library.
            </summary>
        </member>
        <member name="T:NvAPIWrapper.Stereo.StereoApplicationConfiguration">
            <summary>
                Represents an application registry configuration profile as well as providing static access to system-wide and
                application-wide stereo configurations.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Stereo.StereoApplicationConfiguration.DefaultConfigurationProfile">
            <summary>
                Gets the default configuration profile for the current application
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Stereo.StereoApplicationConfiguration.DefaultProfile">
            <summary>
                Gets the currently default profile name.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Stereo.StereoApplicationConfiguration.DirectX10ConfigurationProfile">
            <summary>
                Gets the DirectX 10 configuration profile for the current application.
                Use this property if only your application supports multiple DirectX versions.
                Otherwise consider using the <see cref="P:NvAPIWrapper.Stereo.StereoApplicationConfiguration.DefaultConfigurationProfile" /> property.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Stereo.StereoApplicationConfiguration.DirectX9ConfigurationProfile">
            <summary>
                Gets the DirectX 9 configuration profile for the current application.
                Use this property if only your application supports multiple DirectX versions.
                Otherwise consider using the <see cref="P:NvAPIWrapper.Stereo.StereoApplicationConfiguration.DefaultConfigurationProfile" /> property.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Stereo.StereoApplicationConfiguration.IsStereoEnable">
            <summary>
                Gets a boolean value indicating if the stereo mode is enable in the registry.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Stereo.StereoApplicationConfiguration.IsWindowedModeSupported">
            <summary>
                Gets a boolean value indicating if the windowed mode stereo is supported
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Stereo.StereoApplicationConfiguration.ProfileType">
            <summary>
                Gets the stereo registry profile type associated with this instance.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoApplicationConfiguration.DisableStereo">
            <summary>
                Disables the stereo mode in the registry. The effect is system wide.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoApplicationConfiguration.EnableStereo">
            <summary>
                Enables the stereo mode in the registry. The effect is system wide.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoApplicationConfiguration.GetMonitorCapabilities(System.IntPtr)">
            <summary>
                Gets the monitor capabilities for the passed monitor handle.
            </summary>
            <param name="monitorHandle">The monitor handle represented by a pointer.</param>
            <returns>The stereo capabilities of the monitor.</returns>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoApplicationConfiguration.SetDefaultProfile(System.String)">
            <summary>
                Sets the default stereo profile used by the driver in case te application has no associated profile.
                For the changes to take effect, this method must be called before creating a D3D device.
            </summary>
            <param name="profileName"></param>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoApplicationConfiguration.SetDriverMode(NvAPIWrapper.Native.Stereo.StereoDriverMode)">
            <summary>
                Sets the 3D stereo driver mode.
            </summary>
            <param name="driverMode"></param>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoApplicationConfiguration.DeleteAllValues">
            <summary>
                Deletes the entire profile's registry key and therefore resets all customized values.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoApplicationConfiguration.DeleteValue(NvAPIWrapper.Native.Stereo.StereoRegistryIdentification)">
            <summary>
                Removes the given value from the profile's registry key.
            </summary>
            <param name="valueId"></param>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoApplicationConfiguration.SetValue(NvAPIWrapper.Native.Stereo.StereoRegistryIdentification,System.Single)">
            <summary>
                Sets the given value under the profile's registry key.
            </summary>
            <param name="valueId">The identification of the value to be set.</param>
            <param name="value">The actual value being set.</param>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoApplicationConfiguration.SetValue(NvAPIWrapper.Native.Stereo.StereoRegistryIdentification,System.Int32)">
            <summary>
                Sets the given value under the profile's registry key.
            </summary>
            <param name="valueId">The identification of the value to be set.</param>
            <param name="value">The actual value being set.</param>
        </member>
        <member name="T:NvAPIWrapper.Stereo.StereoDeviceSession">
            <summary>
                Represents an stereo session created for a D3D device by wrapping over a <see cref="T:NvAPIWrapper.Native.Stereo.Structures.StereoHandle" />
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoDeviceSession.#ctor(NvAPIWrapper.Native.Stereo.Structures.StereoHandle)">
            <summary>
                Create a new instance of <see cref="T:NvAPIWrapper.Stereo.StereoDeviceSession" /> directly from a <see cref="T:NvAPIWrapper.Native.Stereo.Structures.StereoHandle" />
            </summary>
            <param name="handle">The <see cref="T:NvAPIWrapper.Native.Stereo.Structures.StereoHandle" /> to represent.</param>
        </member>
        <member name="P:NvAPIWrapper.Stereo.StereoDeviceSession.Convergence">
            <summary>
                Gets and sets the current convergence value
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Stereo.StereoDeviceSession.EyeSeparation">
            <summary>
                Gets the eye separation as a ratio of [between eye distance]/[physical screen width].
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Stereo.StereoDeviceSession.FrustumAdjustMode">
            <summary>
                Gets and sets the current frustum adjust mode value.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Stereo.StereoDeviceSession.Handle">
            <summary>
                Gets the underlying <see cref="T:NvAPIWrapper.Native.Stereo.Structures.StereoHandle" /> represented by this instance of <see cref="T:NvAPIWrapper.Stereo.StereoDeviceSession" />
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Stereo.StereoDeviceSession.IsStereoActivated">
            <summary>
                Gets a boolean value indicating if the stereo is activated.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Stereo.StereoDeviceSession.IsValid">
            <summary>
                Gets a boolean value indicating if this instance is valid.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Stereo.StereoDeviceSession.Separation">
            <summary>
                Gets and sets the current separation value in percentage.
            </summary>
        </member>
        <member name="P:NvAPIWrapper.Stereo.StereoDeviceSession.SurfaceCreationMode">
            <summary>
                Gets and sets the current surface creation mode
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoDeviceSession.Dispose">
            <inheritdoc />
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoDeviceSession.CreateFromIUnknownD3DDevice(System.IntPtr)">
            <summary>
                Creates a new instance of <see cref="T:NvAPIWrapper.Stereo.StereoDeviceSession" /> from a D3D Device implementing the IUnknown
                interface.
            </summary>
            <param name="d3dDevice"></param>
            <returns></returns>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoDeviceSession.ActivateStereo">
            <summary>
                Activates stereo for this device. Activating stereo is only possible if stereo is already enabled in the registry.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoDeviceSession.CaptureJPEGImage(System.UInt32)">
            <summary>
                Captures the current stereo image in JPEG stereo format with the given quality. Only the last capture call per flip
                will be effective.
            </summary>
            <param name="quality">Quality of the JPEG image to be captured. Integer value between 0 and 100.</param>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoDeviceSession.CapturePNGImage">
            <summary>
                Captures the current stereo image in PNG stereo format. Only the last capture call per flip will be effective.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoDeviceSession.D3D1XCreateSwapChain(System.IntPtr,NvAPIWrapper.Native.Stereo.StereoSwapChainMode)">
            <summary>
                Creates a mono or a stereo swap chain by wrapping the IDXGIFactory::CreateSwapChain method and notifying the device
                with additional information regarding the stereo swap chain mode selected.
            </summary>
            <param name="dxgiSwapChainDescription">
                A pointer to the swap-chain description (DXGI_SWAP_CHAIN_DESC). This parameter
                cannot be NULL.
            </param>
            <param name="swapChainMode"></param>
            <returns>A pointer to the swap chain created.</returns>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoDeviceSession.D3D9CreateSwapChain(System.IntPtr,NvAPIWrapper.Native.Stereo.StereoSwapChainMode)">
            <summary>
                Creates a mono or a stereo swap chain by wrapping the IDirect3DDevice9::CreateAdditionalSwapChain method and
                notifying the device with additional information regarding the stereo swap chain mode selected.
            </summary>
            <param name="d3dPresentParameters">A pointer to the swap-chain description (DXGI). This parameter cannot be NULL.</param>
            <param name="swapChainMode"></param>
            <returns>A pointer to the swap chain created.</returns>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoDeviceSession.DeactivateStereo">
            <summary>
                Deactivates stereo for this device.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoDeviceSession.DecreaseConvergence">
            <summary>
                Decreases convergence for this device (just like the Ctrl+F5 hot-key).
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoDeviceSession.DecreaseSeparation">
            <summary>
                Decreases separation for this device (just like the Ctrl+F3 hot-key).
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoDeviceSession.IncreaseConvergence">
            <summary>
                Increases convergence for this device (just like the Ctrl+F6 hot-key).
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoDeviceSession.IncreaseSeparation">
            <summary>
                Increases separation for this device (just like the Ctrl+F4 hot-key).
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoDeviceSession.InitActivation(NvAPIWrapper.Native.Stereo.StereoActivationFlag)">
            <summary>
                This API allows an application to enable stereo viewing, without the need of a GUID/Key pair
                This API cannot be used to enable stereo viewing on 3DTV.
                HOW TO USE:    Call this function immediately after device creation, then follow with a reset. \n
                Very generically:
                Create Device->Create Stereo Handle->InitActivation->Reset Device
            </summary>
            <param name="activationFlag">Flags to enable or disable delayed activation.</param>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoDeviceSession.ReverseStereoBlitControl(System.Boolean)">
            <summary>
                Turns reverse stereo blit on or off.
                After reversed stereo blit control is turned on, blits from the stereo surface will
                produce the right-eye image in the left side of the destination surface and the left-eye
                image in the right side of the destination surface.
                In DirectX 9, the destination surface must be created as the render target, and StretchRect must be used.
                Conditions:
                - DstWidth == 2*SrcWidth
                - DstHeight == SrcHeight
                - Src surface is the stereo surface.
                - SrcRect must be {0,0,SrcWidth,SrcHeight}
                - DstRect must be {0,0,DstWidth,DstHeight}
                In DirectX 10, ResourceCopyRegion must be used.
                Conditions:
                - DstWidth == 2*SrcWidth
                - DstHeight == SrcHeight
                - dstX == 0,
                - dstY == 0,
                - dstZ == 0,
                - SrcBox: left=top=front==0; right==SrcWidth; bottom==SrcHeight; back==1;
            </summary>
            <param name="turnOn">A boolean value to enable or disable blit control</param>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoDeviceSession.SetActiveEye(NvAPIWrapper.Native.Stereo.StereoActiveEye)">
            <summary>
                Sets the back buffer to left or right in direct stereo mode.
            </summary>
            <param name="activeKey">Defines active eye in Direct stereo mode.</param>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoDeviceSession.SetNotificationMessage(System.UInt64,System.UInt64)">
            <summary>
                Asks the stereo driver to notify the application with a notification messages
                when the user changes the stereo driver state.
                When the user changes the stereo state (Activated or Deactivated, separation or conversion)
                the stereo driver posts a defined message with the following parameters:
                lParam  is the current conversion. (Actual conversion is *(float*)&amp;lParam )
                wParam == MAKEWPARAM(l, h) where
                - l == 0 if stereo is deactivated
                - l == 1 if stereo is deactivated
                - h is the current separation. (Actual separation is float(h*100.f/0xFFFF)
                Call this API with NULL hWnd to prohibit notification.
            </summary>
            <param name="windowsHandle">
                Window handle that will be notified when the user changes the stereo driver state. Actual
                handle must be cast to an <see cref="T:System.UInt64" />.
            </param>
            <param name="messageId">MessageID of the message that will be posted to window</param>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoDeviceSession.TriggerActivation">
            <summary>
                Triggers the creation of a stereo desktop in case the creation was stopped on application launch.
            </summary>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoDeviceSession.WasLastDrawStereoizedDebugOnly">
            <summary>
                Checks if the last draw call was stereoized. It is a very expensive to call and should be used for debugging
                purpose *only*.
            </summary>
            <returns>true if the last draw was stereoized; otherwise false.</returns>
        </member>
        <member name="M:NvAPIWrapper.Stereo.StereoDeviceSession.Finalize">
            <inheritdoc />
        </member>
    </members>
</doc>
